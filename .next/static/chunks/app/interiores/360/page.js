/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/interiores/360/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CAdministrador%5CDesktop%5CroblesRender%5CroblesRender%5Csrc%5Capp%5Cinteriores%5C360%5Cpage.jsx&server=false!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CAdministrador%5CDesktop%5CroblesRender%5CroblesRender%5Csrc%5Capp%5Cinteriores%5C360%5Cpage.jsx&server=false! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/interiores/360/page.jsx */ \"(app-pages-browser)/./src/app/interiores/360/page.jsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNBZG1pbmlzdHJhZG9yJTVDRGVza3RvcCU1Q3JvYmxlc1JlbmRlciU1Q3JvYmxlc1JlbmRlciU1Q3NyYyU1Q2FwcCU1Q2ludGVyaW9yZXMlNUMzNjAlNUNwYWdlLmpzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/MGViYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEFkbWluaXN0cmFkb3JcXFxcRGVza3RvcFxcXFxyb2JsZXNSZW5kZXJcXFxccm9ibGVzUmVuZGVyXFxcXHNyY1xcXFxhcHBcXFxcaW50ZXJpb3Jlc1xcXFwzNjBcXFxccGFnZS5qc3hcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CAdministrador%5CDesktop%5CroblesRender%5CroblesRender%5Csrc%5Capp%5Cinteriores%5C360%5Cpage.jsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@cfcs/core/dist/cfcs.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/@cfcs/core/dist/cfcs.esm.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Computed: function() { return /* binding */ Computed; },\n/* harmony export */   ComputedObserver: function() { return /* binding */ ComputedObserver; },\n/* harmony export */   Observe: function() { return /* binding */ Observe; },\n/* harmony export */   Observer: function() { return /* binding */ Observer; },\n/* harmony export */   Reactive: function() { return /* binding */ Reactive; },\n/* harmony export */   ReactiveSubscribe: function() { return /* binding */ ReactiveSubscribe; },\n/* harmony export */   adaptReactive: function() { return /* binding */ adaptReactive; },\n/* harmony export */   camelize: function() { return /* binding */ camelize; },\n/* harmony export */   computed: function() { return /* binding */ computed; },\n/* harmony export */   defineObservers: function() { return /* binding */ defineObservers; },\n/* harmony export */   findTarget: function() { return /* binding */ findTarget; },\n/* harmony export */   getObserver: function() { return /* binding */ getObserver; },\n/* harmony export */   getObservers: function() { return /* binding */ getObservers; },\n/* harmony export */   injectReactiveSubscribe: function() { return /* binding */ injectReactiveSubscribe; },\n/* harmony export */   isFunction: function() { return /* binding */ isFunction; },\n/* harmony export */   isObject: function() { return /* binding */ isObject; },\n/* harmony export */   isObserver: function() { return /* binding */ isObserver; },\n/* harmony export */   isReactive: function() { return /* binding */ isReactive; },\n/* harmony export */   isString: function() { return /* binding */ isString; },\n/* harmony export */   keys: function() { return /* binding */ keys; },\n/* harmony export */   observe: function() { return /* binding */ observe; },\n/* harmony export */   partialReactive: function() { return /* binding */ partialReactive; },\n/* harmony export */   reactive: function() { return /* binding */ reactive; },\n/* harmony export */   setObserver: function() { return /* binding */ setObserver; },\n/* harmony export */   withClassMethods: function() { return /* binding */ withClassMethods; },\n/* harmony export */   withReactiveMethods: function() { return /* binding */ withReactiveMethods; }\n/* harmony export */ });\n/* harmony import */ var _egjs_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @egjs/component */ \"(app-pages-browser)/./node_modules/@egjs/component/dist/component.esm.js\");\n/*\nCopyright (c) NAVER Crop.\nname: @cfcs/core\nlicense: MIT\nauthor: NAVER Crop.\nrepository: https://github.com/naver/cfcs\nversion: 0.0.24\n*/ \n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */ /**\n * @hidden\n */ function keys(obj) {\n    return Object.keys(obj);\n}\n/**\n * @hidden\n */ function camelize(str) {\n    return str.replace(/[\\s-_]([a-z])/g, function(all, letter) {\n        return letter.toUpperCase();\n    });\n}\n/**\n * @hidden\n */ function isString(val) {\n    return typeof val === \"string\";\n}\n/**\n * @hidden\n */ function isObject(val) {\n    return typeof val === \"object\";\n}\n/**\n * @hidden\n */ function isFunction(val) {\n    return typeof val === \"function\";\n}\n/**\n * @hidden\n */ function findTarget(target) {\n    var el;\n    if (!target) {\n        return null;\n    }\n    if (isString(target)) {\n        el = document.querySelector(target);\n    } else if (target instanceof Element) {\n        el = target;\n    } else if (\"value\" in target || \"current\" in target) {\n        el = target.value || target.current;\n    }\n    return el;\n}\n/**\n * @description Sets the name of the class method to be exposed to the outside.\n * @category DOM\n * @return Property Decorator\n * @example\n * ```ts\n * import { withClassMethods } from \"@cfcs/core\";\n *\n * class YourFrameworkComponent {\n *   @withClassMethod(METHOD_NAMES)\n *   inst = new YourComponent();\n * }\n * ```\n */ function withClassMethods(methods) {\n    return function(prototype, memberName) {\n        methods.forEach(function(name) {\n            if (name in prototype) {\n                return;\n            }\n            prototype[name] = function() {\n                var _a;\n                var args = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args[_i] = arguments[_i];\n                }\n                var result = (_a = this[memberName])[name].apply(_a, args); // fix `this` type to return your own `class` instance to the instance using the decorator.\n                if (result === this[memberName]) {\n                    return this;\n                } else {\n                    return result;\n                }\n            };\n        });\n    };\n}\nvar OBSERVERS_PATH = \"__observers__\";\nvar COMPUTED_PATH = \"__computed__\";\nvar CFCS_DETECTED_DEPENDENCIES_VERSION = 1;\nvar CFCS_DETECTED_DEPENDENCIES = \"__CFCS_DETECTED_DEPENDENCIES__\";\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction getDetectedStack() {\n    // Version issues do not occur when you access the native object in the global.\n    Object[CFCS_DETECTED_DEPENDENCIES] = Object[CFCS_DETECTED_DEPENDENCIES] || {};\n    var versionList = Object[CFCS_DETECTED_DEPENDENCIES];\n    versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] = versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] || [];\n    return versionList[CFCS_DETECTED_DEPENDENCIES_VERSION];\n}\nfunction getCurrentDetected() {\n    var stack = getDetectedStack();\n    return stack[stack.length - 1];\n}\nfunction detectDependencies(host) {\n    var stack = getDetectedStack();\n    var observers = [];\n    var detected = {\n        host: host,\n        observers: observers,\n        push: function(observer) {\n            if (host !== observer && observers.indexOf(observer) === -1) {\n                observers.push(observer);\n            }\n        }\n    };\n    stack.push(detected);\n    return detected;\n}\nfunction endDetectDependencies() {\n    var stack = getDetectedStack();\n    return stack.pop();\n}\n/**\n * Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @see observe\n */ var Observer = /*#__PURE__*/ function() {\n    /**\n   *\n   */ function Observer(value) {\n        this._emitter = new _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this._current = value;\n    }\n    var __proto = Observer.prototype;\n    Object.defineProperty(__proto, \"current\", {\n        /**\n     * return the current value.\n     */ get: function() {\n            var currentDetected = getCurrentDetected();\n            currentDetected === null || currentDetected === void 0 ? void 0 : currentDetected.push(this);\n            return this._current;\n        },\n        set: function(value) {\n            this._setCurrent(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n   * When the current value changes, the callback function is called.\n   */ __proto.subscribe = function(callback) {\n        this.current;\n        this._emitter.on(\"update\", callback);\n        return this;\n    };\n    /**\n   * Cancel the registered subscription through callback.\n   */ __proto.unsubscribe = function(callback) {\n        this._emitter.off(\"update\", callback);\n        return this;\n    };\n    __proto._setCurrent = function(value) {\n        var prevValue = this._current;\n        var isUpdate = value !== prevValue;\n        this._current = value;\n        if (isUpdate) {\n            this._emitter.trigger(\"update\", value, prevValue);\n        }\n    };\n    /**\n   * @hidden\n   */ __proto.toString = function() {\n        return \"\".concat(this.current);\n    };\n    /**\n   * @hidden\n   */ __proto.valueOf = function() {\n        return this.current;\n    };\n    return Observer;\n}();\n/**\n * @category Reactive\n * @hidden\n */ var ComputedObserver = /*#__PURE__*/ function(_super) {\n    __extends(ComputedObserver, _super);\n    /**\n   * @description Creates a new computed observer from the values of other observers.\n   * It is read-only and if you change the value of the observer used inside the callback, its value will be automatically updated.\n   * @param _computedCallback A function for observers to be computed.\n   */ function ComputedObserver(_computedCallback) {\n        var _this = _super.call(this) || this;\n        _this._computedCallback = _computedCallback;\n        _this._registered = [];\n        _this._onCheckUpdate = function() {\n            _this._setCurrent(_this.current);\n        };\n        _this._current = _this.current;\n        return _this;\n    }\n    var __proto = ComputedObserver.prototype;\n    Object.defineProperty(__proto, \"current\", {\n        get: function() {\n            var _this = this;\n            detectDependencies(this);\n            var value = this._computedCallback();\n            var results = endDetectDependencies();\n            this._registered.forEach(function(observer) {\n                observer.unsubscribe(_this._onCheckUpdate);\n            });\n            results.observers.forEach(function(observer) {\n                observer.subscribe(_this._onCheckUpdate);\n            });\n            this._registered = results.observers;\n            return value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ComputedObserver;\n}(Observer);\nfunction injectObserve(prototype, memberName, publicName) {\n    if (publicName === void 0) {\n        publicName = memberName;\n    }\n    var nextAttributes = {\n        configurable: true,\n        get: function() {\n            return getObserver(this, publicName).current;\n        },\n        set: function(value) {\n            getObserver(this, publicName, value).current = value;\n        }\n    };\n    Object.defineProperty(prototype, memberName, nextAttributes);\n    if (publicName !== memberName) {\n        Object.defineProperty(prototype, publicName, {\n            configurable: true,\n            get: function() {\n                return getObserver(this, publicName).current;\n            }\n        });\n    }\n}\n/**\n * @description `Observe` is a property decorator and converts the property into a `reactive state`. You can detect its status through `.subscribe`.\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n* ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  // The public name and state name are the same.\n  @Observe value1 = 1;\n  // If you want to set public name and private properties separately\n  @Observe(\"value2\") _value2 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\ninterface C\n```\n */ function Observe() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    if (args.length > 1) {\n        return injectObserve(args[0], args[1]);\n    }\n    return function(prototype, memberName) {\n        return injectObserve(prototype, memberName, args[0]);\n    };\n}\n_c = Observe;\n/**\n * @hidden\n */ function Reactive() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    return Observe.apply(void 0, args);\n}\n_c1 = Reactive;\n/**\n * @hidden\n */ function injectReactiveSubscribe(object) {\n    object[\"subscribe\"] = function(name, callback) {\n        this[name];\n        getObserver(this, name).subscribe(callback);\n    };\n    object[\"unsubscribe\"] = function(name, callback) {\n        var _this = this;\n        if (!name) {\n            keys(getObservers(this)).forEach(function(observerName) {\n                _this.unsubscribe(observerName);\n            });\n            return;\n        }\n        if (!(name in this)) {\n            return;\n        }\n        getObserver(this, name).unsubscribe(callback);\n    };\n}\n/**\n * @description `ReactiveSubscribe` is a class decorator and adds `.subscribe` and `.unsubscribe` methods.\n * @category Reactive-Decorator\n * @see Observe\n * @example\n * ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  @Observe value1 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\n\ninterface Component extends ReactiveSubscribe<{\n  value1: number;\n  value2: number;\n}> {}\n\nconst component = new Component();\n\n// 1\nconsole.log(component.value1);\n\ncomponent.subscribe(\"value1\", nextValue => {\n  // When the change event occurs => (2, 2)\n  console.log(nextValue, component.value2);\n});\n```\n */ function ReactiveSubscribe(Constructor) {\n    var prototype = Constructor.prototype;\n    injectReactiveSubscribe(prototype);\n}\n_c2 = ReactiveSubscribe;\nfunction makeReactiveObject(setup, all) {\n    var result = isFunction(setup) ? setup() : setup;\n    var reactiveObject = {};\n    defineObservers(reactiveObject);\n    keys(result).forEach(function(name) {\n        var value = result[name];\n        if (isObserver(value)) {\n            setObserver(reactiveObject, name, value);\n        } else {\n            setObserver(reactiveObject, name, observe(value));\n        }\n        Observe(name)(reactiveObject, name);\n    });\n    injectReactiveSubscribe(reactiveObject);\n    return reactiveObject;\n}\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Makes all values into reactive objects.\n * @example\n * ```ts\n * import { reactive } from \"@cfcs/core\";\n *\n * const obj = reactive({\n *  value1: 1,\n *  value2: 2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * obj.value1 = 2;\n * ```\n */ function reactive(setup) {\n    return makeReactiveObject(setup);\n}\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Only the values to which observer is applied are objects to which reactive is applied.\n * @example\n * ```ts\n * import { partialReactive, observe } from \"@cfcs/core\";\n *\n * const value1 = observe(1);\n * const value2 = observe(2);\n * const obj = partialReactive({\n *  value1,\n *  value2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * value1.current = 2;\n * ```\n */ function partialReactive(setup) {\n    return makeReactiveObject(setup);\n}\n/**\n * @description Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @example\n * ```ts\n * import { observe } from \"@cfcs/core\";\n *\n * const ob1 = observe(1);\n *\n * ob1.subscribe(nextValue => {\n *   console.log(nextValue);\n * });\n *\n * ob1.current = 2;\n * ```\n */ function observe(defaultValue) {\n    return new Observer(defaultValue);\n}\n/**\n * @hidden\n */ function computed(computedCallback) {\n    return new ComputedObserver(computedCallback);\n}\n/**\n * @hidden\n */ function withReactiveMethods(ref, methods) {\n    var obj = {};\n    if (!methods) {\n        return obj;\n    }\n    methods.forEach(function(name) {\n        obj[name] = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            var current = ref.current || ref.value;\n            return current[name].apply(current, args);\n        };\n    });\n    return obj;\n}\n/**\n * @hidden\n */ function defineObservers(instance) {\n    var observers = {};\n    Object.defineProperty(instance, OBSERVERS_PATH, {\n        get: function() {\n            return observers;\n        }\n    });\n    return observers;\n}\n/**\n * @hidden\n */ function getObservers(instance) {\n    var _a, _b;\n    if (!instance[OBSERVERS_PATH]) {\n        defineObservers(instance);\n    }\n    var observers = instance[OBSERVERS_PATH];\n    var computedList = (_b = (_a = instance === null || instance === void 0 ? void 0 : instance.constructor) === null || _a === void 0 ? void 0 : _a.prototype) === null || _b === void 0 ? void 0 : _b[COMPUTED_PATH];\n    if (computedList) {\n        computedList.forEach(function(name) {\n            if (!(name in observers) && name in instance) {\n                instance[name];\n            }\n        });\n    }\n    return observers;\n}\n/**\n * @hidden\n */ function getObserver(instance, name, defaultValue) {\n    var observers = getObservers(instance);\n    if (!observers[name]) {\n        observers[name] = observe(defaultValue);\n    }\n    return observers[name];\n}\n/**\n * @hidden\n */ function setObserver(instance, name, observer) {\n    var observers = getObservers(instance);\n    observers[name] = observer;\n}\n/**\n * @description Whether that object is an observer instance\n * @category Reactive\n */ function isObserver(val) {\n    return val && isObject(val) && \"current\" in val && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n/**\n * @description Whether the object is reactive\n * @category Reactive\n */ function isReactive(val) {\n    return val && !isObserver(val) && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n/**\n * @category Reactive\n * @hidden\n */ function adaptReactive(adapter, props) {\n    var objectAdapter = isFunction(adapter) ? {\n        setup: adapter\n    } : adapter;\n    function getProps() {\n        var _a, _b, _c, _d, _e;\n        return (_e = (_c = (_a = props === null || props === void 0 ? void 0 : props()) !== null && _a !== void 0 ? _a : (_b = objectAdapter.props) === null || _b === void 0 ? void 0 : _b.call(objectAdapter)) !== null && _c !== void 0 ? _c : (_d = objectAdapter.data) === null || _d === void 0 ? void 0 : _d.call(objectAdapter)) !== null && _e !== void 0 ? _e : {};\n    }\n    var eventEmitter = new _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    var mountedHooks = [];\n    var initHooks = [];\n    var destroyHooks = [];\n    var onHooks = [];\n    var instanceRef = {\n        current: null\n    };\n    var offHooksList = [];\n    var initialState = null;\n    var eventNames = [];\n    var methodNames = [];\n    var onMounted = function(callback) {\n        mountedHooks.push(callback);\n    };\n    var onInit = function(callback) {\n        initHooks.push(callback);\n    };\n    var onDestroy = function(callback) {\n        destroyHooks.push(callback);\n    };\n    var on = function(callback) {\n        onHooks.push(callback);\n    };\n    var emit = function(eventName) {\n        var params = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            params[_i - 1] = arguments[_i];\n        }\n        eventEmitter.trigger.apply(eventEmitter, __spreadArray([\n            eventName\n        ], params, false));\n    };\n    var setInitialState = function(state) {\n        initialState = state;\n    };\n    var setEvents = function(events) {\n        eventNames = events;\n    };\n    var setMethods = function(methods) {\n        methodNames = methods;\n    };\n    if (objectAdapter.setup) {\n        instanceRef.current = objectAdapter.setup({\n            getProps: getProps,\n            setInitialState: setInitialState,\n            setEvents: setEvents,\n            setMethods: setMethods,\n            onMounted: onMounted,\n            onDestroy: onDestroy,\n            onInit: onInit,\n            emit: emit,\n            on: on\n        }) || null;\n    }\n    if (objectAdapter.created) {\n        instanceRef.current = objectAdapter.created(getProps()) || null;\n    }\n    if (objectAdapter.events) {\n        setEvents(objectAdapter.events);\n    }\n    if (objectAdapter.state) {\n        setInitialState(objectAdapter.state);\n    }\n    if (objectAdapter.methods) {\n        setMethods(objectAdapter.methods);\n    }\n    if (objectAdapter.mounted) {\n        onMounted(objectAdapter.mounted);\n    }\n    if (objectAdapter.destroy) {\n        destroyHooks.push(objectAdapter.destroy);\n    }\n    if (objectAdapter.init) {\n        initHooks.push(objectAdapter.init);\n    }\n    if (objectAdapter.on) {\n        onHooks.push(function(instance, eventName, listener) {\n            var off = objectAdapter.on(instance, eventName, listener);\n            return function() {\n                var _a;\n                off && off();\n                (_a = objectAdapter.off) === null || _a === void 0 ? void 0 : _a.call(objectAdapter, instance, eventName, listener);\n            };\n        });\n    }\n    return {\n        events: function() {\n            return eventNames;\n        },\n        state: function() {\n            var inst = instanceRef.current;\n            if (initialState) {\n                return initialState;\n            }\n            if (inst) {\n                var observers_1 = getObservers(inst);\n                setInitialState(keys(observers_1).reduce(function(prev, cur) {\n                    prev[cur] = observers_1[cur].current;\n                    return prev;\n                }, {}));\n            }\n            return initialState || {};\n        },\n        instance: function() {\n            return instanceRef.current;\n        },\n        mounted: function() {\n            var props = getProps();\n            mountedHooks.forEach(function(hook) {\n                instanceRef.current = hook(props, instanceRef.current) || instanceRef.current;\n            });\n        },\n        init: function() {\n            // on events\n            var instance = instanceRef.current;\n            var props = getProps();\n            offHooksList = eventNames.map(function(eventName) {\n                var listener = function() {\n                    var _a;\n                    var params = [];\n                    for(var _i = 0; _i < arguments.length; _i++){\n                        params[_i] = arguments[_i];\n                    }\n                    (_a = eventEmitter).trigger.apply(_a, __spreadArray([\n                        eventName\n                    ], params, false));\n                };\n                var instance = instanceRef.current;\n                return onHooks.map(function(hook) {\n                    return hook(instance, eventName, listener);\n                }).filter(Boolean);\n            }); // init\n            initHooks.forEach(function(hook) {\n                hook(instance, props);\n            });\n        },\n        destroy: function() {\n            // off events\n            offHooksList.forEach(function(offHooks) {\n                offHooks.forEach(function(hook) {\n                    hook();\n                });\n            }); // destroy\n            eventEmitter.off();\n            var instance = instanceRef.current;\n            var props = getProps();\n            destroyHooks.forEach(function(hook) {\n                hook(instance, props);\n            });\n        },\n        methods: function() {\n            return withReactiveMethods(instanceRef, methodNames);\n        },\n        on: function(eventName, listener) {\n            eventEmitter.on(eventName, listener);\n        },\n        off: function(eventName, listener) {\n            eventEmitter.off(eventName, listener);\n        }\n    };\n}\n/**\n * @description `Computed` is a property decorator.\n * Changes in computed state values are also recognized according to changes in observers used within the getter function.\n * You can detect its status through `.subscribe`.\n * @hidden\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n * ```ts\nconst ob1 = observe(0);\nconst ob2 = observe(1);\n\n// When\n@ReactiveSubscribe\nclass TestComputed {\n    @Computed\n    get ob3() {\n        return ob1.current + ob2.current;\n    }\n}\nconst inst = new TestComputed();\n\ninst.subscribe(\"ob3\", ob3 => {\n  console.log(ob3);\n});\n\nob1.current = 1;\n```\n */ function Computed(prototype, memberName, attributes) {\n    var get = attributes.get;\n    function getComputed() {\n        var observers = getObservers(this);\n        if (!(memberName in observers)) {\n            observers[memberName] = computed(get.bind(this));\n        }\n        return getObserver(this, memberName).current;\n    }\n    var nextAttributes = {\n        configurable: true,\n        get: getComputed\n    };\n    if (COMPUTED_PATH in prototype) {\n        prototype[COMPUTED_PATH] || (prototype[COMPUTED_PATH] = []);\n        var computedList = prototype[COMPUTED_PATH];\n        if (computedList.indexOf(memberName) === -1) {\n            computedList.push(memberName);\n        }\n    }\n    Object.defineProperty(prototype, memberName, nextAttributes);\n    return nextAttributes;\n}\n_c3 = Computed;\n //# sourceMappingURL=cfcs.esm.js.map\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Observe\");\n$RefreshReg$(_c1, \"Reactive\");\n$RefreshReg$(_c2, \"ReactiveSubscribe\");\n$RefreshReg$(_c3, \"Computed\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@cfcs/core/dist/cfcs.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@egjs/component/dist/component.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/@egjs/component/dist/component.esm.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComponentEvent: function() { return /* binding */ ComponentEvent$1; }\n/* harmony export */ });\n/*\nCopyright (c) NAVER Corp.\nname: @egjs/component\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-component\nversion: 3.0.5\n*/ /*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\n/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */ var isUndefined = function(value) {\n    return typeof value === \"undefined\";\n};\n// This class name is not matched to file name intentionally\n/**\n * Event class to provide additional properties\n * @ko Component에서 추가적인 프로퍼티를 제공하는 이벤트 클래스\n */ var ComponentEvent = /*#__PURE__*/ function() {\n    /**\n   * Create a new instance of ComponentEvent.\n   * @ko ComponentEvent의 새로운 인스턴스를 생성한다.\n   * @param eventType The name of the event.<ko>이벤트 이름.</ko>\n   * @param props An object that contains additional event properties.<ko>추가적인 이벤트 프로퍼티 오브젝트.</ko>\n   */ function ComponentEvent(eventType, props) {\n        var e_1, _a;\n        this._canceled = false;\n        if (props) {\n            try {\n                for(var _b = __values(Object.keys(props)), _c = _b.next(); !_c.done; _c = _b.next()){\n                    var key = _c.value;\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    this[key] = props[key];\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n        }\n        this.eventType = eventType;\n    }\n    /**\n   * Stop the event. {@link ComponentEvent#isCanceled} will return `true` after.\n   * @ko 이벤트를 중단한다. 이후 {@link ComponentEvent#isCanceled}가 `true`를 반환한다.\n   */ var __proto = ComponentEvent.prototype;\n    __proto.stop = function() {\n        this._canceled = true;\n    };\n    /**\n   * Returns a boolean value that indicates whether {@link ComponentEvent#stop} is called before.\n   * @ko {@link ComponentEvent#stop}이 호출되었는지 여부를 반환한다.\n   * @return {boolean} A boolean value that indicates whether {@link ComponentEvent#stop} is called before.<ko>이전에 {@link ComponentEvent#stop}이 불려졌는지 여부를 반환한다.</ko>\n   */ __proto.isCanceled = function() {\n        return this._canceled;\n    };\n    return ComponentEvent;\n}();\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n */ var Component = /*#__PURE__*/ function() {\n    /**\n   * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n   */ function Component() {\n        this._eventHandler = {};\n    }\n    /**\n   * Trigger a custom event.\n   * @ko 커스텀 이벤트를 발생시킨다\n   * @param {string | ComponentEvent} event The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>\n   * @param {any[]} params Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n   *   hi: { foo: { a: number; b: boolean } };\n   *   someEvent: (foo: number, bar: string) => void;\n   *   someOtherEvent: void; // When there's no event argument\n   * }> {\n   *   some(){\n   *     if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n   *       this.trigger(\"hi\");// fire hi event.\n   *     }\n   *   }\n   * }\n   *\n   * const some = new Some();\n   * some.on(\"beforeHi\", e => {\n   *   if(condition){\n   *     e.stop(); // When event call to stop, `hi` event not call.\n   *   }\n   *   // `currentTarget` is component instance.\n   *   console.log(some === e.currentTarget); // true\n   *\n   *   typeof e.foo; // number\n   *   typeof e.bar; // string\n   * });\n   * some.on(\"hi\", e => {\n   *   typeof e.foo.b; // boolean\n   * });\n   * // If you want to more know event design. You can see article.\n   * // https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n   * ```\n   */ var __proto = Component.prototype;\n    __proto.trigger = function(event) {\n        var params = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            params[_i - 1] = arguments[_i];\n        }\n        var eventName = event instanceof ComponentEvent ? event.eventType : event;\n        var handlers = __spread(this._eventHandler[eventName] || []);\n        if (handlers.length <= 0) {\n            return this;\n        }\n        if (event instanceof ComponentEvent) {\n            event.currentTarget = this;\n            handlers.forEach(function(handler) {\n                handler(event);\n            });\n        } else {\n            handlers.forEach(function(handler) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                handler.apply(void 0, __spread(params));\n            });\n        }\n        return this;\n    };\n    /**\n   * Executed event just one time.\n   * @ko 이벤트가 한번만 실행된다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: ComponentEvent;\n   * }> {\n   *   hi() {\n   *     alert(\"hi\");\n   *   }\n   *   thing() {\n   *     this.once(\"hi\", this.hi);\n   *   }\n   * }\n   *\n   * var some = new Some();\n   * some.thing();\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // fire alert(\"hi\");\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // Nothing happens\n   * ```\n   */ __proto.once = function(eventName, handlerToAttach) {\n        var _this = this;\n        if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n            var eventHash = eventName;\n            for(var key in eventHash){\n                this.once(key, eventHash[key]);\n            }\n            return this;\n        } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n            var listener_1 = function() {\n                var args = [];\n                for(var _i = 0; _i < arguments.length; _i++){\n                    args[_i] = arguments[_i];\n                }\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                handlerToAttach.apply(void 0, __spread(args));\n                _this.off(eventName, listener_1);\n            };\n            this.on(eventName, listener_1);\n        }\n        return this;\n    };\n    /**\n   * Checks whether an event has been attached to a component.\n   * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n   * @param {string} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n   * @return {boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n   * @example\n   * ```ts\n   * import Component from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   some() {\n   *     this.hasOn(\"hi\");// check hi event.\n   *   }\n   * }\n   * ```\n   */ __proto.hasOn = function(eventName) {\n        return !!this._eventHandler[eventName];\n    };\n    /**\n   * Attaches an event to a component.\n   * @ko 컴포넌트에 이벤트를 등록한다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.on(\"hi\",this.hi); //attach event\n   *   }\n   * }\n   * ```\n   */ __proto.on = function(eventName, handlerToAttach) {\n        if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n            var eventHash = eventName;\n            for(var name in eventHash){\n                this.on(name, eventHash[name]);\n            }\n            return this;\n        } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n            var handlerList = this._eventHandler[eventName];\n            if (isUndefined(handlerList)) {\n                this._eventHandler[eventName] = [];\n                handlerList = this._eventHandler[eventName];\n            }\n            handlerList.push(handlerToAttach);\n        }\n        return this;\n    };\n    /**\n   * Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.\n   * @ko 컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.\n   * @param {string?} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n   * @param {function?} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.off(\"hi\",this.hi); //detach event\n   *   }\n   * }\n   * ```\n   */ __proto.off = function(eventName, handlerToDetach) {\n        // Detach all event handlers.\n        if (isUndefined(eventName)) {\n            this._eventHandler = {};\n            return this;\n        }\n        // Detach all handlers for eventname or detach event handlers by object.\n        if (isUndefined(handlerToDetach)) {\n            if (typeof eventName === \"string\") {\n                delete this._eventHandler[eventName];\n                return this;\n            } else {\n                var eventHash = eventName;\n                for(var name in eventHash){\n                    this.off(name, eventHash[name]);\n                }\n                return this;\n            }\n        }\n        // Detach single event handler\n        var handlerList = this._eventHandler[eventName];\n        if (handlerList) {\n            var length = handlerList.length;\n            for(var i = 0; i < length; ++i){\n                if (handlerList[i] === handlerToDetach) {\n                    handlerList.splice(i, 1);\n                    if (length <= 1) {\n                        delete this._eventHandler[eventName];\n                    }\n                    break;\n                }\n            }\n        }\n        return this;\n    };\n    /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @name VERSION\n   * @static\n   * @example\n   * Component.VERSION;  // ex) 3.0.0\n   * @memberof Component\n   */ Component.VERSION = \"3.0.5\";\n    return Component;\n}();\n/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */ // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unsafe-assignment\nvar ComponentEvent$1 = ComponentEvent;\n/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */ /* harmony default export */ __webpack_exports__[\"default\"] = (Component);\n //# sourceMappingURL=component.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@egjs/component/dist/component.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@egjs/imready/dist/imready.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@egjs/imready/dist/imready.esm.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EVENTS: function() { return /* binding */ EVENTS; },\n/* harmony export */   ImageLoader: function() { return /* binding */ ImageLoader; },\n/* harmony export */   Loader: function() { return /* binding */ Loader; },\n/* harmony export */   Manager: function() { return /* binding */ ImReadyManager; },\n/* harmony export */   PROPS: function() { return /* binding */ PROPS; },\n/* harmony export */   REACTIVE_IMREADY: function() { return /* binding */ REACTIVE_IMREADY; },\n/* harmony export */   VideoLoader: function() { return /* binding */ VideoLoader; }\n/* harmony export */ });\n/* harmony import */ var _egjs_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @egjs/component */ \"(app-pages-browser)/./node_modules/@egjs/component/dist/component.esm.js\");\n/* harmony import */ var _cfcs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cfcs/core */ \"(app-pages-browser)/./node_modules/@cfcs/core/dist/cfcs.esm.js\");\n/*\nCopyright (c) NAVER Corp.\nname: @egjs/imready\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-imready\nversion: 1.4.1\n*/ \n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/** @deprecated */ function __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/ var isWindow = \"object\" !== \"undefined\";\nvar ua = isWindow ? window.navigator.userAgent : \"\";\nvar SUPPORT_COMPUTEDSTYLE = isWindow ? !!(\"getComputedStyle\" in window) : false;\nvar IS_IE = /MSIE|Trident|Windows Phone|Edge/.test(ua);\nvar SUPPORT_ADDEVENTLISTENER = isWindow ? !!(\"addEventListener\" in document) : false;\nvar WIDTH = \"width\";\nvar HEIGHT = \"height\";\nvar PROPS = [\n    \"prefix\",\n    \"loaders\"\n];\nvar EVENTS = [\n    \"preReadyElement\",\n    \"readyElement\",\n    \"error\",\n    \"preReady\",\n    \"ready\"\n];\nfunction getAttribute(el, name) {\n    return el.getAttribute(name) || \"\";\n}\nfunction toArray(arr) {\n    return [].slice.call(arr);\n}\nfunction hasSizeAttribute(target, prefix) {\n    if (prefix === void 0) {\n        prefix = \"data-\";\n    }\n    return !!target.getAttribute(prefix + \"width\");\n}\nfunction hasLoadingAttribute(target, prefix) {\n    if (prefix === void 0) {\n        prefix = \"data-\";\n    }\n    return \"loading\" in target && target.getAttribute(\"loading\") === \"lazy\" || !!target.getAttribute(prefix + \"lazy\");\n}\nfunction hasSkipAttribute(target, prefix) {\n    if (prefix === void 0) {\n        prefix = \"data-\";\n    }\n    return !!target.getAttribute(prefix + \"skip\");\n}\nfunction addEvent(element, type, handler) {\n    if (SUPPORT_ADDEVENTLISTENER) {\n        element.addEventListener(type, handler, false);\n    } else if (element.attachEvent) {\n        element.attachEvent(\"on\" + type, handler);\n    } else {\n        element[\"on\" + type] = handler;\n    }\n}\nfunction removeEvent(element, type, handler) {\n    if (element.removeEventListener) {\n        element.removeEventListener(type, handler, false);\n    } else if (element.detachEvent) {\n        element.detachEvent(\"on\" + type, handler);\n    } else {\n        element[\"on\" + type] = null;\n    }\n}\nfunction innerWidth(el) {\n    return getSize(el, \"Width\");\n}\nfunction innerHeight(el) {\n    return getSize(el, \"Height\");\n}\nfunction getStyles(el) {\n    return (SUPPORT_COMPUTEDSTYLE ? window.getComputedStyle(el) : el.currentStyle) || {};\n}\nfunction getSize(el, name) {\n    var size = el[\"client\" + name] || el[\"offset\" + name];\n    return parseFloat(size || getStyles(el)[name.toLowerCase()]) || 0;\n}\nfunction getContentElements(element, tags, prefix) {\n    var skipElements = toArray(element.querySelectorAll(__spreadArrays([\n        \"[\" + prefix + \"skip] [\" + prefix + \"width]\"\n    ], tags.map(function(tag) {\n        return [\n            \"[\" + prefix + \"skip] \" + tag,\n            tag + \"[\" + prefix + \"skip]\",\n            \"[\" + prefix + \"width] \" + tag\n        ].join(\", \");\n    })).join(\", \")));\n    return toArray(element.querySelectorAll(\"[\" + prefix + \"width], \" + tags.join(\", \"))).filter(function(el) {\n        return skipElements.indexOf(el) === -1;\n    });\n}\n/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/ var elements = [];\nfunction addAutoSizer(element, prefix) {\n    !elements.length && addEvent(window, \"resize\", resizeAllAutoSizers);\n    element.__PREFIX__ = prefix;\n    elements.push(element);\n    resize(element);\n}\nfunction removeAutoSizer(element, prefix) {\n    var index = elements.indexOf(element);\n    if (index < 0) {\n        return;\n    }\n    var fixed = getAttribute(element, prefix + \"fixed\");\n    delete element.__PREFIX__;\n    element.style[fixed === HEIGHT ? WIDTH : HEIGHT] = \"\";\n    elements.splice(index, 1);\n    !elements.length && removeEvent(window, \"resize\", resizeAllAutoSizers);\n}\nfunction resize(element, prefix) {\n    if (prefix === void 0) {\n        prefix = \"data-\";\n    }\n    var elementPrefix = element.__PREFIX__ || prefix;\n    var dataWidth = parseInt(getAttribute(element, \"\" + elementPrefix + WIDTH), 10) || 0;\n    var dataHeight = parseInt(getAttribute(element, \"\" + elementPrefix + HEIGHT), 10) || 0;\n    var fixed = getAttribute(element, elementPrefix + \"fixed\");\n    if (fixed === HEIGHT) {\n        var size = innerHeight(element) || dataHeight;\n        element.style[WIDTH] = dataWidth / dataHeight * size + \"px\";\n    } else {\n        var size = innerWidth(element) || dataWidth;\n        element.style[HEIGHT] = dataHeight / dataWidth * size + \"px\";\n    }\n}\nfunction resizeAllAutoSizers() {\n    elements.forEach(function(element) {\n        resize(element);\n    });\n}\nvar Loader = /*#__PURE__*/ function(_super) {\n    __extends(Loader, _super);\n    function Loader(element, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = _super.call(this) || this;\n        _this.isReady = false;\n        _this.isPreReady = false;\n        _this.hasDataSize = false;\n        _this.hasLoading = false;\n        _this.isSkip = false;\n        _this.onCheck = function(e) {\n            _this.clear();\n            if (e && e.type === \"error\") {\n                _this.onError(_this.element);\n            }\n            if (_this.hasLoading && _this.checkElement()) {\n                // I'm not ready\n                return;\n            }\n            // I'm pre-ready and ready!\n            var withPreReady = !_this.hasDataSize && !_this.hasLoading;\n            _this.onReady(withPreReady);\n        };\n        _this.options = __assign({\n            prefix: \"data-\"\n        }, options);\n        _this.element = element;\n        var prefix = _this.options.prefix;\n        _this.hasDataSize = hasSizeAttribute(element, prefix);\n        _this.isSkip = hasSkipAttribute(element, prefix);\n        _this.hasLoading = hasLoadingAttribute(element, prefix);\n        return _this;\n    }\n    var __proto = Loader.prototype;\n    __proto.check = function() {\n        if (this.isSkip || !this.checkElement()) {\n            // I'm Ready\n            this.onAlreadyReady(true);\n            return false;\n        }\n        if (this.hasDataSize) {\n            addAutoSizer(this.element, this.options.prefix);\n        }\n        if (this.hasDataSize || this.hasLoading) {\n            // I'm Pre Ready\n            this.onAlreadyPreReady();\n        }\n        // Wati Pre Ready, Ready\n        return true;\n    };\n    __proto.addEvents = function() {\n        var _this = this;\n        var element = this.element;\n        this.constructor.EVENTS.forEach(function(name) {\n            addEvent(element, name, _this.onCheck);\n        });\n    };\n    __proto.clear = function() {\n        var _this = this;\n        var element = this.element;\n        this.constructor.EVENTS.forEach(function(name) {\n            removeEvent(element, name, _this.onCheck);\n        });\n        this.removeAutoSizer();\n    };\n    __proto.destroy = function() {\n        this.clear();\n        this.off();\n    };\n    __proto.removeAutoSizer = function() {\n        if (this.hasDataSize) {\n            // I'm already ready.\n            var prefix = this.options.prefix;\n            removeAutoSizer(this.element, prefix);\n        }\n    };\n    __proto.onError = function(target) {\n        this.trigger(\"error\", {\n            element: this.element,\n            target: target\n        });\n    };\n    __proto.onPreReady = function() {\n        if (this.isPreReady) {\n            return;\n        }\n        this.isPreReady = true;\n        this.trigger(\"preReady\", {\n            element: this.element,\n            hasLoading: this.hasLoading,\n            isSkip: this.isSkip\n        });\n    };\n    __proto.onReady = function(withPreReady) {\n        if (this.isReady) {\n            return;\n        }\n        withPreReady = !this.isPreReady && withPreReady;\n        if (withPreReady) {\n            this.isPreReady = true;\n        }\n        this.removeAutoSizer();\n        this.isReady = true;\n        this.trigger(\"ready\", {\n            element: this.element,\n            withPreReady: withPreReady,\n            hasLoading: this.hasLoading,\n            isSkip: this.isSkip\n        });\n    };\n    __proto.onAlreadyError = function(target) {\n        var _this = this;\n        setTimeout(function() {\n            _this.onError(target);\n        });\n    };\n    __proto.onAlreadyPreReady = function() {\n        var _this = this;\n        setTimeout(function() {\n            _this.onPreReady();\n        });\n    };\n    __proto.onAlreadyReady = function(withPreReady) {\n        var _this = this;\n        setTimeout(function() {\n            _this.onReady(withPreReady);\n        });\n    };\n    Loader.EVENTS = [];\n    return Loader;\n}(_egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\nvar ElementLoader = /*#__PURE__*/ function(_super) {\n    __extends(ElementLoader, _super);\n    function ElementLoader() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    var __proto = ElementLoader.prototype;\n    __proto.setHasLoading = function(hasLoading) {\n        this.hasLoading = hasLoading;\n    };\n    __proto.check = function() {\n        if (this.isSkip) {\n            // I'm Ready\n            this.onAlreadyReady(true);\n            return false;\n        }\n        if (this.hasDataSize) {\n            addAutoSizer(this.element, this.options.prefix);\n            this.onAlreadyPreReady();\n        } else {\n            // has not data size\n            this.trigger(\"requestChildren\");\n        }\n        return true;\n    };\n    __proto.checkElement = function() {\n        return true;\n    };\n    __proto.destroy = function() {\n        this.clear();\n        this.trigger(\"requestDestroy\");\n        this.off();\n    };\n    __proto.onAlreadyPreReady = function() {\n        // has data size\n        _super.prototype.onAlreadyPreReady.call(this);\n        this.trigger(\"reqeustReadyChildren\");\n    };\n    ElementLoader.EVENTS = [];\n    return ElementLoader;\n}(Loader);\n/**\n * @alias eg.ImReady\n * @extends eg.Component\n */ var ImReadyManager = /*#__PURE__*/ function(_super) {\n    __extends(ImReadyManager, _super);\n    /**\n   * @param - ImReady's options\n   */ function ImReadyManager(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = _super.call(this) || this;\n        _this.readyCount = 0;\n        _this.preReadyCount = 0;\n        _this.totalCount = 0;\n        _this.totalErrorCount = 0;\n        _this.isPreReadyOver = true;\n        _this.elementInfos = [];\n        _this.options = __assign({\n            loaders: {},\n            prefix: \"data-\"\n        }, options);\n        return _this;\n    }\n    /**\n   * Checks whether elements are in the ready state.\n   * @ko 엘리먼트가 준비 상태인지 체크한다.\n   * @elements - Elements to check ready status. <ko> 준비 상태를 체크할 엘리먼트들.</ko>\n   * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReadyElement: e => {\n     *     // 1, 3\n     *     // 2, 3\n     *     // 3, 3\n     *     console.log(e.preReadyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n   */ var __proto = ImReadyManager.prototype;\n    __proto.check = function(elements) {\n        var _this = this;\n        var prefix = this.options.prefix;\n        this.clear();\n        this.elementInfos = toArray(elements).map(function(element, index) {\n            var loader = _this.getLoader(element, {\n                prefix: prefix\n            });\n            loader.check();\n            loader.on(\"error\", function(e) {\n                _this.onError(index, e.target);\n            }).on(\"preReady\", function(e) {\n                var info = _this.elementInfos[index];\n                info.hasLoading = e.hasLoading;\n                info.isSkip = e.isSkip;\n                var isPreReady = _this.checkPreReady(index);\n                _this.onPreReadyElement(index);\n                isPreReady && _this.onPreReady();\n            }).on(\"ready\", function(_a) {\n                var withPreReady = _a.withPreReady, hasLoading = _a.hasLoading, isSkip = _a.isSkip;\n                var info = _this.elementInfos[index];\n                info.hasLoading = hasLoading;\n                info.isSkip = isSkip;\n                var isPreReady = withPreReady && _this.checkPreReady(index);\n                var isReady = _this.checkReady(index);\n                // Pre-ready and ready occur simultaneously\n                withPreReady && _this.onPreReadyElement(index);\n                _this.onReadyElement(index);\n                isPreReady && _this.onPreReady();\n                isReady && _this.onReady();\n            });\n            return {\n                loader: loader,\n                element: element,\n                hasLoading: false,\n                hasError: false,\n                isPreReady: false,\n                isReady: false,\n                isSkip: false\n            };\n        });\n        var length = this.elementInfos.length;\n        this.totalCount = length;\n        if (!length) {\n            setTimeout(function() {\n                _this.onPreReady();\n                _this.onReady();\n            });\n        }\n        return this;\n    };\n    /**\n   * Gets the total count of elements to be checked.\n   * @ko 체크하는 element의 총 개수를 가져온다.\n   */ __proto.getTotalCount = function() {\n        return this.totalCount;\n    };\n    /**\n   * Whether the elements are all pre-ready. (all sizes are known)\n   * @ko 엘리먼트들이 모두 사전 준비가 됐는지 (사이즈를 전부 알 수 있는지) 여부.\n   */ __proto.isPreReady = function() {\n        return this.elementInfos.every(function(info) {\n            return info.isPreReady;\n        });\n    };\n    /**\n   * Whether the elements are all ready.\n   * @ko 엘리먼트들이 모두 준비가 됐는지 여부.\n   */ __proto.isReady = function() {\n        return this.elementInfos.every(function(info) {\n            return info.isReady;\n        });\n    };\n    /**\n   * Whether an error has occurred in the elements in the current state.\n   * @ko 현재 상태에서 엘리먼트들이 에러가 발생했는지 여부.\n   */ __proto.hasError = function() {\n        return this.totalErrorCount > 0;\n    };\n    /**\n   * Clears events of elements being checked.\n   * @ko 체크 중인 엘리먼트들의 이벤트를 해제 한다.\n   */ __proto.clear = function() {\n        this.isPreReadyOver = false;\n        this.totalCount = 0;\n        this.preReadyCount = 0;\n        this.readyCount = 0;\n        this.totalErrorCount = 0;\n        this.elementInfos.forEach(function(info) {\n            if (info.loader) {\n                info.loader.destroy();\n            }\n        });\n        this.elementInfos = [];\n    };\n    /**\n   * Destory all events.\n   * @ko 모든 이벤트를 해제 한다.\n   */ __proto.destroy = function() {\n        this.clear();\n        this.off();\n    };\n    __proto.getLoader = function(element, options) {\n        var _this = this;\n        var tagName = element.tagName.toLowerCase();\n        var loaders = this.options.loaders;\n        var prefix = options.prefix;\n        var tags = Object.keys(loaders);\n        if (loaders[tagName]) {\n            return new loaders[tagName](element, options);\n        }\n        var loader = new ElementLoader(element, options);\n        var children = toArray(element.querySelectorAll(tags.join(\", \")));\n        loader.setHasLoading(children.some(function(el) {\n            return hasLoadingAttribute(el, prefix);\n        }));\n        var withPreReady = false;\n        var childrenImReady = this.clone().on(\"error\", function(e) {\n            loader.onError(e.target);\n        }).on(\"ready\", function() {\n            loader.onReady(withPreReady);\n        });\n        loader.on(\"requestChildren\", function() {\n            // has not data size\n            var contentElements = getContentElements(element, tags, _this.options.prefix);\n            childrenImReady.check(contentElements).on(\"preReady\", function(e) {\n                withPreReady = e.isReady;\n                if (!withPreReady) {\n                    loader.onPreReady();\n                }\n            });\n        }).on(\"reqeustReadyChildren\", function() {\n            // has data size\n            // loader call preReady\n            // check only video, image elements\n            childrenImReady.check(children);\n        }).on(\"requestDestroy\", function() {\n            childrenImReady.destroy();\n        });\n        return loader;\n    };\n    __proto.clone = function() {\n        return new ImReadyManager(__assign({}, this.options));\n    };\n    __proto.checkPreReady = function(index) {\n        this.elementInfos[index].isPreReady = true;\n        ++this.preReadyCount;\n        if (this.preReadyCount < this.totalCount) {\n            return false;\n        }\n        return true;\n    };\n    __proto.checkReady = function(index) {\n        this.elementInfos[index].isReady = true;\n        ++this.readyCount;\n        if (this.readyCount < this.totalCount) {\n            return false;\n        }\n        return true;\n    };\n    __proto.onError = function(index, target) {\n        var info = this.elementInfos[index];\n        info.hasError = true;\n        /**\n     * An event occurs if the image, video fails to load.\n     * @ko 이미지, 비디오가 로딩에 실패하면 이벤트가 발생한다.\n     * @event eg.ImReady#error\n     * @param {eg.ImReady.OnError} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\"/>\n     *    <img src=\"ERR\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check([document.querySelector(\"div\")]).on({\n     *   error: e => {\n     *     // <div>...</div>, 0, <img src=\"ERR\"/>\n     *     console.log(e.element, e.index, e.target),\n     *   },\n     * });\n     * ```\n     */ this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__.ComponentEvent(\"error\", {\n            element: info.element,\n            index: index,\n            target: target,\n            errorCount: this.getErrorCount(),\n            totalErrorCount: ++this.totalErrorCount\n        }));\n    };\n    __proto.onPreReadyElement = function(index) {\n        var info = this.elementInfos[index];\n        /**\n     * An event occurs when the element is pre-ready (when the loading attribute is applied or the size is known)\n     * @ko 해당 엘리먼트가 사전 준비되었을 때(loading 속성이 적용되었거나 사이즈를 알 수 있을 때) 이벤트가 발생한다.\n     * @event eg.ImReady#preReadyElement\n     * @param {eg.ImReady.OnPreReadyElement} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReadyElement: e => {\n     *     // 1, 3\n     *     // 2, 3\n     *     // 3, 3\n     *     console.log(e.preReadyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */ this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__.ComponentEvent(\"preReadyElement\", {\n            element: info.element,\n            index: index,\n            preReadyCount: this.preReadyCount,\n            readyCount: this.readyCount,\n            totalCount: this.totalCount,\n            isPreReady: this.isPreReady(),\n            isReady: this.isReady(),\n            hasLoading: info.hasLoading,\n            isSkip: info.isSkip\n        }));\n    };\n    __proto.onPreReady = function() {\n        this.isPreReadyOver = true;\n        /**\n     * An event occurs when all element are pre-ready (When all elements have the loading attribute applied or the size is known)\n     * @ko 모든 엘리먼트들이 사전 준비된 경우 (모든 엘리먼트들이 loading 속성이 적용되었거나 사이즈를 알 수 있는 경우) 이벤트가 발생한다.\n     * @event eg.ImReady#preReady\n     * @param {eg.ImReady.OnPreReady} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReady: e => {\n     *     // 0, 3\n     *     console.log(e.readyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */ this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__.ComponentEvent(\"preReady\", {\n            readyCount: this.readyCount,\n            totalCount: this.totalCount,\n            isReady: this.isReady(),\n            hasLoading: this.hasLoading()\n        }));\n    };\n    __proto.onReadyElement = function(index) {\n        var info = this.elementInfos[index];\n        /**\n     * An event occurs when the element is ready\n     * @ko 해당 엘리먼트가 준비가 되었을 때 이벤트가 발생한다.\n     * @event eg.ImReady#readyElement\n     * @param {eg.ImReady.OnReadyElement} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   readyElement: e => {\n     *     // 1, 0, false, 3\n     *     // 2, 1, false, 3\n     *     // 3, 2, true, 3\n     *     console.log(e.readyCount, e.index, e.hasError, e.totalCount),\n     *   },\n     * });\n     * ```\n     */ this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__.ComponentEvent(\"readyElement\", {\n            index: index,\n            element: info.element,\n            hasError: info.hasError,\n            errorCount: this.getErrorCount(),\n            totalErrorCount: this.totalErrorCount,\n            preReadyCount: this.preReadyCount,\n            readyCount: this.readyCount,\n            totalCount: this.totalCount,\n            isPreReady: this.isPreReady(),\n            isReady: this.isReady(),\n            hasLoading: info.hasLoading,\n            isPreReadyOver: this.isPreReadyOver,\n            isSkip: info.isSkip\n        }));\n    };\n    __proto.onReady = function() {\n        /**\n     * An event occurs when all element are ready\n     * @ko 모든 엘리먼트들이 준비된 경우 이벤트가 발생한다.\n     * @event eg.ImReady#ready\n     * @param {eg.ImReady.OnReady} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReady: e => {\n     *     // 0, 3\n     *     console.log(e.readyCount, e.totalCount),\n     *   },\n     *   ready: e => {\n     *     // 1, 3\n     *     console.log(e.errorCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */ this.trigger(new _egjs_component__WEBPACK_IMPORTED_MODULE_0__.ComponentEvent(\"ready\", {\n            errorCount: this.getErrorCount(),\n            totalErrorCount: this.totalErrorCount,\n            totalCount: this.totalCount\n        }));\n    };\n    __proto.getErrorCount = function() {\n        return this.elementInfos.filter(function(info) {\n            return info.hasError;\n        }).length;\n    };\n    __proto.hasLoading = function() {\n        return this.elementInfos.some(function(info) {\n            return info.hasLoading;\n        });\n    };\n    return ImReadyManager;\n}(_egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\nvar ImageLoader = /*#__PURE__*/ function(_super) {\n    __extends(ImageLoader, _super);\n    function ImageLoader() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    var __proto = ImageLoader.prototype;\n    __proto.checkElement = function() {\n        var element = this.element;\n        var src = element.getAttribute(\"src\");\n        if (element.complete) {\n            if (src) {\n                // complete\n                if (!element.naturalWidth) {\n                    this.onAlreadyError(element);\n                }\n                return false;\n            } else {\n                // Using an external lazy loading module\n                this.onAlreadyPreReady();\n            }\n        }\n        this.addEvents();\n        IS_IE && element.setAttribute(\"src\", src);\n        return true;\n    };\n    ImageLoader.EVENTS = [\n        \"load\",\n        \"error\"\n    ];\n    return ImageLoader;\n}(Loader);\nvar VideoLoader = /*#__PURE__*/ function(_super) {\n    __extends(VideoLoader, _super);\n    function VideoLoader() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    var __proto = VideoLoader.prototype;\n    __proto.checkElement = function() {\n        var element = this.element;\n        // HAVE_NOTHING: 0, no information whether or not the audio/video is ready\n        // HAVE_METADATA: 1, HAVE_METADATA - metadata for the audio/video is ready\n        // HAVE_CURRENT_DATA: 2, data for the current playback position is available, but not enough data to play next frame/millisecond\n        // HAVE_FUTURE_DATA: 3, data for the current and at least the next frame is available\n        // HAVE_ENOUGH_DATA: 4, enough data available to start playing\n        if (element.readyState >= 1) {\n            return false;\n        }\n        if (element.error) {\n            this.onAlreadyError(element);\n            return false;\n        }\n        this.addEvents();\n        return true;\n    };\n    VideoLoader.EVENTS = [\n        \"loadedmetadata\",\n        \"error\"\n    ];\n    return VideoLoader;\n}(Loader);\nvar ImReady = /*#__PURE__*/ function(_super) {\n    __extends(ImReady, _super);\n    function ImReady(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return _super.call(this, __assign({\n            loaders: {\n                img: ImageLoader,\n                video: VideoLoader\n            }\n        }, options)) || this;\n    }\n    return ImReady;\n}(ImReadyManager);\nvar REACTIVE_IMREADY = function(_a) {\n    var setEvents = _a.setEvents, setMethods = _a.setMethods, on = _a.on, onInit = _a.onInit, onDestroy = _a.onDestroy, getProps = _a.getProps;\n    setEvents(EVENTS);\n    setMethods([\n        \"add\"\n    ]);\n    var children = [];\n    var reactiveImReady = (0,_cfcs_core__WEBPACK_IMPORTED_MODULE_1__.reactive)({\n        preReadyCount: 0,\n        readyCount: 0,\n        errorCount: 0,\n        totalErrorCount: 0,\n        totalCount: 0,\n        isPreReady: false,\n        isReady: false,\n        hasError: false,\n        isPreReadyOver: false,\n        add: function(element) {\n            children.push(element);\n        }\n    });\n    var props = getProps() || {};\n    var imReady = new ImReady(props);\n    imReady.on(\"error\", function(e) {\n        reactiveImReady.hasError = true;\n        reactiveImReady.errorCount = e.errorCount;\n        reactiveImReady.totalErrorCount = e.totalErrorCount;\n    }).on(\"preReadyElement\", function(e) {\n        reactiveImReady.preReadyCount = e.preReadyCount;\n    }).on(\"readyElement\", function(e) {\n        reactiveImReady.readyCount = e.readyCount;\n        reactiveImReady.isPreReadyOver = e.isPreReadyOver;\n    }).on(\"preReady\", function() {\n        reactiveImReady.isPreReady = true;\n    }).on(\"ready\", function() {\n        reactiveImReady.isReady = true;\n    });\n    on(function(_, name, callback) {\n        imReady.on(name, callback);\n        return function() {\n            imReady.off(name, callback);\n        };\n    });\n    onInit(function() {\n        var selector = props === null || props === void 0 ? void 0 : props.selector;\n        var checkedElements = [];\n        children.forEach(function(child) {\n            if (!child) {\n                return;\n            }\n            if ((0,_cfcs_core__WEBPACK_IMPORTED_MODULE_1__.isString)(child)) {\n                checkedElements = __spreadArrays(checkedElements, toArray(document.querySelectorAll(child)));\n            } else if (child instanceof Element) {\n                checkedElements.push(child);\n            } else if (\"value\" in child || \"current\" in child) {\n                var element = child.value || child.current;\n                if (element) {\n                    checkedElements.push(element);\n                }\n            }\n        });\n        if (selector) {\n            checkedElements = checkedElements.reduce(function(prev, cur) {\n                return __spreadArrays(prev, [].slice.call(cur.querySelectorAll(selector)));\n            }, []);\n        }\n        reactiveImReady.totalCount = checkedElements.length;\n        imReady.check(checkedElements);\n    });\n    onDestroy(function() {\n        imReady.destroy();\n    });\n    return reactiveImReady;\n};\n_c = REACTIVE_IMREADY;\n/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/ /* harmony default export */ __webpack_exports__[\"default\"] = (ImReady);\n //# sourceMappingURL=imready.esm.js.map\nvar _c;\n$RefreshReg$(_c, \"REACTIVE_IMREADY\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@egjs/imready/dist/imready.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@egjs/react-view360/dist/view360.esm.js":
/*!**************************************************************!*\
  !*** ./node_modules/@egjs/react-view360/dist/view360.esm.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoResizer: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.AutoResizer; },\n/* harmony export */   Autoplay: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.Autoplay; },\n/* harmony export */   Camera: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.Camera; },\n/* harmony export */   CameraAnimation: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.CameraAnimation; },\n/* harmony export */   ControlBar: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.ControlBar; },\n/* harmony export */   ControlBarItem: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.ControlBarItem; },\n/* harmony export */   CubemapProjection: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.CubemapProjection; },\n/* harmony export */   CubestripProjection: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.CubestripProjection; },\n/* harmony export */   CylindricalProjection: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.CylindricalProjection; },\n/* harmony export */   DEFAULT_CLASS: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CLASS; },\n/* harmony export */   EASING: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.EASING; },\n/* harmony export */   ERROR_CODES: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODES; },\n/* harmony export */   EVENTS: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.EVENTS; },\n/* harmony export */   EquiangularProjection: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.EquiangularProjection; },\n/* harmony export */   EquirectProjection: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.EquirectProjection; },\n/* harmony export */   FullscreenButton: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.FullscreenButton; },\n/* harmony export */   GyroControl: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.GyroControl; },\n/* harmony export */   Hotspot: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.Hotspot; },\n/* harmony export */   HotspotRenderer: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.HotspotRenderer; },\n/* harmony export */   LittlePlanetProjection: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.LittlePlanetProjection; },\n/* harmony export */   LoadingSpinner: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.LoadingSpinner; },\n/* harmony export */   Motion: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.Motion; },\n/* harmony export */   Object3D: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.Object3D; },\n/* harmony export */   PanoControl: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.PanoControl; },\n/* harmony export */   PieView: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.PieView; },\n/* harmony export */   PlayButton: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.PlayButton; },\n/* harmony export */   ProgressBar: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.ProgressBar; },\n/* harmony export */   Projection: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.Projection; },\n/* harmony export */   RotateControl: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.RotateControl; },\n/* harmony export */   StereoEquiProjection: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.StereoEquiProjection; },\n/* harmony export */   VIEW360_METHODS: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.VIEW360_METHODS; },\n/* harmony export */   VideoTime: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.VideoTime; },\n/* harmony export */   View360Error: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.View360Error; },\n/* harmony export */   VolumeControl: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.VolumeControl; },\n/* harmony export */   WebGLRenderer: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.WebGLRenderer; },\n/* harmony export */   XRManager: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.XRManager; },\n/* harmony export */   ZoomControl: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.ZoomControl; },\n/* harmony export */   \"default\": function() { return /* binding */ View360; },\n/* harmony export */   getValidProps: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.getValidProps; },\n/* harmony export */   withMethods: function() { return /* reexport safe */ _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.withMethods; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _egjs_view360__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @egjs/view360 */ \"(app-pages-browser)/./node_modules/@egjs/view360/dist/view360.esm.js\");\n/*\nCopyright (c) 2023-present NAVER Corp.\nname: @egjs/view360\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-view360\nversion: 4.0.0-beta.7\n*/ \n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nvar view360SetterNames = Object.getOwnPropertyNames(_egjs_view360__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype).filter(function(name) {\n    var descriptor = Object.getOwnPropertyDescriptor(_egjs_view360__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype, name);\n    if (name.startsWith(\"_\")) return false;\n    if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.value) return false;\n    return !!descriptor.set;\n});\nvar View360 = /*#__PURE__*/ function(_super) {\n    __extends(View360, _super);\n    function View360(props) {\n        var _this = _super.call(this, props) || this;\n        (0,_egjs_view360__WEBPACK_IMPORTED_MODULE_1__.withMethods)(_this, \"_vanillaView360\");\n        return _this;\n    }\n    var __proto = View360.prototype;\n    Object.defineProperty(__proto, \"view360\", {\n        get: function() {\n            return this._vanillaView360;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(__proto, \"element\", {\n        get: function() {\n            return this._containerEl;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    __proto.componentDidMount = function() {\n        this._vanillaView360 = new _egjs_view360__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this._containerEl, this.props);\n        this._bindEvents();\n    };\n    __proto.componentWillUnmount = function() {\n        this._vanillaView360.destroy();\n    };\n    __proto.componentDidUpdate = function(prevProps) {\n        var _this = this;\n        var view360 = this._vanillaView360;\n        view360SetterNames.forEach(function(name) {\n            var oldProp = prevProps[name];\n            var newProp = _this.props[name];\n            if (newProp !== oldProp) {\n                view360[name] = newProp;\n            }\n        });\n    };\n    __proto.render = function() {\n        var _this = this;\n        var _a = this.props, tag = _a.tag, _b = _a.className, className = _b === void 0 ? \"\" : _b, _c = _a.canvasClass, canvasClass = _c === void 0 ? \"\" : _c, restProps = __rest(_a, [\n            \"tag\",\n            \"className\",\n            \"canvasClass\"\n        ]);\n        var Container = tag;\n        var containerClassName = \"\".concat(_egjs_view360__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CLASS.CONTAINER, \" \").concat(className).trim();\n        var canvasClassName = \"\".concat(_egjs_view360__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CLASS.CANVAS, \" \").concat(canvasClass).trim();\n        var attributes = {};\n        for(var name_1 in restProps){\n            if (!name_1.startsWith(\"on\") && !(name_1 in _egjs_view360__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype)) {\n                attributes[name_1] = restProps[name_1];\n            }\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Container, __assign({}, attributes, {\n            className: containerClassName,\n            ref: function(e) {\n                e && (_this._containerEl = e);\n            }\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"canvas\", {\n            className: canvasClassName\n        }), this.props.children);\n    };\n    __proto._bindEvents = function() {\n        var _this = this;\n        var view360 = this._vanillaView360;\n        Object.keys(_egjs_view360__WEBPACK_IMPORTED_MODULE_1__.EVENTS).forEach(function(eventKey) {\n            var eventName = _egjs_view360__WEBPACK_IMPORTED_MODULE_1__.EVENTS[eventKey];\n            var propName = \"on\".concat(eventName.charAt(0).toUpperCase() + eventName.slice(1));\n            view360.on(eventName, function(e) {\n                e.target = _this;\n                var evtHandler = _this.props[propName];\n                if (evtHandler) {\n                    evtHandler(e);\n                }\n            });\n        });\n    };\n    View360.defaultProps = {\n        tag: \"div\"\n    };\n    return View360;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent);\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */  //# sourceMappingURL=view360.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@egjs/react-view360/dist/view360.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@egjs/view360/dist/view360.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@egjs/view360/dist/view360.esm.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoResizer: function() { return /* binding */ AutoResizer; },\n/* harmony export */   Autoplay: function() { return /* binding */ Autoplay; },\n/* harmony export */   Camera: function() { return /* binding */ Camera; },\n/* harmony export */   CameraAnimation: function() { return /* binding */ CameraAnimation; },\n/* harmony export */   ControlBar: function() { return /* binding */ ControlBar; },\n/* harmony export */   ControlBarItem: function() { return /* binding */ ControlBarItem; },\n/* harmony export */   CubemapProjection: function() { return /* binding */ CubemapProjection; },\n/* harmony export */   CubestripProjection: function() { return /* binding */ CubestripProjection; },\n/* harmony export */   CylindricalProjection: function() { return /* binding */ CylindricalProjection; },\n/* harmony export */   DEFAULT_CLASS: function() { return /* binding */ DEFAULT_CLASS; },\n/* harmony export */   EASING: function() { return /* binding */ EASING; },\n/* harmony export */   ERROR_CODES: function() { return /* binding */ ERROR_CODES; },\n/* harmony export */   EVENTS: function() { return /* binding */ EVENTS; },\n/* harmony export */   EquiangularProjection: function() { return /* binding */ EquiangularProjection; },\n/* harmony export */   EquirectProjection: function() { return /* binding */ EquirectProjection; },\n/* harmony export */   FullscreenButton: function() { return /* binding */ FullscreenButton; },\n/* harmony export */   GyroControl: function() { return /* binding */ GyroControl; },\n/* harmony export */   Hotspot: function() { return /* binding */ Hotspot; },\n/* harmony export */   HotspotRenderer: function() { return /* binding */ HotspotRenderer; },\n/* harmony export */   LittlePlanetProjection: function() { return /* binding */ LittlePlanetProjection; },\n/* harmony export */   LoadingSpinner: function() { return /* binding */ LoadingSpinner; },\n/* harmony export */   Motion: function() { return /* binding */ Motion; },\n/* harmony export */   Object3D: function() { return /* binding */ Object3D; },\n/* harmony export */   PanoControl: function() { return /* binding */ PanoControl; },\n/* harmony export */   PieView: function() { return /* binding */ PieView; },\n/* harmony export */   PlayButton: function() { return /* binding */ PlayButton; },\n/* harmony export */   ProgressBar: function() { return /* binding */ ProgressBar; },\n/* harmony export */   Projection: function() { return /* binding */ Projection; },\n/* harmony export */   RotateControl: function() { return /* binding */ RotateControl; },\n/* harmony export */   StereoEquiProjection: function() { return /* binding */ StereoEquiProjection; },\n/* harmony export */   VIEW360_METHODS: function() { return /* binding */ VIEW360_METHODS; },\n/* harmony export */   VideoTime: function() { return /* binding */ VideoTime; },\n/* harmony export */   View360Error: function() { return /* binding */ View360Error; },\n/* harmony export */   VolumeControl: function() { return /* binding */ VolumeControl; },\n/* harmony export */   WebGLRenderer: function() { return /* binding */ WebGLRenderer; },\n/* harmony export */   XRManager: function() { return /* binding */ XRManager; },\n/* harmony export */   ZoomControl: function() { return /* binding */ ZoomControl; },\n/* harmony export */   \"default\": function() { return /* binding */ View360; },\n/* harmony export */   getValidProps: function() { return /* binding */ getValidProps; },\n/* harmony export */   withMethods: function() { return /* binding */ withMethods; }\n/* harmony export */ });\n/* harmony import */ var _egjs_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @egjs/component */ \"(app-pages-browser)/./node_modules/@egjs/component/dist/component.esm.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/quat.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gl-matrix */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/mat4.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gl-matrix */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/vec2.js\");\n/* harmony import */ var _egjs_imready__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @egjs/imready */ \"(app-pages-browser)/./node_modules/@egjs/imready/dist/imready.esm.js\");\n/*\nCopyright (c) 2023-present NAVER Corp.\nname: @egjs/view360\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-view360\nversion: 4.0.0-beta.7\n*/ \n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Error thrown by {@link View360}\r\n * @ko {@link View360}이 발생시킨 에러\r\n * @since 4.0.0\r\n */ class View360Error extends Error {\n    /**\r\n   * Create new instance of View360Error\r\n   * @ko View360Error의 인스턴스를 생성합니다.\r\n   * @param message - Error message {@ko 에러 메시지}\r\n   * @param code - Error code {@ko 에러 코드}\r\n   */ constructor(message, code){\n        super(message);\n        Object.setPrototypeOf(this, View360Error.prototype);\n        this.name = \"View360Error\";\n        this.code = code;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Error codes of {@link View360Error}\r\n * @ko {@link View360Error}가 가질 수 있는 에러 코드 값들\r\n * @since 4.0.0\r\n */ const ERROR_CODES = {\n    /**\r\n   * The given value's type is not expected\r\n   * @ko 주어진 값의 타입이 잘못되었을 경우\r\n   * @since 4.0.0\r\n   */ WRONG_TYPE: 0,\n    /**\r\n   * The given value is not a supported option\r\n   * @ko 잘못된 옵션을 받았을 경우\r\n   * @since 4.0.0\r\n   */ WRONG_OPTION: 1,\n    /**\r\n   * The element with given CSS selector does not exist\r\n   * @ko 주어진 CSS 셀렉터로 엘리먼트를 찾지 못했을 경우\r\n   * @since 4.0.0\r\n   */ ELEMENT_NOT_FOUND: 2,\n    /**\r\n   * Couldn't find canvas element inside the given container element.\r\n   * @ko 컨테이너 엘리먼트 내부에서 캔버스 엘리먼트를 찾지 못했을 경우\r\n   * @since 4.0.0\r\n   */ CANVAS_NOT_FOUND: 3,\n    /**\r\n   * The browser does not support WebGL\r\n   * @ko 브라우저가 WebGL을 지원하지 않는 경우\r\n   * @since 4.0.0\r\n   */ WEBGL_NOT_SUPPORTED: 4,\n    /**\r\n   * Failed creating canvas 2D context\r\n   * @ko 캔버스 2D 컨텍스트를 생성하지 못한 경우\r\n   * @since 4.0.0\r\n   */ FAILED_CREATE_CONTEXT_2D: 5,\n    /**\r\n   * `init()` is called before setting {@link View360Options#projection}\r\n   * @ko {@link View360Options#projection}을 설정하기 전에 `init()`이 호출된 경우\r\n   * @since 4.0.0\r\n   */ PROVIDE_PROJECTION_FIRST: 6,\n    /**\r\n   * Failed linking WebGL program. Only can be thrown when {@link View360Options#debug} is `true`.\r\n   * @ko WebGL 프로그램 링크에 실패한 경우. {@link View360Options#debug}를 `true`로 설정한 경우에만 발생할 수 있습니다.\r\n   * @since 4.0.0\r\n   */ FAILED_LINKING_PROGRAM: 7,\n    /**\r\n   * Arguments are not sufficient for the given property.\r\n   * @ko 프로퍼티에 값이 충분히 주어지지 않았을 때\r\n   * @since 4.0.0\r\n   */ INSUFFICIENT_ARGS: 8\n};\nconst MESSAGES = {\n    WRONG_TYPE: (val, types)=>\"\".concat(typeof val, \" is not a \").concat(types.map((type)=>'\"'.concat(type, '\"')).join(\" or \"), \".\"),\n    WRONG_OPTION: (val, optionName)=>'Bad option: given \"'.concat(val, '\" for option \"').concat(optionName, '\".'),\n    ELEMENT_NOT_FOUND: (query)=>'Element with selector \"'.concat(query, '\" not found.'),\n    CANVAS_NOT_FOUND: \"The canvas element was not found inside the given root element.\",\n    WEBGL_NOT_SUPPORTED: \"WebGL is not supported on this browser.\",\n    FAILED_CREATE_CONTEXT_2D: \"Failed to create canvas 2D context\",\n    PROVIDE_PROJECTION_FIRST: '\"projection\" should be provided before initialization.',\n    FAILED_LINKING_PROGRAM: (msg, shaderLog)=>'Failed linking WebGL program - \"'.concat(msg, \"\\nShader compile Log: \").concat(shaderLog),\n    INSUFFICIENT_ARGS: (val, name)=>'Insufficient arguments: given \"'.concat(val, '\" for \"').concat(name, '\".')\n};\nvar ERROR = {\n    CODES: ERROR_CODES,\n    MESSAGES\n};\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ const EVENTS$1 = {\n    MOUSE_DOWN: \"mousedown\",\n    MOUSE_MOVE: \"mousemove\",\n    MOUSE_UP: \"mouseup\",\n    TOUCH_START: \"touchstart\",\n    TOUCH_MOVE: \"touchmove\",\n    TOUCH_END: \"touchend\",\n    WHEEL: \"wheel\",\n    RESIZE: \"resize\",\n    CONTEXT_MENU: \"contextmenu\",\n    MOUSE_ENTER: \"mouseenter\",\n    MOUSE_LEAVE: \"mouseleave\",\n    POINTER_DOWN: \"pointerdown\",\n    POINTER_MOVE: \"pointermove\",\n    POINTER_UP: \"pointerup\",\n    POINTER_CANCEL: \"pointercancel\",\n    POINTER_ENTER: \"pointerenter\",\n    POINTER_LEAVE: \"pointerleave\",\n    KEY_DOWN: \"keydown\",\n    KEY_UP: \"keyup\",\n    LOAD: \"load\",\n    ERROR: \"error\",\n    CLICK: \"click\",\n    DOUBLE_CLICK: \"dblclick\",\n    CONTEXT_CREATE_ERROR: \"webglcontextcreationerror\",\n    CONTEXT_LOST: \"webglcontextlost\",\n    CONTEXT_RESTORED: \"webglcontextrestored\",\n    DEVICE_ORIENTATION: \"deviceorientation\",\n    DEVICE_MOTION: \"devicemotion\",\n    ORIENTATION_CHANGE: \"orientationchange\",\n    VIDEO_PLAY: \"play\",\n    VIDEO_PAUSE: \"pause\",\n    VIDEO_LOADED_DATA: \"loadeddata\",\n    VIDEO_VOLUME_CHANGE: \"volumechange\",\n    VIDEO_TIME_UPDATE: \"timeupdate\",\n    VIDEO_DURATION_CHANGE: \"durationchange\",\n    VIDEO_CAN_PLAYTHROUGH: \"canplaythrough\",\n    TRANSITION_END: \"transitionend\",\n    XR_END: \"end\"\n};\nconst EL_DIV = \"div\";\nconst EL_BUTTON = \"button\";\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\nvar MOUSE_BUTTON;\n(function(MOUSE_BUTTON) {\n    MOUSE_BUTTON[MOUSE_BUTTON[\"LEFT\"] = 0] = \"LEFT\";\n    MOUSE_BUTTON[MOUSE_BUTTON[\"MIDDLE\"] = 1] = \"MIDDLE\";\n    MOUSE_BUTTON[MOUSE_BUTTON[\"RIGHT\"] = 2] = \"RIGHT\";\n})(MOUSE_BUTTON || (MOUSE_BUTTON = {}));\nconst CURSOR = {\n    GRAB: \"grab\",\n    GRABBING: \"grabbing\",\n    NONE: \"\"\n};\nconst KEY_DIRECTION = [\n    \"LEFT\",\n    \"UP\",\n    \"RIGHT\",\n    \"DOWN\"\n];\nvar DIRECTION_KEY_CODE;\n(function(DIRECTION_KEY_CODE) {\n    DIRECTION_KEY_CODE[DIRECTION_KEY_CODE[\"LEFT\"] = 37] = \"LEFT\";\n    DIRECTION_KEY_CODE[DIRECTION_KEY_CODE[\"UP\"] = 38] = \"UP\";\n    DIRECTION_KEY_CODE[DIRECTION_KEY_CODE[\"RIGHT\"] = 39] = \"RIGHT\";\n    DIRECTION_KEY_CODE[DIRECTION_KEY_CODE[\"DOWN\"] = 40] = \"DOWN\";\n})(DIRECTION_KEY_CODE || (DIRECTION_KEY_CODE = {}));\nconst SPACE_KEY_CODE = 32;\nconst DIRECTION_KEY_NAME = {\n    LEFT: \"ArrowLeft\",\n    UP: \"ArrowUp\",\n    RIGHT: \"ArrowRight\",\n    DOWN: \"ArrowDown\"\n};\nconst SPACE_KEY_NAME = \" \";\nconst FULLSCREEN_REQUEST = [\n    \"requestFullscreen\",\n    \"webkitRequestFullscreen\",\n    \"webkitRequestFullScreen\",\n    \"webkitCancelFullScreen\",\n    \"mozRequestFullScreen\",\n    \"msRequestFullscreen\"\n];\nconst FULLSCREEN_ELEMENT = [\n    \"fullscreenElement\",\n    \"webkitFullscreenElement\",\n    \"webkitCurrentFullScreenElement\",\n    \"mozFullScreenElement\",\n    \"msFullscreenElement\"\n];\nconst FULLSCREEN_EXIT = [\n    \"exitFullscreen\",\n    \"webkitExitFullscreen\",\n    \"webkitCancelFullScreen\",\n    \"mozCancelFullScreen\",\n    \"msExitFullscreen\"\n];\nconst FULLSCREEN_CHANGE = [\n    \"fullscreenchange\",\n    \"webkitfullscreenchange\",\n    \"mozfullscreenchange\",\n    \"MSFullscreenChange\"\n];\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Default class names\r\n * @ko 기본 클래스 이름들\r\n * @since 4.0.0\r\n */ const DEFAULT_CLASS = {\n    CONTAINER: \"view360-container\",\n    CANVAS: \"view360-canvas\",\n    CTX_LOST: \"view360-ctx-lost\",\n    IN_VR: \"view360-vr-presenting\",\n    HOTSPOT_CONTAINER: \"view360-hotspots\",\n    HOTSPOT: \"view360-hotspot\",\n    HOTSPOT_VISIBLE: \"view360-hotspot-visible\",\n    HOTSPOT_FLIP_X: \"view360-hotspot-flip-x\",\n    HOTSPOT_FLIP_Y: \"view360-hotspot-flip-y\"\n};\n/**\r\n * Event names\r\n * @ko 이벤트 이름들\r\n * @since 4.0.0\r\n * @example\r\n * ```ts\r\n * import View360, { EVENTS } from \"@egjs/view360\";\r\n *\r\n * const viewer = new View360(\"#el_id\");\r\n *\r\n * viewer.on(EVENTS.READY, evt => {\r\n *   console.log(\"View360 is ready!\");\r\n * });\r\n * ```\r\n */ const EVENTS = {\n    READY: \"ready\",\n    LOAD_START: \"loadStart\",\n    LOAD: \"load\",\n    PROJECTION_CHANGE: \"projectionChange\",\n    RESIZE: \"resize\",\n    BEFORE_RENDER: \"beforeRender\",\n    RENDER: \"render\",\n    INPUT_START: \"inputStart\",\n    INPUT_END: \"inputEnd\",\n    VIEW_CHANGE: \"viewChange\",\n    STATIC_CLICK: \"staticClick\",\n    VR_START: \"vrStart\",\n    VR_END: \"vrEnd\"\n};\n/**\r\n * Collection of predefined easing functions\r\n * @ko 미리 정의된 easing 함수들\r\n */ const EASING = {\n    LINEAR: (x)=>x,\n    SINE_WAVE: (x)=>Math.sin(x * Math.PI * 2),\n    EASE_OUT_CUBIC: (x)=>1 - Math.pow(1 - x, 3),\n    EASE_OUT_BOUNCE: (x)=>{\n        const n1 = 7.5625;\n        const d1 = 2.75;\n        if (x < 1 / d1) {\n            return n1 * x * x;\n        } else if (x < 2 / d1) {\n            return n1 * (x -= 1.5 / d1) * x + 0.75;\n        } else if (x < 2.5 / d1) {\n            return n1 * (x -= 2.25 / d1) * x + 0.9375;\n        } else {\n            return n1 * (x -= 2.625 / d1) * x + 0.984375;\n        }\n    }\n};\nvar _a;\nconst CAMERA_EVENTS = {\n    CHANGE: \"change\",\n    ANIMATION_END: \"animationEnd\"\n};\nconst OBJECT_3D_EVENTS = {\n    UPDATE: \"update\"\n};\nconst CONTROL_EVENTS = {\n    INPUT_START: \"inputStart\",\n    CHANGE: \"change\",\n    INPUT_END: \"inputEnd\",\n    ENABLE: \"enable\",\n    DISABLE: \"disable\",\n    STATIC_CLICK: \"staticClick\"\n};\nconst DEG_TO_RAD = Math.PI / 180;\nconst RAD_TO_DEG = 180 / Math.PI;\nconst DEFAULT_EASING = EASING.EASE_OUT_CUBIC;\nconst DEFAULT_ANIMATION_DURATION = 300;\nconst INFINITE_RANGE = {\n    min: -Infinity,\n    max: Infinity\n};\nconst DEFAULT_PITCH_RANGE = {\n    min: -90,\n    max: 90\n};\nconst DEFAULT_ZOOM_RANGE = {\n    min: 0.6,\n    max: 10\n};\nvar ROTATE;\n(function(ROTATE) {\n    ROTATE[ROTATE[\"ZERO\"] = 0] = \"ZERO\";\n    ROTATE[ROTATE[\"CW_90\"] = 1] = \"CW_90\";\n    ROTATE[ROTATE[\"CCW_90\"] = 2] = \"CCW_90\";\n    ROTATE[ROTATE[\"CW_180\"] = 3] = \"CW_180\";\n})(ROTATE || (ROTATE = {}));\n// Custom event name for video time change\nconst VIDEO_TIME_CHANGE_EVENT = \"view360videotimechange\";\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nconst SESSION_VR = \"immersive-vr\";\nconst XR_REFERENCE_SPACE = \"local\";\nconst EPSILON = (_a = Number.EPSILON) !== null && _a !== void 0 ? _a : 2.220446049250313e-16;\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ const isString = (val)=>typeof val === \"string\";\nconst isElement = (val)=>!!val && val.nodeType === Node.ELEMENT_NODE;\nconst createElement = function(className) {\n    let tag = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : EL_DIV;\n    const el = document.createElement(tag);\n    el.classList.add(className);\n    return el;\n};\nconst getNullableElement = (el, parent)=>{\n    let targetEl = null;\n    if (isString(el)) {\n        const parentEl = parent ? parent : document;\n        const queryResult = parentEl.querySelector(el);\n        if (!queryResult) {\n            return null;\n        }\n        targetEl = queryResult;\n    } else if (isElement(el)) {\n        targetEl = el;\n    }\n    return targetEl;\n};\nconst getElement = (el, parent)=>{\n    const targetEl = getNullableElement(el, parent);\n    if (!targetEl) {\n        if (isString(el)) {\n            throw new View360Error(ERROR.MESSAGES.ELEMENT_NOT_FOUND(el), ERROR.CODES.ELEMENT_NOT_FOUND);\n        } else {\n            throw new View360Error(ERROR.MESSAGES.WRONG_TYPE(el, [\n                \"HTMLElement\",\n                \"string\"\n            ]), ERROR.CODES.WRONG_TYPE);\n        }\n    }\n    return targetEl;\n};\nconst findCanvas = (root, selector)=>{\n    const canvas = root.querySelector(selector);\n    if (!canvas) {\n        throw new View360Error(ERROR.MESSAGES.CANVAS_NOT_FOUND, ERROR.CODES.CANVAS_NOT_FOUND);\n    }\n    return canvas;\n};\nconst range = (end)=>{\n    if (!end || end <= 0) {\n        return [];\n    }\n    return Array.apply(0, Array(end)).map((undef, idx)=>idx);\n};\nconst clamp = (x, min, max)=>Math.max(Math.min(x, max), min);\n// Linear interpolation between a and b\nconst lerp = (a, b, t)=>{\n    return a * (1 - t) + b * t;\n};\nconst circulate = (val, min, max)=>{\n    const size = Math.abs(max - min);\n    if (val < min) {\n        const offset = (min - val) % size;\n        val = max - offset;\n    } else if (val > max) {\n        const offset = (val - max) % size;\n        val = min + offset;\n    }\n    return val;\n};\nconst findIndex = (array, checker)=>{\n    for(let idx = 0; idx < array.length; idx++){\n        if (checker(array[idx])) {\n            return idx;\n        }\n    }\n    return -1;\n};\nconst getObjectOption = (val)=>typeof val === \"object\" ? val : {};\nconst toVerticalFov = (fovRadian, aspect)=>{\n    return Math.atan(Math.tan(fovRadian * 0.5) / aspect) * 2;\n};\nconst reorderCube = function(arr, order) {\n    let defaultOrder = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"RLUDFB\";\n    return defaultOrder.split(\"\").map((face)=>order.indexOf(face)).map((index)=>arr[index]);\n};\nconst isFullscreen = ()=>{\n    if (!document) return false;\n    for (const key of FULLSCREEN_ELEMENT){\n        if (document[key]) return true;\n    }\n    return false;\n};\nconst sensorCanBeEnabledIOS = ()=>{\n    return window.isSecureContext && !!DeviceMotionEvent && \"requestPermission\" in DeviceMotionEvent;\n};\nconst hfovToZoom = (baseFov, fov)=>{\n    const renderingWidth = Math.tan(DEG_TO_RAD * baseFov * 0.5);\n    const zoomedWidth = Math.tan(DEG_TO_RAD * fov * 0.5);\n    return renderingWidth / zoomedWidth;\n};\nconst eulerToQuat = (out, yaw, pitch, roll)=>{\n    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.identity(out);\n    const pitchThreshold = 0.01;\n    const pitchClamped = clamp(pitch, -90 + pitchThreshold, 90 - pitchThreshold);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.rotateY(out, out, yaw * DEG_TO_RAD);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.rotateX(out, out, pitchClamped * DEG_TO_RAD);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.rotateZ(out, out, roll * DEG_TO_RAD);\n    return out;\n};\n/**\r\n * Extract euler angles from the quaternion, except roll(z-axis rotation)\r\n * @hidden\r\n */ const quatToEuler = (quaternion)=>{\n    const x = quaternion[0];\n    const y = quaternion[1];\n    const z = quaternion[2];\n    const w = quaternion[3];\n    const x2 = x * x;\n    const y2 = y * y;\n    const z2 = z * z;\n    const w2 = w * w;\n    const unit = x2 + y2 + z2 + w2;\n    const test = x * w - y * z;\n    let pitch, yaw;\n    if (test > 0.499995 * unit) {\n        // singularity at the north pole\n        pitch = Math.PI / 2;\n        yaw = 2 * Math.atan2(y, x);\n    } else if (test < -0.499995 * unit) {\n        // singularity at the south pole\n        pitch = -Math.PI / 2;\n        yaw = -2 * Math.atan2(y, x);\n    } else {\n        const view = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, 1);\n        const up = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 1, 0);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(view, view, quaternion);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(up, up, quaternion);\n        const viewXZ = Math.sqrt(view[0] * view[0] + view[2] * view[2]);\n        pitch = Math.atan2(-view[1], viewXZ);\n        yaw = Math.atan2(view[0], view[2]);\n    }\n    return {\n        pitch: clamp(pitch * RAD_TO_DEG, -90, 90),\n        yaw: circulate(yaw * RAD_TO_DEG, 0, 360)\n    };\n};\n/*\r\n * Copyright (c) 2020 NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Interpolator between two values with duration\r\n * @ko 특정 시간동안 두 값을 보간해주는 보간기\r\n * @since 4.0.0\r\n */ class Motion {\n    /**\r\n   * Current interpolated value\r\n   * @ko 현재 보간된 값\r\n   * @since 4.0.0\r\n   */ get val() {\n        return this._val;\n    }\n    /**\r\n   * Start(from) value of interpolation\r\n   * @ko 보간 시작 값\r\n   * @since 4.0.0\r\n   */ get start() {\n        return this._start;\n    }\n    /**\r\n   * End(to) value of interpolation\r\n   * @ko 보간 끝 값\r\n   * @since 4.0.0\r\n   */ get end() {\n        return this._end;\n    }\n    /**\r\n   * Interpolation progress value (0 ~ 1)\r\n   * @ko 현재 보간 진행정도 (0 ~ 1)\r\n   * @since 4.0.0\r\n   */ get progress() {\n        return this._progress;\n    }\n    /**\r\n   * Whether the interpolation is in active state.\r\n   * @ko 보간 진행중인지 여부. `true`일 경우 보간이 진행중입니다.\r\n   * @since 4.0.0\r\n   */ get activated() {\n        return this._activated;\n    }\n    /**\r\n   * Duration of the interpolation\r\n   * @ko 보간할 시간\r\n   * @since 4.0.0\r\n   */ get duration() {\n        return this._duration;\n    }\n    set duration(val) {\n        this._duration = val;\n    }\n    /**\r\n   * Whether to loop interpolation on finish\r\n   * @ko 보간이 끝난 이후에 다시 시작할지 여부\r\n   * @since 4.0.0\r\n   */ get loop() {\n        return this._loop;\n    }\n    set loop(val) {\n        this._loop = val;\n    }\n    /**\r\n   * Range of the interpolation\r\n   * @ko 보간 범위\r\n   * @since 4.0.0\r\n   */ get range() {\n        return this._range;\n    }\n    /**\r\n   * Easing function of the interpolation\r\n   * @ko 보간에 사용되는 easing function\r\n   * @since 4.0.0\r\n   */ get easing() {\n        return this._easing;\n    }\n    set easing(val) {\n        this._easing = val;\n    }\n    /**\r\n   * Update motion and progress it by given deltaTime\r\n   * @ko 주어진 deltaTime만큼 보간을 진행합니다.\r\n   * @param deltaTime - number of milisec to update motion {@ko 보간을 진행할 시간, 밀리초 단위}\r\n   * @returns Difference(delta) of the value from the last update. {@ko 지난 업데이트 이후의 값 변화량}\r\n   * @since 4.0.0\r\n   */ update(deltaTime) {\n        if (!this._activated) {\n            this._val = this._end;\n            return 0;\n        }\n        const start = this._start;\n        const end = this._end;\n        const duration = this._duration;\n        const prev = this._val;\n        const loop = this._loop;\n        const nextProgress = this._progress + deltaTime / duration;\n        this._progress = loop ? circulate(nextProgress, 0, 1) : clamp(nextProgress, 0, 1);\n        const easedProgress = this._easing(this._progress);\n        this._val = lerp(start, end, easedProgress);\n        if (!loop && this._progress >= 1) {\n            this._activated = false;\n        }\n        return this._val - prev;\n    }\n    /**\r\n   * Set `start`, `end` to the given value and set `progress` to 0.\r\n   * @ko 주어진 값으로 시작 지점, 끝 지점을 초기화하고 progress를 0으로 세팅합니다.\r\n   * @param defaultVal - Value to reset {@ko 초기화할 값}\r\n   * @since 4.0.0\r\n   */ reset(defaultVal) {\n        const range = this._range;\n        const val = clamp(defaultVal, range.min, range.max);\n        this._start = val;\n        this._end = val;\n        this._val = val;\n        this._progress = 0;\n        this._activated = false;\n    }\n    /**\r\n   * Add delta to start & end and current value.\r\n   * @ko 현재 & 끝 및 현재 값에 주어진 값을 더합니다.\r\n   * @param delta - Delta value to add {@ko 추가할 값}\r\n   */ add(delta) {\n        const range = this._range;\n        this._start = clamp(this._start + delta, range.min, range.max);\n        this._end = clamp(this._end + delta, range.min, range.max);\n        this._val = clamp(this._val + delta, range.min, range.max);\n    }\n    /**\r\n   * Set current value to start, and end to current value + delta, then reset progress to 0.\r\n   * @ko 현재 값을 시작 지점으로, 그에서 delta만큼 추가된 값을 끝점으로 하고 progress를 0으로 갱신합니다.\r\n   * @param delta - Delta value to add {@ko 추가할 값}\r\n   */ setNewEndByDelta(delta) {\n        const range = this._range;\n        this._start = this._val;\n        this._end = clamp(this._end + delta, range.min, range.max);\n        this._progress = 0;\n        this._activated = true;\n    }\n    /**\r\n   * Set new range of the interpolation.\r\n   * @ko 보간의 범위를 변경합니다.\r\n   * @param min - New minimum range {@ko 변경할 범위의 최소값}\r\n   * @param max - New maximum range {@ko 변경할 범위의 최대값}\r\n   */ setRange(min, max) {\n        this._start = clamp(this._start, min, max);\n        this._end = clamp(this._end, min, max);\n        this._range = {\n            min,\n            max\n        };\n    }\n    /**\r\n   * Create new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options Options {@ko 옵션들}\r\n   * @param options.duration Duration of the interpolation {@ko 보간할 시간}\r\n   * @param options.loop Whether to loop interpolation on finish {@ko 보간이 끝난 이후에 다시 시작할지 여부}\r\n   * @param options.range Range of the interpolation {@ko 보간 범위}\r\n   * @param options.loop Easing function of the interpolation {@ko 보간에 사용되는 easing function}\r\n   */ constructor({ duration = DEFAULT_ANIMATION_DURATION, loop = false, range = {\n        min: 0,\n        max: 1\n    }, easing = DEFAULT_EASING } = {}){\n        this._duration = duration;\n        this._loop = loop;\n        this._range = range;\n        this._easing = easing;\n        this._activated = false;\n        this.reset(0);\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Animation of the {@link Camera}\r\n * @internal\r\n * @ko {@link Camera}의 애니메이션\r\n * @since 4.0.0\r\n */ class CameraAnimation {\n    /**\r\n   * Duration of the animation\r\n   * @ko 애니메이션 재생시간\r\n   * @since 4.0.0\r\n   */ get duration() {\n        return this._motion.duration;\n    }\n    set duration(val) {\n        this._motion.duration = val;\n    }\n    /**\r\n   * Easing function of the animation\r\n   * @ko 애니메이션의 easing function\r\n   * @since 4.0.0\r\n   */ get easing() {\n        return this._motion.easing;\n    }\n    set easing(val) {\n        this._motion.easing = val;\n    }\n    /**\r\n   * Return a promise that resolved on animation end.\r\n   * @ko 애니메이션 재생이 끝났을 때 resolve되는 Promise를 반환합니다.\r\n   * @since 4.0.0\r\n   */ getFinishPromise() {\n        return this._finishPromise;\n    }\n    /**\r\n   * Update animation by given deltaTime.\r\n   * @ko 주어진 시간만큼 애니메이션을 업데이트합니다.\r\n   * @param deltaTime Number of milisec to update {@ko 업데이트할 시간, 밀리초 단위}\r\n   * @since 4.0.0\r\n   */ update(deltaTime) {\n        const camera = this._camera;\n        const from = this._from;\n        const to = this._to;\n        const motion = this._motion;\n        motion.update(deltaTime);\n        // Progress that easing is applied\n        const progress = motion.val;\n        const rotation = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.create();\n        const zoom = lerp(from.zoom, to.zoom, progress);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.slerp(rotation, from.rotation, to.rotation, progress);\n        camera.rotate(rotation, zoom);\n        if (progress >= 1) {\n            this._finish();\n        }\n    }\n    /**\r\n   * Create new instance\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param camera - Camera to animate {@ko 애니메이션을 적용할 카메라}\r\n   * @param from - Start pose {@ko 애니메이션이 시작 시점의 카메라의 회전 및 줌}\r\n   * @param to - End pose {@ko 애니메이션이 끝났을 때 카메라의 회전 및 줌}\r\n   * @param options - Options {@ko 옵션들}\r\n   * @param options.duration - Animation duration {@ko 애니메이션 재생 시간}\r\n   * @param options.easing - Animation easing function {@ko 애니메이션 easing function}\r\n   */ constructor(camera, from, to, { duration = DEFAULT_ANIMATION_DURATION, easing = DEFAULT_EASING } = {}){\n        this._camera = camera;\n        this._motion = new Motion({\n            duration,\n            easing,\n            range: {\n                min: 0,\n                max: 1\n            }\n        });\n        this._from = from;\n        this._to = to;\n        this._finishPromise = new Promise((resolve)=>{\n            this._finish = resolve;\n        });\n        // Enable motion\n        this._motion.setNewEndByDelta(1);\n    }\n}\n/**\r\n * Camera for View360\r\n * @ko View360용 카메라 구현체\r\n * @version 4.0.0\r\n */ class Camera extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\r\n   * Camera's width / height ratio\r\n   * @ko 카메라의 가로 / 세로 비율\r\n   * @readonly\r\n   */ get aspect() {\n        return this._aspect;\n    }\n    /**\r\n   * Whether the camera's rotation changed from the last frame.\r\n   * @ko 마지막 프레임 이후로 카메라의 회전값이 변경되었는지 나타내는 플래그.\r\n   * @readonly\r\n   */ get changed() {\n        return this._changed;\n    }\n    /**\r\n   * @copy View360#yawRange\r\n   */ get yawRange() {\n        return this._initialYawRange;\n    }\n    set yawRange(val) {\n        this._initialYawRange = val;\n    }\n    /**\r\n   * @copy View360#pitchRange\r\n   */ get pitchRange() {\n        return this._initialPitchRange;\n    }\n    set pitchRange(val) {\n        this._initialPitchRange = val;\n    }\n    /**\r\n   * @copy View360#zoomRange\r\n   */ get zoomRange() {\n        return this._initialZoomRange;\n    }\n    set zoomRange(val) {\n        this._initialZoomRange = val;\n    }\n    /**\r\n   * Destroy instance and detach all event listeners\r\n   * @ko 인스턴스를 삭제하고 모든 이벤트 리스너를 삭제합니다.\r\n   * @since 4.0.0\r\n   */ destroy() {\n        this.off();\n    }\n    /**\r\n   * Refresh internal size value.\r\n   * @ko 내부 크기값을 갱신합니다.\r\n   * @param width - New width {@ko 변경된 너비값}\r\n   * @param height - New height {@ko 변경된 높이값}\r\n   * @since 4.0.0\r\n   */ resize(width, height) {\n        const prevAspect = this._aspect;\n        this._aspect = width / height;\n        if (this._aspect !== prevAspect) {\n            this.updateMatrix();\n        }\n    }\n    /**\r\n   * Change camera's rotation with euler values.\r\n   * @ko 카메라 회전을 오일러 각 방향으로 변경합니다.\r\n   * @param rotation - Rotation values {@ko 회전 값}\r\n   * @param rotation.yaw - yaw(y-axis rotation) to look at {@ko 바라볼 yaw(y축 회전) 값}\r\n   * @param rotation.pitch - pitch(x-axis rotation) to look at {@ko 바라볼 pitch(x축 회전) 값}\r\n   * @param rotation.zoom - zoom value to apply {@ko 적용할 카메라 줌 값}\r\n   * @since 4.0.0\r\n   */ lookAt(param) {\n        let { yaw = this.yaw, pitch = this.pitch, zoom = this.zoom } = param;\n        const prevQuaternion = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.clone(this.quaternion);\n        const prevZoom = this.zoom;\n        this.yaw = circulate(yaw, 0, 360);\n        this.pitch = clamp(pitch, -90, 90);\n        this.zoom = zoom;\n        this._updateQuaternion();\n        const zoomDiff = Math.abs(zoom - prevZoom);\n        if (!gl_matrix__WEBPACK_IMPORTED_MODULE_1__.equals(this.quaternion, prevQuaternion) || zoomDiff >= EPSILON * 10 // ignore small changes\n        ) {\n            this.updateMatrix();\n        }\n    }\n    /**\r\n   * Change camera's rotation with quaternion.\r\n   * @ko 카메라 회전을 Quaternion을 이용해서 변경합니다.\r\n   * @param rotation - Quaternion to apply {@ko 적용할 Quaternion}\r\n   * @param zoom - zoom value to apply {@ko 적용할 카메라 줌 값}\r\n   * @since 4.0.0\r\n   */ rotate(rotation) {\n        let zoom = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.zoom;\n        const normalized = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.normalize(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.create(), rotation);\n        const isSameRotation = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.equals(this.quaternion, normalized);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.copy(this.quaternion, normalized);\n        const prevZoom = this.zoom;\n        const { yaw, pitch } = quatToEuler(normalized);\n        this.yaw = yaw;\n        this.pitch = pitch;\n        this.zoom = zoom;\n        const zoomDiff = Math.abs(zoom - prevZoom);\n        if (!isSameRotation || zoomDiff >= EPSILON * 10) {\n            this.updateMatrix();\n        }\n    }\n    /**\r\n   * Change camera's rotation to given euler values by the given duration.\r\n   * @ko 카메라를 주어진 방향으로 주어진 시간동안 서서히 이동시킵니다.\r\n   * @param options - Animation parameters {@ko 애니메이션 패러미터}\r\n   * @param options.yaw - yaw(y-axis rotation) to look at {@ko 바라볼 yaw(y축 회전) 값}\r\n   * @param options.pitch - pitch(x-axis rotation) to look at {@ko 바라볼 pitch(x축 회전) 값}\r\n   * @param options.zoom - zoom value to apply {@ko 적용할 카메라 줌 값}\r\n   * @param options.duration - Duration of the animation {@ko 애니메이션 시간}\r\n   * @param options.easing - Easing function for the animation {@ko 애니메이션에 적용할 easing function}\r\n   */ animateTo() {\n        let { yaw = this.yaw, pitch = this.pitch, zoom = this.zoom, duration = 0, easing = DEFAULT_EASING } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        return __awaiter(this, void 0, void 0, function*() {\n            if (this.yaw === yaw && this.pitch === pitch && this.zoom === zoom) return;\n            const from = {\n                rotation: gl_matrix__WEBPACK_IMPORTED_MODULE_1__.clone(this.quaternion),\n                zoom: this.zoom\n            };\n            const to = {\n                rotation: eulerToQuat(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.create(), yaw, pitch, this.rollOffset),\n                zoom\n            };\n            const animation = new CameraAnimation(this, from, to, {\n                duration,\n                easing\n            });\n            const finishPromise = animation.getFinishPromise();\n            this.animation = animation;\n            finishPromise.then(()=>{\n                this.animation = null;\n                this.trigger(CAMERA_EVENTS.ANIMATION_END, {\n                    animation\n                });\n            });\n            return finishPromise;\n        });\n    }\n    /**\r\n   * @hidden\r\n   */ restrictYawRange(min, max) {\n        this._yawRange = {\n            min,\n            max\n        };\n    }\n    /**\r\n   * @hidden\r\n   */ restrictPitchRange(min, max) {\n        this._pitchRange = {\n            min,\n            max\n        };\n    }\n    /**\r\n   * @hidden\r\n   */ restrictZoomRange(min, max) {\n        this._zoomRange = {\n            min,\n            max\n        };\n    }\n    /**\r\n   * @hidden\r\n   */ restrictRenderHeight(height) {\n        this._maxRenderHeight = height;\n    }\n    /**\r\n   * @hidden\r\n   */ resetRange() {\n        this._yawRange = this._initialYawRange;\n        this._pitchRange = this._initialPitchRange;\n        this._zoomRange = this._initialZoomRange;\n        this._maxRenderHeight = -1;\n    }\n    /**\r\n   * Get actual yaw range by the given zoom value.\r\n   * @ko 주어진 zoom 값에 대한 실제 yaw 범위값을 반환합니다.\r\n   * @since 4.0.0\r\n   */ getYawRange(zoom) {\n        const yawLimit = this._yawRange;\n        const maxRenderHeight = this._maxRenderHeight;\n        if (!yawLimit) return INFINITE_RANGE;\n        const halfHFov = this.getHorizontalFov(zoom) * 0.5;\n        let minYaw = yawLimit.min;\n        let maxYaw = yawLimit.max;\n        if (maxRenderHeight > 0) {\n            const halfVFovRad = toVerticalFov(halfHFov * DEG_TO_RAD, this._aspect);\n            const h = maxRenderHeight * 0.5;\n            const t = Math.tan(halfVFovRad);\n            const d = Math.sqrt((1 + h * h) / (1 + t * t));\n            const theta = Math.atan(Math.tan(halfHFov * DEG_TO_RAD) * d) * RAD_TO_DEG;\n            minYaw = yawLimit.min + theta;\n            maxYaw = yawLimit.max - theta;\n        }\n        if (minYaw > maxYaw) {\n            minYaw = 0;\n            maxYaw = 0;\n        }\n        return {\n            min: minYaw,\n            max: maxYaw\n        };\n    }\n    /**\r\n   * Get actual pitch range by the given zoom value.\r\n   * @ko 주어진 zoom 값에 대한 실제 pitch 범위값을 반환합니다.\r\n   * @since 4.0.0\r\n   */ getPitchRange(zoom) {\n        const pitchLimit = this._pitchRange;\n        const maxRenderHeight = this._maxRenderHeight;\n        if (!pitchLimit) return DEFAULT_PITCH_RANGE;\n        let minPitch = pitchLimit.min;\n        let maxPitch = pitchLimit.max;\n        if (maxRenderHeight > 0) {\n            const halfVFov = this.getVerticalFov(zoom) * 0.5;\n            minPitch = pitchLimit.min + halfVFov;\n            maxPitch = pitchLimit.max - halfVFov;\n        }\n        if (minPitch > maxPitch) {\n            minPitch = 0;\n            maxPitch = 0;\n        }\n        return {\n            min: Math.max(minPitch, -90),\n            max: Math.min(maxPitch, 90)\n        };\n    }\n    /**\r\n   * Get actual zoom range in fov degrees.\r\n   * @ko 실제 줌 범위를 fov각의 범위로 반환합니다.\r\n   * @since 4.0.0\r\n   */ getZoomRange() {\n        var _a;\n        const limit = (_a = this._zoomRange) !== null && _a !== void 0 ? _a : DEFAULT_ZOOM_RANGE;\n        // max (zoom in) -> minimum fov\n        const minFov = this.getHorizontalFov(limit.max);\n        const maxFov = this.getHorizontalFov(limit.min);\n        const currentFov = this.getHorizontalFov(this.zoom);\n        return {\n            min: Math.max(minFov, 1),\n            max: Math.min(maxFov, 180),\n            current: currentFov\n        };\n    }\n    /**\r\n   * Return horizontal fov value when the given zoom is applied. (in degrees, °)\r\n   * @ko 주어진 zoom 값이 적용되었을 때의 수평 fov값을 반환합니다. (도 단위, °)\r\n   * @returns Zoomed horizontal FOV {@ko 줌이 적용된 수평 fov값}\r\n   * @since 4.0.0\r\n   */ getHorizontalFov() {\n        let zoom = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.zoom;\n        return this._getZoomedHorizontalFov(zoom) * RAD_TO_DEG;\n    }\n    /**\r\n   * Return vertical fov value when the given zoom is applied. (in degrees, °)\r\n   * @ko 주어진 zoom 값이 적용되었을 때의 수직 fov값을 반환합니다. (도 단위, °)\r\n   * @returns Zoomed vertical FOV {@ko 줌이 적용된 수직 fov값}\r\n   * @since 4.0.0\r\n   */ getVerticalFov() {\n        let zoom = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.zoom;\n        const aspect = this._aspect;\n        const hFov = this._getZoomedHorizontalFov(zoom); // In radians\n        const vFov = toVerticalFov(hFov, aspect);\n        return vFov * RAD_TO_DEG;\n    }\n    /**\r\n   * Calculate zoom value for the given fov.\r\n   * @ko 주어진 fov값을 zoom값으로 변환합니다.\r\n   * @param fov horizontal fov (in degrees, °) {@ko 수평 fov 값 (도 단위, °)}\r\n   * @since 4.0.0\r\n   */ fovToZoom(fov) {\n        const baseFov = this.fov;\n        const renderingWidth = Math.tan(DEG_TO_RAD * baseFov * 0.5);\n        const zoomedWidth = Math.tan(DEG_TO_RAD * fov * 0.5);\n        return renderingWidth / zoomedWidth;\n    }\n    /**\r\n   * Update inner matrixes.\r\n   * @ko 내부 행렬들을 업데이트합니다.\r\n   * @internal\r\n   * @since 4.0.0\r\n   */ updateMatrix() {\n        const up = this._up;\n        const aspect = this._aspect;\n        const viewMatrix = this.viewMatrix;\n        const projMatrix = this.projectionMatrix;\n        const position = this.position;\n        const rotation = this.quaternion;\n        const upDir = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\n        const viewDir = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, -1);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(viewDir, viewDir, rotation);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(upDir, up, rotation);\n        const hFov = this._getZoomedHorizontalFov(); // In radians\n        const vFov = toVerticalFov(hFov, aspect);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.lookAt(viewMatrix, position, viewDir, upDir);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.perspective(projMatrix, vFov, aspect, 0.1, 100);\n        this._changed = true;\n    }\n    /**\r\n   * @hidden\r\n   */ onFrameRender() {\n        this._changed = false;\n    }\n    _updateQuaternion() {\n        eulerToQuat(this.quaternion, this.yaw, this.pitch, this.rollOffset);\n    }\n    /**\r\n   * @param zoom Current zoom value\r\n   * @returns horizontal fov including zoom, in radian\r\n   */ _getZoomedHorizontalFov() {\n        let zoom = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.zoom;\n        return 2 * Math.atan(Math.tan(DEG_TO_RAD * this.fov * 0.5) / zoom);\n    }\n    /**\r\n   * Create new instance of Camera\r\n   * @param options - Camera options {@ko 카메라 옵션들}\r\n   */ constructor({ initialYaw, initialPitch, initialZoom, yawRange, pitchRange, zoomRange, fov }){\n        super();\n        this.yaw = initialYaw;\n        this.pitch = initialPitch;\n        this.zoom = initialZoom;\n        this.rollOffset = 0;\n        this.initialYaw = initialYaw;\n        this.initialPitch = initialPitch;\n        this.initialZoom = initialZoom;\n        this.position = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\n        this.animation = null;\n        this._up = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 1, 0);\n        this._aspect = 1;\n        this._initialYawRange = yawRange;\n        this._initialPitchRange = pitchRange;\n        this._initialZoomRange = zoomRange;\n        this._yawRange = yawRange;\n        this._pitchRange = pitchRange;\n        this._zoomRange = zoomRange;\n        this.quaternion = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.create();\n        this._updateQuaternion();\n        this.viewMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_3__.create();\n        this.projectionMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_3__.create();\n        this.fov = fov;\n        this._maxRenderHeight = -1;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class MouseInput extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    enable(element) {\n        if (this._el) return;\n        element.addEventListener(EVENTS$1.MOUSE_DOWN, this._onMouseDown);\n        this._el = element;\n    }\n    disable() {\n        const element = this._el;\n        if (!element) return;\n        element.removeEventListener(EVENTS$1.MOUSE_DOWN, this._onMouseDown);\n        window.removeEventListener(EVENTS$1.MOUSE_MOVE, this._onMouseMove, false);\n        window.removeEventListener(EVENTS$1.MOUSE_UP, this._onMouseUp, false);\n        this._el = null;\n    }\n    constructor(){\n        super();\n        this._onMouseDown = (evt)=>{\n            const el = this._el;\n            if (!el || evt.button !== MOUSE_BUTTON.LEFT) return;\n            evt.preventDefault();\n            if (el.focus) {\n                el.focus();\n            } else {\n                window.focus();\n            }\n            this._prevPos[0] = evt.clientX;\n            this._prevPos[1] = evt.clientY;\n            window.addEventListener(EVENTS$1.MOUSE_MOVE, this._onMouseMove, false);\n            window.addEventListener(EVENTS$1.MOUSE_UP, this._onMouseUp, false);\n            this.trigger(CONTROL_EVENTS.INPUT_START, {\n                srcEvent: evt,\n                isTouch: false,\n                isKeyboard: false\n            });\n        };\n        this._onMouseMove = (evt)=>{\n            evt.preventDefault();\n            const x = evt.clientX;\n            const y = evt.clientY;\n            const prevPos = this._prevPos;\n            const deltaX = x - prevPos[0];\n            const deltaY = y - prevPos[1];\n            this.trigger(CONTROL_EVENTS.CHANGE, {\n                delta: {\n                    x: deltaX,\n                    y: deltaY\n                },\n                isTouch: false,\n                isKeyboard: false\n            });\n            prevPos[0] = x;\n            prevPos[1] = y;\n        };\n        this._onMouseUp = ()=>{\n            this._prevPos[0] = 0;\n            this._prevPos[1] = 0;\n            window.removeEventListener(EVENTS$1.MOUSE_MOVE, this._onMouseMove, false);\n            window.removeEventListener(EVENTS$1.MOUSE_UP, this._onMouseUp, false);\n            this.trigger(CONTROL_EVENTS.INPUT_END, {\n                isTouch: false,\n                isKeyboard: false,\n                scrolling: false\n            });\n        };\n        this._el = null;\n        this._prevPos = [\n            0,\n            0\n        ];\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class TouchInput extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    get scrollable() {\n        return this._scrollable;\n    }\n    set scrollable(val) {\n        this._scrollable = val;\n    }\n    enable(element) {\n        if (this._el) return;\n        element.addEventListener(EVENTS$1.TOUCH_START, this._onTouchStart, {\n            passive: false\n        });\n        element.addEventListener(EVENTS$1.TOUCH_MOVE, this._onTouchMove, {\n            passive: false\n        });\n        element.addEventListener(EVENTS$1.TOUCH_END, this._onTouchEnd);\n        this._el = element;\n    }\n    disable() {\n        const element = this._el;\n        if (!element) return;\n        element.removeEventListener(EVENTS$1.TOUCH_START, this._onTouchStart);\n        element.removeEventListener(EVENTS$1.TOUCH_MOVE, this._onTouchMove);\n        element.removeEventListener(EVENTS$1.TOUCH_END, this._onTouchEnd);\n        this._el = null;\n    }\n    constructor(){\n        super();\n        this._onTouchStart = (evt)=>{\n            if (evt.touches.length > 1 || this._scrolling) return;\n            const touch = evt.touches[0];\n            this._isFirstTouch = true;\n            this._prevPos[0] = touch.clientX;\n            this._prevPos[1] = touch.clientY;\n            this.trigger(CONTROL_EVENTS.INPUT_START, {\n                srcEvent: evt,\n                isTouch: true,\n                isKeyboard: false\n            });\n        };\n        this._onTouchMove = (evt)=>{\n            // Only the one finger motion should be considered\n            if (evt.touches.length > 1 || this._scrolling) return;\n            const touch = evt.touches[0];\n            const scrollable = this._scrollable;\n            const prevPos = this._prevPos;\n            const x = touch.clientX;\n            const y = touch.clientY;\n            const deltaX = x - prevPos[0];\n            const deltaY = y - prevPos[1];\n            if (this._isFirstTouch) {\n                if (scrollable && !isFullscreen()) {\n                    if (Math.abs(deltaY) > Math.abs(deltaX)) {\n                        // Assume Scrolling\n                        this._scrolling = true;\n                        return;\n                    }\n                }\n                this._isFirstTouch = false;\n            }\n            if (evt.cancelable !== false) {\n                evt.preventDefault();\n            }\n            this.trigger(CONTROL_EVENTS.CHANGE, {\n                delta: {\n                    x: deltaX,\n                    y: deltaY\n                },\n                isTouch: true,\n                isKeyboard: false\n            });\n            prevPos[0] = x;\n            prevPos[1] = y;\n        };\n        this._onTouchEnd = (evt)=>{\n            if (evt.touches.length !== 0) return;\n            const touch = evt.touches[0];\n            const prevPos = this._prevPos;\n            if (touch) {\n                prevPos[0] = touch.clientX;\n                prevPos[1] = touch.clientY;\n            } else {\n                prevPos[0] = 0;\n                prevPos[1] = 0;\n                this.trigger(CONTROL_EVENTS.INPUT_END, {\n                    isTouch: true,\n                    isKeyboard: false,\n                    scrolling: this._scrolling\n                });\n            }\n            if (evt.cancelable !== false) {\n                evt.preventDefault();\n            }\n            this._scrolling = false;\n        };\n        this._el = null;\n        this._prevPos = [\n            0,\n            0\n        ];\n        this._isFirstTouch = false;\n        this._scrolling = false;\n        this._scrollable = false;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class KeyboardInput extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    get active() {\n        const pressed = this._pressed;\n        return pressed.LEFT || pressed.UP || pressed.RIGHT || pressed.DOWN;\n    }\n    enable(element) {\n        if (this._el) return;\n        element.addEventListener(EVENTS$1.KEY_DOWN, this._onKeyDown);\n        element.addEventListener(EVENTS$1.KEY_UP, this._onKeyUp);\n        this._el = element;\n        this._clearPressedKeys();\n    }\n    disable() {\n        const element = this._el;\n        if (!element) return;\n        element.removeEventListener(EVENTS$1.KEY_DOWN, this._onKeyDown);\n        element.removeEventListener(EVENTS$1.KEY_UP, this._onKeyUp);\n        this._el = null;\n        this._clearPressedKeys();\n    }\n    update() {\n        const delta = this._getDeltaByPressedKeys();\n        if (delta.x !== 0 || delta.y !== 0) {\n            this.trigger(CONTROL_EVENTS.CHANGE, {\n                delta,\n                isTouch: false,\n                isKeyboard: true\n            });\n        }\n    }\n    _clearPressedKeys() {\n        this._pressed = KEY_DIRECTION.reduce((obj, keyName)=>{\n            return Object.assign(Object.assign({}, obj), {\n                [keyName]: false\n            });\n        }, {});\n    }\n    _updateKeyPress(event, isEnable) {\n        const pressed = this._pressed;\n        const keyToUpdate = event.keyCode != null ? DIRECTION_KEY_CODE[event.keyCode] : DIRECTION_KEY_NAME[event.key];\n        if (!keyToUpdate) return;\n        pressed[keyToUpdate] = isEnable;\n    }\n    _getPressedKeyCount() {\n        return KEY_DIRECTION.filter((key)=>this._pressed[key]).length;\n    }\n    _getDeltaByPressedKeys() {\n        const pressed = this._pressed;\n        let x = 0;\n        let y = 0;\n        if (pressed.LEFT) {\n            x += 1;\n        }\n        if (pressed.RIGHT) {\n            x -= 1;\n        }\n        if (pressed.UP) {\n            y += 1;\n        }\n        if (pressed.DOWN) {\n            y -= 1;\n        }\n        return {\n            x,\n            y\n        };\n    }\n    constructor(){\n        super();\n        this._onKeyDown = (evt)=>{\n            // Ignore all other keypress except main arrow keys\n            if (evt.location !== KeyboardEvent.DOM_KEY_LOCATION_STANDARD) return;\n            this._updateKeyPress(evt, true);\n            const pressedCount = this._getPressedKeyCount();\n            if (pressedCount <= 0) return;\n            evt.preventDefault();\n            if (pressedCount === 1 && !evt.repeat) {\n                // On first keydown\n                this.trigger(CONTROL_EVENTS.INPUT_START, {\n                    srcEvent: evt,\n                    isTouch: false,\n                    isKeyboard: true\n                });\n            }\n        };\n        this._onKeyUp = (evt)=>{\n            // Ignore all other keypress except main arrow keys\n            if (evt.location !== KeyboardEvent.DOM_KEY_LOCATION_STANDARD) return;\n            this._updateKeyPress(evt, false);\n            const pressedCount = this._getPressedKeyCount();\n            if (pressedCount > 0) return;\n            this.trigger(CONTROL_EVENTS.INPUT_END, {\n                isTouch: false,\n                isKeyboard: true,\n                scrolling: false\n            });\n        };\n        this._el = null;\n        this._clearPressedKeys();\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Camera's rotation control\r\n * @ko 카메라의 회전을 담당하는 컨트롤\r\n * @since 4.0.0\r\n */ class RotateControl extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\r\n   * @copy CameraControl#enabled\r\n   */ get enabled() {\n        return this._enabled;\n    }\n    /**\r\n   * @hidden\r\n   */ get enableBlocked() {\n        return this._enableBlocked;\n    }\n    /**\r\n   * @copy CameraControl#animating\r\n   */ get animating() {\n        return this._keyboardInput.active || this._xMotion.activated || this._yMotion.activated;\n    }\n    /**\r\n   * Current yaw value\r\n   * @ko 현재 yaw 값\r\n   * @readonly\r\n   * @since 4.0.0\r\n   */ get yaw() {\n        return this._xMotion;\n    }\n    /**\r\n   * Current pitch value\r\n   * @ko 현재 pitch 값\r\n   * @readonly\r\n   * @since 4.0.0\r\n   */ get pitch() {\n        return this._yMotion;\n    }\n    /**\r\n   * @copy View360#scrollable\r\n   */ get scrollable() {\n        return this._touchInput.scrollable;\n    }\n    set scrollable(val) {\n        this._touchInput.scrollable = val;\n    }\n    /**\r\n   * Scale factor for mouse/touch rotation\r\n   * @ko 마우스/터치를 통한 회전 배율\r\n   * @default [1, 1]\r\n   * @since 4.0.0\r\n   */ get pointerScale() {\n        return this._pointerScale;\n    }\n    set pointerScale(val) {\n        this._pointerScale = val;\n    }\n    /**\r\n   * Scale factor for keyboard rotation\r\n   * @ko 키보드를 통한 회전 배율\r\n   * @default [1, 1]\r\n   * @since 4.0.0\r\n   */ get keyboardScale() {\n        return this._keyboardScale;\n    }\n    set keyboardScale(val) {\n        this._keyboardScale = val;\n    }\n    /**\r\n   * Duration of the input animation (ms)\r\n   * @ko 회전 애니메이션의 시간 (ms)\r\n   * @default 300\r\n   */ get duration() {\n        return this._duration;\n    }\n    set duration(val) {\n        this._duration = val;\n        this._xMotion.duration = val;\n        this._yMotion.duration = val;\n    }\n    /**\r\n   * Easing function of the animation\r\n   * @ko 회전 애니메이션에 적용할 easing 함수\r\n   * @default EASING.EASE_OUT_CUBIC\r\n   * @see EASING\r\n   */ get easing() {\n        return this._easing;\n    }\n    set easing(val) {\n        this._easing = val;\n        this._xMotion.easing = val;\n        this._yMotion.easing = val;\n    }\n    /**\r\n   * Disable X-axis(pitch) rotation.\r\n   * @ko x축 회전(pitch)을 비활성화합니다.\r\n   * @default false\r\n   */ get disablePitch() {\n        return this._disablePitch;\n    }\n    set disablePitch(val) {\n        this._disablePitch = val;\n    }\n    /**\r\n   * Disable Y-axis(yaw) rotation.\r\n   * @ko y축 회전(yaw)을 비활성화합니다.\r\n   * @default false\r\n   */ get disableYaw() {\n        return this._disableYaw;\n    }\n    set disableYaw(val) {\n        this._disableYaw = val;\n    }\n    /**\r\n   * Disable rotation by keyboard.\r\n   * @ko 키보드를 이용한 회전을 비활성화합니다.\r\n   * @default false\r\n   */ get disableKeyboard() {\n        return this._disableKeyboard;\n    }\n    set disableKeyboard(val) {\n        this._disableKeyboard = val;\n    }\n    destroy() {\n        this.disable();\n        this._mouseInput.off();\n        this._touchInput.off();\n        this._keyboardInput.off();\n        this.off();\n        this._changedWhileDragging = false;\n    }\n    /**\r\n   * @hidden\r\n   */ update(delta) {\n        if (!this._enabled) return;\n        const xMotion = this._xMotion;\n        const yMotion = this._yMotion;\n        const keyboardInput = this._keyboardInput;\n        if (!this._disableKeyboard) {\n            keyboardInput.update();\n        }\n        if (!this._disablePitch) {\n            yMotion.update(delta);\n        }\n        if (!this._disableYaw) {\n            xMotion.update(delta);\n        }\n    }\n    /**\r\n   * @hidden\r\n   */ updateRange(camera, zoom) {\n        const yawRange = camera.getYawRange(zoom);\n        const pitchRange = camera.getPitchRange(zoom);\n        this._xMotion.setRange(yawRange.min, yawRange.max);\n        this._yMotion.setRange(pitchRange.min, pitchRange.max);\n    }\n    /**\r\n   * @hidden\r\n   */ setZoomScale(val) {\n        this._zoomScale = val;\n    }\n    /**\r\n   * Resize control to match target size.\r\n   * @ko 컨트롤의 내부 크기를 갱신합니다.\r\n   * @param hfov - Camera horizontal fov in degrees {@ko 카메라의 수평방향 fov값 (도 단위)}\r\n   * @param aspect - Camera aspect {@ko 카메라 가로/세로 비율}\r\n   * @param width - New width {@ko 갱신된 너비}\r\n   * @param height - New height {@ko 갱신된 높이}\r\n   */ resize(hfov, aspect, width, height) {\n        const vfov = toVerticalFov(hfov * DEG_TO_RAD, aspect) * RAD_TO_DEG;\n        this._screenScale[0] = hfov / width;\n        this._screenScale[1] = vfov / height;\n    }\n    enable() {\n        if (this._enabled) return;\n        const element = this._controlEl;\n        this._mouseInput.enable(element);\n        this._touchInput.enable(element);\n        this._keyboardInput.enable(element);\n        this._enabled = true;\n        this._enableBlocked = false;\n        this.trigger(CONTROL_EVENTS.ENABLE, {\n            control: this,\n            updateCursor: true\n        });\n    }\n    disable() {\n        if (!this._enabled) return;\n        this._mouseInput.disable();\n        this._touchInput.disable();\n        this._keyboardInput.disable();\n        this._enabled = false;\n        this.trigger(CONTROL_EVENTS.DISABLE, {\n            updateCursor: true\n        });\n    }\n    sync(camera) {\n        this.updateRange(camera, camera.zoom);\n        this._xMotion.reset(camera.yaw);\n        this._yMotion.reset(camera.pitch);\n    }\n    _bindInputs() {\n        const mouseInput = this._mouseInput;\n        const touchInput = this._touchInput;\n        const keyboardInput = this._keyboardInput;\n        mouseInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        mouseInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n        mouseInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n        touchInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        touchInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n        touchInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n        keyboardInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        keyboardInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n        keyboardInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n    }\n    /**\r\n   * Create new RotateControl instance\r\n   * @ko RotateControl의 인스턴스를 생성합니다.\r\n   * @param controlEl - Element to attach handlers {@ko 입력을 받을 엘리먼트}\r\n   * @param enableBlocked - Whether to disable control on init {@ko 초기화 과정에서 컨트롤 활성화 여부}\r\n   * @param options - Options for control {@ko 컨트롤 옵션들}\r\n   */ constructor(controlEl, enableBlocked, { duration = DEFAULT_ANIMATION_DURATION, easing = DEFAULT_EASING, pointerScale = [\n        1,\n        1\n    ], keyboardScale = [\n        1,\n        1\n    ], disablePitch = false, disableYaw = false, disableKeyboard = false } = {}){\n        super();\n        this._onInputStart = (evt)=>{\n            this._changedWhileDragging = false;\n            this.trigger(CONTROL_EVENTS.INPUT_START, Object.assign(Object.assign({}, evt), {\n                inputType: \"rotate\"\n            }));\n        };\n        this._onChange = (evt)=>{\n            const delta = evt.delta;\n            const invZoomScale = 1 / this._zoomScale; // Reduce speed on zoom\n            const screenScale = this._screenScale;\n            const keyboardScale = this._keyboardScale;\n            const pointerScale = this._pointerScale;\n            let scale;\n            if (evt.isKeyboard) {\n                scale = [\n                    keyboardScale[0] * invZoomScale,\n                    keyboardScale[1] * invZoomScale\n                ];\n            } else {\n                scale = [\n                    pointerScale[0] * screenScale[0] * invZoomScale,\n                    pointerScale[1] * screenScale[1] * invZoomScale\n                ];\n            }\n            const scaledX = delta.x * scale[0];\n            const scaledY = delta.y * scale[1];\n            this._xMotion.setNewEndByDelta(scaledX);\n            this._yMotion.setNewEndByDelta(scaledY);\n            this._changedWhileDragging = true;\n        };\n        this._onInputEnd = (evt)=>{\n            this.trigger(CONTROL_EVENTS.INPUT_END, Object.assign(Object.assign({}, evt), {\n                inputType: \"rotate\"\n            }));\n            if (!this._changedWhileDragging && !evt.isKeyboard && !evt.scrolling) {\n                this.trigger(CONTROL_EVENTS.STATIC_CLICK, {\n                    isTouch: evt.isTouch\n                });\n            }\n            this._changedWhileDragging = false;\n        };\n        this._controlEl = controlEl;\n        this._pointerScale = pointerScale;\n        this._keyboardScale = keyboardScale;\n        this._duration = duration;\n        this._easing = easing;\n        this._disablePitch = disablePitch;\n        this._disableYaw = disableYaw;\n        this._disableKeyboard = disableKeyboard;\n        this._enableBlocked = enableBlocked;\n        this._mouseInput = new MouseInput();\n        this._touchInput = new TouchInput();\n        this._keyboardInput = new KeyboardInput();\n        this._xMotion = new Motion({\n            duration,\n            range: INFINITE_RANGE,\n            easing\n        });\n        this._yMotion = new Motion({\n            duration,\n            range: DEFAULT_PITCH_RANGE,\n            easing\n        });\n        this._screenScale = [\n            1,\n            1\n        ];\n        this._zoomScale = 1;\n        this._enabled = false;\n        this._changedWhileDragging = false;\n        this._bindInputs();\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class WheelInput extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    get scrollable() {\n        return this._scrollable;\n    }\n    set scrollable(val) {\n        this._scrollable = val;\n    }\n    enable(element) {\n        if (this._el) return;\n        element.addEventListener(EVENTS$1.WHEEL, this._onWheel, {\n            passive: false,\n            capture: false\n        });\n        this._el = element;\n        this._clearTimer();\n    }\n    disable() {\n        const element = this._el;\n        if (!element) return;\n        element.removeEventListener(EVENTS$1.WHEEL, this._onWheel, false);\n        this._el = null;\n        this._clearTimer();\n    }\n    _clearTimer() {\n        window.clearTimeout(this._inputTimer);\n        this._inputTimer = -1;\n    }\n    constructor(){\n        super();\n        this._onWheel = (evt)=>{\n            const scrollable = this._scrollable;\n            if (evt.deltaY === 0 || scrollable) return;\n            evt.preventDefault();\n            evt.stopPropagation();\n            if (this._inputTimer < 0) {\n                this.trigger(CONTROL_EVENTS.INPUT_START, {\n                    srcEvent: evt,\n                    isTouch: false,\n                    isKeyboard: false\n                });\n            } else {\n                this._clearTimer();\n            }\n            const delta = this._baseScale * evt.deltaY;\n            this.trigger(CONTROL_EVENTS.CHANGE, {\n                delta,\n                isTouch: false,\n                isKeyboard: false\n            });\n            this._inputTimer = window.setTimeout(()=>{\n                this.trigger(CONTROL_EVENTS.INPUT_END, {\n                    isTouch: false,\n                    isKeyboard: false,\n                    scrolling: false\n                });\n                this._inputTimer = -1;\n            }, DEFAULT_ANIMATION_DURATION);\n        };\n        this._el = null;\n        this._baseScale = 0.04;\n        this._scrollable = false;\n        this._inputTimer = -1;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class PinchInput extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    enable(element) {\n        if (this._el) return;\n        element.addEventListener(EVENTS$1.TOUCH_MOVE, this._onTouchMove, {\n            passive: false,\n            capture: false\n        });\n        element.addEventListener(EVENTS$1.TOUCH_END, this._onTouchEnd);\n        this._el = element;\n        this._prevDistance = -1;\n        this._isFirstTouch = true;\n    }\n    disable() {\n        const element = this._el;\n        if (!element) return;\n        element.removeEventListener(EVENTS$1.TOUCH_MOVE, this._onTouchMove, false);\n        element.removeEventListener(EVENTS$1.TOUCH_END, this._onTouchEnd);\n        this._el = null;\n    }\n    constructor(){\n        super();\n        this._onTouchMove = (evt)=>{\n            const touches = evt.touches;\n            if (touches.length !== 2) return;\n            if (!evt.cancelable) return;\n            evt.preventDefault();\n            evt.stopPropagation();\n            const prevDistance = this._prevDistance;\n            const diff = [\n                touches[0].pageX - touches[1].pageX,\n                touches[0].pageY - touches[1].pageY\n            ];\n            const distance = Math.sqrt(diff[0] * diff[0] + diff[1] * diff[1]) * this._baseScale;\n            const delta = this._isFirstTouch ? 0 : distance - prevDistance;\n            if (this._isFirstTouch) {\n                this.trigger(CONTROL_EVENTS.INPUT_START, {\n                    srcEvent: evt,\n                    isTouch: true,\n                    isKeyboard: false\n                });\n            }\n            this._prevDistance = distance;\n            this._isFirstTouch = false;\n            this.trigger(CONTROL_EVENTS.CHANGE, {\n                delta,\n                isTouch: true,\n                isKeyboard: false\n            });\n        };\n        this._onTouchEnd = (evt)=>{\n            if (evt.touches.length !== 0) return;\n            if (!this._isFirstTouch) {\n                this.trigger(CONTROL_EVENTS.INPUT_END, {\n                    isTouch: true,\n                    isKeyboard: false,\n                    scrolling: false\n                });\n            }\n            this._prevDistance = -1;\n            this._isFirstTouch = true;\n        };\n        this._el = null;\n        this._baseScale = -0.2;\n        this._prevDistance = -1;\n        this._isFirstTouch = true;\n    }\n}\n/*\r\n* Copyright (c) 2023-present NAVER Corp.\r\n* egjs projects are licensed under the MIT license\r\n*/ /**\r\n * Camera's zoom control\r\n * @ko 카메라의 줌 값을 담당하는 컨트롤\r\n * @since 4.0.0\r\n */ class ZoomControl extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\r\n   * @copy CameraControl#enabled\r\n   */ get enabled() {\n        return this._enabled;\n    }\n    /**\r\n   * @hidden\r\n   */ get enableBlocked() {\n        return this._enableBlocked;\n    }\n    /**\r\n   * @copy CameraControl#animating\r\n   */ get animating() {\n        return this._motion.activated;\n    }\n    /**\r\n   * Current zoom value\r\n   * @ko 현재 줌 값\r\n   * @since 4.0.0\r\n   * @readonly\r\n   */ get zoom() {\n        return this._motion.val;\n    }\n    /**\r\n   * @copy View360#wheelScrollable\r\n   */ get scrollable() {\n        return this._wheelInput.scrollable;\n    }\n    set scrollable(val) {\n        this._wheelInput.scrollable = val;\n    }\n    /**\r\n   * @hidden\r\n   */ get range() {\n        return this._motion.range;\n    }\n    /**\r\n   * Scale factor of the zoom\r\n   * @ko 입력에 의한 줌 배율\r\n   * @default 1\r\n   * @since 4.0.0\r\n   */ get scale() {\n        return this._scale;\n    }\n    set scale(val) {\n        this._scale = val;\n    }\n    /**\r\n   * Duration of the input animation (ms)\r\n   * @ko 회전 애니메이션의 시간 (ms)\r\n   * @default 300\r\n   * @since 4.0.0\r\n   */ get duration() {\n        return this._motion.duration;\n    }\n    /**\r\n   * Easing function of the animation\r\n   * @ko 회전 애니메이션에 적용할 easing 함수\r\n   * @default EASING.EASE_OUT_CUBIC\r\n   * @see EASING\r\n   * @since 4.0.0\r\n   */ get easing() {\n        return this._motion.easing;\n    }\n    destroy() {\n        this.disable();\n        this._wheelInput.off();\n        this._pinchInput.off();\n        this.off();\n    }\n    /**\r\n   * @hidden\r\n   */ update(delta) {\n        if (!this._enabled) return;\n        const motion = this._motion;\n        motion.update(delta);\n    }\n    enable() {\n        if (this._enabled) return;\n        const element = this._controlEl;\n        this._wheelInput.enable(element);\n        this._pinchInput.enable(element);\n        this._enabled = true;\n        this._enableBlocked = false;\n        this.trigger(CONTROL_EVENTS.ENABLE, {\n            control: this,\n            updateCursor: false\n        });\n    }\n    disable() {\n        if (!this._enabled) return;\n        this._wheelInput.disable();\n        this._pinchInput.disable();\n        this._enabled = false;\n        this.trigger(CONTROL_EVENTS.DISABLE, {\n            updateCursor: false\n        });\n    }\n    sync(camera) {\n        const motion = this._motion;\n        const range = camera.getZoomRange();\n        motion.setRange(range.min, range.max);\n        motion.reset(range.current);\n    }\n    _bindInputs() {\n        const wheelInput = this._wheelInput;\n        const pinchInput = this._pinchInput;\n        wheelInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        wheelInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n        wheelInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n        pinchInput.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        pinchInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n        pinchInput.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n    }\n    /**\r\n   * Create new ZoomControl instance\r\n   * @ko ZoomControl의 인스턴스를 생성합니다.\r\n   * @param controlEl - Element to attach handlers {@ko 입력을 받을 엘리먼트}\r\n   * @param enableBlocked - Whether to disable control on init {@ko 초기화 과정에서 컨트롤 활성화 여부}\r\n   * @param options - Options for control {@ko 컨트롤 옵션들}\r\n   */ constructor(controlEl, enableBlocked, { scale = 1, duration = DEFAULT_ANIMATION_DURATION, easing = DEFAULT_EASING } = {}){\n        super();\n        this._onInputStart = (evt)=>{\n            this.trigger(CONTROL_EVENTS.INPUT_START, Object.assign(Object.assign({}, evt), {\n                inputType: \"zoom\"\n            }));\n        };\n        this._onChange = (param)=>{\n            let { delta } = param;\n            const scale = this._scale;\n            const scaledDelta = delta * scale;\n            this._motion.setNewEndByDelta(scaledDelta);\n        };\n        this._onInputEnd = (evt)=>{\n            this.trigger(CONTROL_EVENTS.INPUT_END, Object.assign(Object.assign({}, evt), {\n                inputType: \"zoom\"\n            }));\n        };\n        this._scale = scale;\n        this._controlEl = controlEl;\n        this._enableBlocked = enableBlocked;\n        this._wheelInput = new WheelInput();\n        this._pinchInput = new PinchInput();\n        this._motion = new Motion({\n            duration,\n            easing,\n            range: INFINITE_RANGE\n        });\n        this._enabled = false;\n        this._bindInputs();\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ const ROTATE_CONSTANT = {\n    PITCH_DELTA: 1,\n    YAW_DELTA_BY_ROLL: 2,\n    YAW_DELTA_BY_YAW: 3\n};\nROTATE_CONSTANT[ROTATE_CONSTANT.PITCH_DELTA] = {\n    targetAxis: [\n        0,\n        1,\n        0\n    ],\n    meshPoint: [\n        0,\n        0,\n        1\n    ]\n};\nROTATE_CONSTANT[ROTATE_CONSTANT.YAW_DELTA_BY_ROLL] = {\n    targetAxis: [\n        0,\n        1,\n        0\n    ],\n    meshPoint: [\n        1,\n        0,\n        0\n    ]\n};\nROTATE_CONSTANT[ROTATE_CONSTANT.YAW_DELTA_BY_YAW] = {\n    targetAxis: [\n        1,\n        0,\n        0\n    ],\n    meshPoint: [\n        0,\n        0,\n        1\n    ]\n};\nclass GyroInput extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    get enabled() {\n        return this._enabled;\n    }\n    get orientationUpdated() {\n        return this._orientationUpdated;\n    }\n    get ignoreRoll() {\n        return this._ignoreRoll;\n    }\n    set ignoreRoll(val) {\n        this._ignoreRoll = val;\n    }\n    enable() {\n        if (this._enabled) return;\n        window.addEventListener(EVENTS$1.DEVICE_ORIENTATION, this._onDeviceOrientation);\n        window.addEventListener(EVENTS$1.ORIENTATION_CHANGE, this._updateScreenOrientation);\n        this._updateScreenOrientation();\n        this._orientationUpdated = false;\n        this._needsCalibrate = true;\n        this._enabled = true;\n    }\n    disable() {\n        if (!this._enabled) return;\n        window.removeEventListener(EVENTS$1.DEVICE_ORIENTATION, this._onDeviceOrientation);\n        window.removeEventListener(EVENTS$1.ORIENTATION_CHANGE, this._updateScreenOrientation);\n        this._enabled = false;\n    }\n    update() {\n        this._updateRotation();\n        this._orientationUpdated = false;\n    }\n    collectDelta() {\n        if (!this._orientationUpdated) {\n            return {\n                pitch: 0,\n                yaw: 0\n            };\n        }\n        const prevRotation = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.clone(this.quaternion);\n        this._updateRotation();\n        this._orientationUpdated = false;\n        return this._toEulerDelta(prevRotation, this.quaternion);\n    }\n    setInitialRotation(yaw) {\n        this._yawOrigin = yaw;\n    }\n    _calibrateSensor() {\n        const yawOrigin = this._yawOrigin;\n        const rotation = this.quaternion;\n        this._yawOffset = 0;\n        this._updateRotation();\n        const { yaw: sensorYaw } = quatToEuler(rotation);\n        this._yawOffset = sensorYaw - yawOrigin;\n        this._updateRotation();\n        this._needsCalibrate = false;\n    }\n    _updateRotation() {\n        const rotation = this.quaternion;\n        const { alpha, beta, gamma } = this._orientation;\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.identity(rotation);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.rotateY(rotation, rotation, (alpha - this._yawOffset) * DEG_TO_RAD);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.rotateX(rotation, rotation, beta * DEG_TO_RAD);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.rotateZ(rotation, rotation, -gamma * DEG_TO_RAD);\n        const screen1 = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.create();\n        const screenAngle = -this._screenOrientation * 0.5 * DEG_TO_RAD;\n        const world = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.fromValues(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.set(screen1, 0, Math.sin(screenAngle), 0, Math.cos(screenAngle));\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.multiply(rotation, rotation, screen1);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.multiply(rotation, rotation, world);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.normalize(rotation, rotation);\n    }\n    _toEulerDelta(prevQuat, currentQuat) {\n        return {\n            yaw: this._getDeltaYaw(prevQuat, currentQuat),\n            pitch: this._getDeltaPitch(prevQuat, currentQuat)\n        };\n    }\n    _getDeltaYaw(prvQ, curQ) {\n        const yawDeltaByYaw = this._getRotationDelta(prvQ, curQ, ROTATE_CONSTANT.YAW_DELTA_BY_YAW);\n        const yawDeltaByRoll = this._getRotationDelta(prvQ, curQ, ROTATE_CONSTANT.YAW_DELTA_BY_ROLL) * Math.sin(this._extractPitchFromQuat(curQ));\n        return yawDeltaByRoll + yawDeltaByYaw;\n    }\n    _getDeltaPitch(prvQ, curQ) {\n        return this._getRotationDelta(prvQ, curQ, ROTATE_CONSTANT.PITCH_DELTA);\n    }\n    _getRotationDelta(prevQ, curQ, rotateKind) {\n        const targetAxis = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(ROTATE_CONSTANT[rotateKind].targetAxis[0], ROTATE_CONSTANT[rotateKind].targetAxis[1], ROTATE_CONSTANT[rotateKind].targetAxis[2]);\n        const meshPoint = ROTATE_CONSTANT[rotateKind].meshPoint;\n        const prevQuaternion = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.clone(prevQ);\n        const curQuaternion = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.clone(curQ);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.normalize(prevQuaternion, prevQuaternion);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.normalize(curQuaternion, curQuaternion);\n        let prevPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, 1);\n        let curPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, 1);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(prevPoint, prevPoint, prevQuaternion);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(curPoint, curPoint, curQuaternion);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(targetAxis, targetAxis, curQuaternion);\n        const rotateDistance = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.dot(targetAxis, gl_matrix__WEBPACK_IMPORTED_MODULE_2__.cross(gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create(), prevPoint, curPoint));\n        const rotateDirection = rotateDistance > 0 ? 1 : -1;\n        // when counter clock wise, use vec3.fromValues(0,1,0)\n        // when clock wise, use vec3.fromValues(0,-1,0)\n        // const meshPoint1 = vec3.fromValues(0, 0, 0);\n        const meshPoint2 = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(meshPoint[0], meshPoint[1], meshPoint[2]);\n        let meshPoint3;\n        if (rotateKind !== ROTATE_CONSTANT.YAW_DELTA_BY_YAW) {\n            meshPoint3 = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, rotateDirection, 0);\n        } else {\n            meshPoint3 = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(rotateDirection, 0, 0);\n        }\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(meshPoint2, meshPoint2, curQuaternion);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(meshPoint3, meshPoint3, curQuaternion);\n        const vecU = meshPoint2;\n        const vecV = meshPoint3;\n        const vecN = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.cross(vecN, vecU, vecV);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.normalize(vecN, vecN);\n        const coefficientA = vecN[0];\n        const coefficientB = vecN[1];\n        const coefficientC = vecN[2];\n        // a point on the plane\n        curPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(meshPoint[0], meshPoint[1], meshPoint[2]);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(curPoint, curPoint, curQuaternion);\n        // a point should project on the plane\n        prevPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(meshPoint[0], meshPoint[1], meshPoint[2]);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(prevPoint, prevPoint, prevQuaternion);\n        // distance between prevPoint and the plane\n        let distance = Math.abs(prevPoint[0] * coefficientA + prevPoint[1] * coefficientB + prevPoint[2] * coefficientC);\n        const projectedPrevPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.subtract(projectedPrevPoint, prevPoint, gl_matrix__WEBPACK_IMPORTED_MODULE_2__.scale(gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create(), vecN, distance));\n        let trigonometricRatio = (projectedPrevPoint[0] * curPoint[0] + projectedPrevPoint[1] * curPoint[1] + projectedPrevPoint[2] * curPoint[2]) / (gl_matrix__WEBPACK_IMPORTED_MODULE_2__.length(projectedPrevPoint) * gl_matrix__WEBPACK_IMPORTED_MODULE_2__.length(curPoint));\n        // defensive block\n        if (trigonometricRatio > 1) {\n            trigonometricRatio = 1;\n        }\n        const theta = Math.acos(trigonometricRatio);\n        const crossVec = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.cross(gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create(), curPoint, projectedPrevPoint);\n        distance = coefficientA * crossVec[0] + coefficientB * crossVec[1] + coefficientC * crossVec[2];\n        let thetaDirection;\n        if (rotateKind !== ROTATE_CONSTANT.YAW_DELTA_BY_YAW) {\n            thetaDirection = distance > 0 ? 1 : -1;\n        } else {\n            thetaDirection = distance < 0 ? 1 : -1;\n        }\n        const deltaRadian = theta * thetaDirection * rotateDirection;\n        return deltaRadian * RAD_TO_DEG;\n    }\n    _extractPitchFromQuat(quaternion) {\n        const baseV = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, 1);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformQuat(baseV, baseV, quaternion);\n        return -1 * Math.atan2(baseV[1], Math.sqrt(Math.pow(baseV[0], 2) + Math.pow(baseV[2], 2)));\n    }\n    constructor(){\n        super();\n        this._onDeviceOrientation = (evt)=>{\n            const prevOrientation = this._orientation;\n            const { alpha, beta, gamma } = evt;\n            if (alpha == null || beta == null || gamma == null) return;\n            prevOrientation.alpha = alpha;\n            prevOrientation.beta = beta;\n            prevOrientation.gamma = gamma;\n            this._orientationUpdated = true;\n            if (this._needsCalibrate) {\n                this._needsCalibrate = false;\n                this._calibrateSensor();\n            }\n        };\n        this._updateScreenOrientation = ()=>{\n            if (window.screen && window.screen.orientation && window.screen.orientation.angle !== undefined) {\n                this._screenOrientation = screen.orientation.angle;\n            } else if (window.orientation !== undefined) {\n                this._screenOrientation = window.orientation >= 0 ? window.orientation : 360 + window.orientation;\n            } else {\n                this._screenOrientation = 0;\n            }\n        };\n        this.quaternion = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.create();\n        this._orientation = {\n            alpha: 0,\n            beta: 90,\n            gamma: 0\n        };\n        this._yawOrigin = 0;\n        this._yawOffset = 0;\n        this._orientationUpdated = false;\n        this._screenOrientation = 0;\n        this._needsCalibrate = true;\n        this._enabled = false;\n    }\n}\n/**\r\n * Camera's rotation control by gyroscope\r\n * @ko 자이로스코프를 이용한 회전 컨트롤\r\n * @since 4.0.0\r\n */ class GyroControl extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\r\n   * @copy CameraControl#enabled\r\n   */ get enabled() {\n        return this._input.enabled;\n    }\n    /**\r\n   * @hidden\r\n   */ get enableBlocked() {\n        return this._enableBlocked;\n    }\n    /**\r\n   * @copy CameraControl#animating\r\n   */ get animating() {\n        return this._input.enabled && this._input.orientationUpdated;\n    }\n    /**\r\n   * When `true`, ignore gyroscope's roll(z-axis rotation) value.\r\n   * :::caution\r\n   * Setting `false` will ignore camera's range limit.\r\n   * Options like {@link View360Options#yawRange}, {@link View360Options#pitchRange} are ignored, and {@link CylinderProjection} also can't force it's camera range limit.\r\n   * :::\r\n   * @ko `true`일 경우 자이로스코프 입력의 roll(z축 회전)값을 무시합니다.\r\n   * :::caution\r\n   * 이 값을 `false`로 설정할 경우 카메라 범위 제약을 무시합니다.\r\n   * {@link View360Options#yawRange}, {@link View360Options#pitchRange}와 같은 값은 무시되며, {@link CylinderProjection} 사용시에도 범위를 벗어날 수 있습니다.\r\n   * :::\r\n   * @default true\r\n   * @since 4.0.0\r\n   */ get ignoreRoll() {\n        return this._ignoreRoll;\n    }\n    set ignoreRoll(val) {\n        this._ignoreRoll = val;\n    }\n    /**\r\n   * Return availability of the gyroscope.\r\n   * :::caution\r\n   * This will always return false until user permission under environments like iOS which requires user permission when using gyroscope.\r\n   * :::\r\n   * @ko 자이로스코프 사용 가능 여부를 반환합니다.\r\n   * :::caution\r\n   * iOS와 같이 GyroScope 사용시 사용자 Permission을 요구하는 환경에서는 사용자 Permission을 받기 전까지 항상 `false`입니다.\r\n   * :::\r\n   * @example\r\n   * ```ts\r\n   * const gyroAvailable = await GyroControl.isAvailable();\r\n   * ```\r\n   */ static isAvailable() {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!DeviceMotionEvent) {\n                return false;\n            }\n            let onDeviceMotionChange;\n            const listenDeviceMotion = ()=>new Promise((res)=>{\n                    onDeviceMotionChange = (evt)=>{\n                        res(evt.rotationRate && evt.rotationRate.alpha != null);\n                    };\n                    window.addEventListener(EVENTS$1.DEVICE_MOTION, onDeviceMotionChange);\n                });\n            const timeout = ()=>new Promise((res)=>{\n                    setTimeout(()=>res(false), 1000);\n                });\n            return Promise.race([\n                listenDeviceMotion(),\n                timeout()\n            ]).then((available)=>{\n                window.removeEventListener(EVENTS$1.DEVICE_MOTION, onDeviceMotionChange);\n                return available;\n            });\n        });\n    }\n    /**\r\n   * Request user permission for gyroscope sensor.\r\n   * This can be used in environments like iOS which requires user permission when using gyroscope sensors.\r\n   * @ko 사용자의 sensor permission 취득을 요청합니다.\r\n   * iOS와 같이 gyroscope 사용시 사용자 Permission을 요구하는 환경에서 사용 가능합니다.\r\n   * @returns Whether the permission is granted {@ko 사용자 permission 취득 여부}\r\n   */ static requestSensorPermission() {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Request sensor permission, on iOS13+\n            if (sensorCanBeEnabledIOS()) {\n                return DeviceMotionEvent.requestPermission().then((permissionState)=>{\n                    return permissionState === \"granted\";\n                }).catch(()=>false);\n            }\n            return true;\n        });\n    }\n    /**\r\n   * @copy CameraControl#destroy\r\n   */ destroy() {\n        this.disable();\n        this._input.off();\n        this.off();\n    }\n    /**\r\n   * @hidden\r\n   */ update(camera, yaw, pitch, zoom) {\n        if (!this._ignoreRoll) {\n            this._updateQuaternion(camera, zoom);\n        } else {\n            this._updateYawPitch(camera, yaw, pitch, zoom);\n        }\n    }\n    /**\r\n   * @copy CameraControl#enable\r\n   */ enable() {\n        if (this._input.enabled) return;\n        this._input.enable();\n        this._enableBlocked = false;\n        this.trigger(CONTROL_EVENTS.ENABLE, {\n            control: this,\n            updateCursor: false\n        });\n    }\n    /**\r\n   * @copy CameraControl#disable\r\n   */ disable() {\n        if (!this._input.enabled) return;\n        this._input.disable();\n        this.trigger(CONTROL_EVENTS.DISABLE, {\n            updateCursor: false\n        });\n    }\n    /**\r\n   * @copy CameraControl#sync\r\n   */ sync() {}\n    _updateYawPitch(camera, yaw, pitch, zoom) {\n        const input = this._input;\n        if (!input.enabled) return;\n        const { yaw: yawDelta, pitch: pitchDelta } = input.collectDelta();\n        yaw.add(yawDelta);\n        pitch.add(pitchDelta);\n        camera.lookAt({\n            yaw: yaw.val,\n            pitch: pitch.val,\n            zoom\n        });\n    }\n    _updateQuaternion(camera, zoom) {\n        const input = this._input;\n        if (!input.enabled) return;\n        input.update();\n        camera.rotate(input.quaternion, zoom);\n    }\n    /**\r\n   * Create new GyroControl instance\r\n   * @ko GyroControl의 인스턴스를 생성합니다.\r\n   * @param enableBlocked - Whether to disable control on init {@ko 초기화 과정에서 컨트롤 활성화 여부}\r\n   * @param options - Options for control {@ko 컨트롤 옵션들}\r\n   */ constructor(enableBlocked, { ignoreRoll = true } = {}){\n        super();\n        this._enableBlocked = enableBlocked;\n        this._ignoreRoll = ignoreRoll;\n        this._input = new GyroInput();\n    }\n}\n/**\r\n * Panorama control for View360\r\n * @ko View360용 파노라마 컨트롤\r\n * @since 4.0.0\r\n */ class PanoControl {\n    /**\r\n   * @copy View360#useGrabCursor\r\n   */ get useGrabCursor() {\n        return this._useGrabCursor;\n    }\n    set useGrabCursor(val) {\n        if (val === this._useGrabCursor) return;\n        this._useGrabCursor = val;\n        if (val && this._enabled) {\n            this._setCursor(CURSOR.GRAB);\n        } else if (!val) {\n            this._setCursor(CURSOR.NONE);\n        }\n    }\n    /**\r\n   * @copy View360#disableContextMenu\r\n   */ get disableContextMenu() {\n        return this._disableContextMenu;\n    }\n    set disableContextMenu(val) {\n        if (val === this._disableContextMenu) return;\n        this._disableContextMenu = val;\n        if (val && this._enabled) {\n            this._blockContextMenu();\n        } else if (!val) {\n            this._restoreContextMenu();\n        }\n    }\n    /**\r\n   * @copy View360#disableContextMenu\r\n   */ get scrollable() {\n        return this._rotateControl.scrollable;\n    }\n    set scrollable(val) {\n        this._rotateControl.scrollable = val;\n    }\n    /**\r\n   * @copy View360#disableContextMenu\r\n   */ get wheelScrollable() {\n        return this._zoomControl.scrollable;\n    }\n    set wheelScrollable(val) {\n        this._zoomControl.scrollable = val;\n    }\n    /**\r\n   * When `true`, disables rotation slow-down by zoom-value.\r\n   * @ko `true`일 경우 줌 된 정도에 따라 회전속도를 늦추는 동작을 비활성화합니다.\r\n   * @since 4.0.0\r\n   */ get ignoreZoomScale() {\n        return this._ignoreZoomScale;\n    }\n    set ignoreZoomScale(val) {\n        this._ignoreZoomScale = val;\n    }\n    /**\r\n   * Whether the control is enabled or not\r\n   * @ko 컨트롤 활성화 여부를 가리키는 값\r\n   * @readonly\r\n   * @since 4.0.0\r\n   */ get enabled() {\n        return this._enabled;\n    }\n    /**\r\n   * @copy View360#rotate\r\n   */ get rotate() {\n        return this._rotateControl;\n    }\n    /**\r\n   * @copy View360#zoom\r\n   */ get zoom() {\n        return this._zoomControl;\n    }\n    /**\r\n   * @copy View360#gyro\r\n   */ get gyro() {\n        return this._gyroControl;\n    }\n    /**\r\n   * Whether one of the controls is animating at the moment\r\n   * @ko 현재 컨트롤 중 하나라도 동작중인지 여부를 나타내는 값\r\n   * @readonly\r\n   * @since 4.0.0\r\n   */ get animating() {\n        return this._rotateControl.animating || this._zoomControl.animating || this._gyroControl.animating;\n    }\n    /**\r\n   * Destroy the instance and remove all event listeners attached.\r\n   * This also will reset CSS cursor to initial.\r\n   * @ko 인스턴스를 삭제하고 부착된 모든 이벤트 리스너를 제거합니다.\r\n   * 또한, 캔버스에 적용된 CSS cursor도 제거합니다.\r\n   * @since 4.0.0\r\n   */ destroy() {\n        this.disable();\n        this._rotateControl.destroy();\n        this._zoomControl.destroy();\n        this._setCursor(CURSOR.NONE);\n    }\n    /**\r\n   * Resize control to match target size.\r\n   * @ko 컨트롤이 내부에 캐시하고 있는 크기값을 갱신합니다.\r\n   * @param width New width {@ko 변경된 너비}\r\n   * @param height New height {@ko 변경된 높이}\r\n   * @since 4.0.0\r\n   */ resize(width, height) {\n        const camera = this._camera;\n        this._rotateControl.resize(camera.fov, camera.aspect, width, height);\n    }\n    /**\r\n   * Enable this control and add event listeners.\r\n   * @ko 컨트롤을 활성화하고 이벤트 리스너들을 추가합니다.\r\n   * @since 4.0.0\r\n   */ enable() {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (this._enabled) return;\n            if (!this._rotateControl.enableBlocked) {\n                this._rotateControl.enable();\n            }\n            if (!this._zoomControl.enableBlocked) {\n                this._zoomControl.enable();\n            }\n            if (!this._gyroControl.enableBlocked) {\n                if (yield GyroControl.isAvailable()) {\n                    this._gyroControl.enable();\n                }\n            }\n            this.sync();\n            if (this._disableContextMenu) {\n                this._blockContextMenu();\n            }\n            this._enabled = true;\n        });\n    }\n    /**\r\n   * Disable this control and remove all event listeners\r\n   * @ko 컨트롤을 비활성화하고 모든 이벤트 리스너들을 제거합니다.\r\n   * @since 4.0.0\r\n   */ disable() {\n        if (!this._enabled) return;\n        this._rotateControl.disable();\n        this._zoomControl.disable();\n        this._gyroControl.disable();\n        this._restoreContextMenu();\n        this._enabled = false;\n    }\n    /**\r\n   * Update control by given deltaTime\r\n   * @ko 컨트롤을 주어진 시간만큼 업데이트합니다.\r\n   * @param delta Number of milisec to update {@ko 업데이트할 시간, 밀리초 단위}\r\n   * @since 4.0.0\r\n   * @internal\r\n   */ update(delta) {\n        const camera = this._camera;\n        const rotateControl = this._rotateControl;\n        const zoomControl = this._zoomControl;\n        const gyroControl = this._gyroControl;\n        zoomControl.update(delta);\n        const zoom = hfovToZoom(camera.fov, zoomControl.zoom);\n        // Slow down rotation on zoom-in\n        const zoomScale = this._ignoreZoomScale ? 1 : Math.max(zoom, 1);\n        rotateControl.setZoomScale(zoomScale);\n        rotateControl.updateRange(camera, zoom);\n        rotateControl.update(delta);\n        const yaw = rotateControl.yaw;\n        const pitch = rotateControl.pitch;\n        if (gyroControl.enabled) {\n            gyroControl.update(camera, yaw, pitch, zoom);\n        } else {\n            camera.lookAt({\n                yaw: yaw.val,\n                pitch: pitch.val,\n                zoom\n            });\n        }\n    }\n    /**\r\n   * Synchronize this control's state to current camera state\r\n   * @ko 컨트롤을 카메라의 현재 상태와 동기화합니다.\r\n   * @since 4.0.0\r\n   */ sync() {\n        const camera = this._camera;\n        this._zoomControl.sync(camera);\n        this._rotateControl.sync(camera);\n    }\n    _blockContextMenu() {\n        const el = this._controlEl;\n        el.addEventListener(EVENTS$1.CONTEXT_MENU, this._preventContextMenu);\n    }\n    _restoreContextMenu() {\n        const el = this._controlEl;\n        el.removeEventListener(EVENTS$1.CONTEXT_MENU, this._preventContextMenu);\n    }\n    _setCursor(newCursor) {\n        if (!this._useGrabCursor && newCursor !== CURSOR.NONE) return;\n        const targetEl = this._controlEl;\n        targetEl.style.cursor = newCursor;\n    }\n    _bindEvents() {\n        const rotateControl = this._rotateControl;\n        const zoomControl = this._zoomControl;\n        rotateControl.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        rotateControl.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n        rotateControl.on(CONTROL_EVENTS.ENABLE, this._onEnable);\n        rotateControl.on(CONTROL_EVENTS.DISABLE, this._onDisable);\n        zoomControl.on(CONTROL_EVENTS.ENABLE, this._onEnable);\n        zoomControl.on(CONTROL_EVENTS.DISABLE, this._onDisable);\n        this._camera.on(CAMERA_EVENTS.ANIMATION_END, this._onCameraAnimationEnd);\n    }\n    /**\r\n   * Create new instance.\r\n   * @ko 새 인스턴스를 생성합니다.\r\n   * @param element - Canvas element {@ko 캔버스 엘리먼트}\r\n   * @param camera - Camera instance {@ko Camera 인스턴스}\r\n   * @param options - Options for PanoControl {@ko PanoControl 옵션들}\r\n   */ constructor(element, camera, { useGrabCursor, scrollable, wheelScrollable, disableContextMenu, rotate, zoom, gyro }){\n        this._preventContextMenu = (evt)=>{\n            evt.preventDefault();\n        };\n        this._onInputStart = (evt)=>{\n            if (this._useGrabCursor && !evt.isKeyboard) {\n                this._setCursor(CURSOR.GRABBING);\n            }\n        };\n        this._onInputEnd = (evt)=>{\n            if (this._useGrabCursor && !evt.isKeyboard) {\n                this._setCursor(CURSOR.GRAB);\n            }\n        };\n        this._onEnable = (param)=>{\n            let { control, updateCursor } = param;\n            if (updateCursor && this._useGrabCursor) {\n                this._setCursor(CURSOR.GRAB);\n            }\n            control.sync(this._camera);\n        };\n        this._onDisable = (param)=>{\n            let { updateCursor } = param;\n            if (updateCursor) {\n                this._setCursor(CURSOR.NONE);\n            }\n        };\n        this._onCameraAnimationEnd = (param)=>{\n            let { animation } = param;\n            animation.getFinishPromise().then(()=>{\n                this.sync();\n            });\n        };\n        // Bind Options\n        this._useGrabCursor = useGrabCursor;\n        this._disableContextMenu = disableContextMenu;\n        // Set internal values\n        this._camera = camera;\n        this._controlEl = element;\n        this._ignoreZoomScale = false;\n        this._enabled = false;\n        this._rotateControl = new RotateControl(element, !rotate, getObjectOption(rotate));\n        this._zoomControl = new ZoomControl(element, !zoom, getObjectOption(zoom));\n        this._gyroControl = new GyroControl(!gyro, getObjectOption(gyro));\n        this._rotateControl.scrollable = scrollable;\n        this._zoomControl.scrollable = wheelScrollable;\n        this._bindEvents();\n    }\n}\n/**\r\n * @hidden\r\n */ class Texture {\n    destroy() {\n    // DO_NOTHING\n    }\n    isVideo() {\n        return false;\n    }\n    isCube() {\n        return false;\n    }\n    constructor({ width, height, flipY }){\n        this.width = width;\n        this.height = height;\n        this.flipY = flipY;\n        this.wrapS = WebGLRenderingContext.CLAMP_TO_EDGE;\n        this.wrapT = WebGLRenderingContext.CLAMP_TO_EDGE;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @hidden\r\n */ class Texture2D extends Texture {\n    constructor({ source, width, height, flipY }){\n        super({\n            width,\n            height,\n            flipY\n        });\n        this.source = source;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @hidden\r\n */ class TextureVideo extends Texture2D {\n    destroy() {\n        const video = this.source;\n        video.pause();\n        video.removeAttribute(\"src\");\n        video.load();\n    }\n    isVideo() {\n        return true;\n    }\n    isPaused() {\n        const video = this.source;\n        return video.paused || video.ended || video.readyState <= 2;\n    }\n    hasAudio() {\n        const video = this.source;\n        if (video.audioTracks) {\n            return video.audioTracks.length > 0;\n        }\n        if (video.webkitAudioDecodedByteCount != null) {\n            return video.webkitAudioDecodedByteCount > 0;\n        }\n        if (video.mozHasAudio != null) {\n            return video.mozHasAudio;\n        }\n        // We don't know whether the video has audio or not, return true\n        return true;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @hidden\r\n */ class TextureCube extends Texture {\n    isCube() {\n        return true;\n    }\n    constructor({ sources, width, height, flipY }){\n        super({\n            width,\n            height,\n            flipY\n        });\n        this.sources = sources;\n    }\n}\n/**\r\n * @hidden\r\n */ class TextureLoader {\n    load(src, video) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (video) {\n                return this.loadVideo(src, getObjectOption(video));\n            } else {\n                if (Array.isArray(src) && src.length > 1) {\n                    return this.loadCubeImage(src);\n                } else {\n                    const imgSrc = Array.isArray(src) ? src[0] : src;\n                    return this.loadImage(imgSrc);\n                }\n            }\n        });\n    }\n    loadImage(src) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const images = this._toImageArray(src);\n            return this._load(images, (resolve)=>{\n                const image = images[0];\n                resolve(new Texture2D({\n                    source: image,\n                    width: image.naturalWidth,\n                    height: image.naturalHeight,\n                    flipY: true\n                }));\n            });\n        });\n    }\n    loadCubeImage(src) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const images = this._toImageArray(src);\n            return this._load(images, (resolve)=>{\n                resolve(new TextureCube({\n                    sources: images,\n                    width: images[0].naturalWidth,\n                    height: images[0].naturalHeight,\n                    flipY: false\n                }));\n            });\n        });\n    }\n    loadVideo(src, videoConfig) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const config = Object.assign({\n                autoplay: true,\n                muted: true,\n                loop: false,\n                volume: 1\n            }, videoConfig);\n            const video = this._toVideoElement(src, config);\n            return this._load([\n                video\n            ], (resolve)=>{\n                const { autoplay, muted } = config;\n                video.currentTime = 0;\n                if (autoplay && muted) {\n                    video.play().catch(()=>void 0);\n                }\n                resolve(new TextureVideo({\n                    source: video,\n                    width: video.videoWidth,\n                    height: video.videoHeight,\n                    flipY: true\n                }));\n            });\n        });\n    }\n    _load(content, onLoad) {\n        const loader = this._loadChecker;\n        return new Promise((resolve, reject)=>{\n            loader.once(\"ready\", (evt)=>{\n                if (evt.errorCount > 0) return;\n                onLoad(resolve);\n            });\n            loader.once(\"error\", reject);\n            loader.check(content);\n        });\n    }\n    _toImageArray(src) {\n        const srcs = Array.isArray(src) ? src : [\n            src\n        ];\n        return srcs.map((source)=>{\n            if (isString(source)) {\n                const imgEl = new Image();\n                imgEl.crossOrigin = \"anonymous\";\n                imgEl.src = source;\n                return imgEl;\n            } else {\n                return source;\n            }\n        });\n    }\n    _toVideoElement(src, param) {\n        let { muted, loop, volume } = param;\n        if (src instanceof HTMLVideoElement) {\n            return src;\n        }\n        const video = document.createElement(\"video\");\n        video.crossOrigin = \"anonymous\";\n        video.playsInline = true;\n        video.setAttribute(\"webkit-playsinline\", \"\");\n        video.muted = muted;\n        video.volume = volume;\n        video.loop = loop;\n        if (Array.isArray(src)) {\n            src.forEach((source)=>this._appendSourceElement(video, source));\n        } else {\n            this._appendSourceElement(video, src);\n        }\n        const sourceCount = video.querySelectorAll(\"source\").length;\n        if (sourceCount > 0 && video.readyState < 1) {\n            video.load();\n        }\n        return video;\n    }\n    _appendSourceElement(video, src) {\n        if (src instanceof HTMLSourceElement) {\n            return src;\n        }\n        const sourceEl = document.createElement(\"source\");\n        sourceEl.src = src;\n        video.appendChild(sourceEl);\n    }\n    constructor(){\n        this._loadChecker = new _egjs_imready__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @internal\r\n */ class FrameAnimator {\n    start(callback) {\n        const context = this._context;\n        // No context / callback set\n        if (!context || !callback) return;\n        // Animation already started\n        if (this._rafId >= 0 || this._rafTimer >= 0) return;\n        const loop = (_time, frame)=>{\n            const time = Date.now();\n            const delta = Math.min(time - this._lastUpdateTime, this.maxDeltaTime * 1000);\n            callback(delta, frame);\n            this._lastUpdateTime = time;\n            this._rafId = context.requestAnimationFrame(loop);\n        };\n        this._lastUpdateTime = Date.now();\n        this._rafId = context.requestAnimationFrame(loop);\n    }\n    stop() {\n        if (this._rafId >= 0) {\n            this._context.cancelAnimationFrame(this._rafId);\n        }\n        if (this._rafTimer >= 0) {\n            clearTimeout(this._rafTimer);\n        }\n        this._rafId = -1;\n        this._rafTimer = -1;\n    }\n    changeContext(context) {\n        this.stop();\n        this._context = context;\n    }\n    /** */ constructor(maxDeltaTime, context = window){\n        this.maxDeltaTime = maxDeltaTime;\n        this._context = context;\n        this._rafId = -1;\n        this._rafTimer = -1;\n        this._lastUpdateTime = -1;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Automatic resizer that uses both ResizeObserver and window resize event\r\n */ class AutoResizer {\n    get useResizeObserver() {\n        return this._useResizeObserver;\n    }\n    /**\r\n   * Returns whether AutoResizer is enabled\r\n   */ get enabled() {\n        return this._enabled;\n    }\n    /**\r\n   * Enable resizer\r\n   */ enable(element) {\n        if (this._enabled) {\n            this.disable();\n        }\n        if (this._useResizeObserver && !!window.ResizeObserver) {\n            const bbox = element.getBoundingClientRect();\n            const resizeImmediate = bbox.width !== 0 || bbox.height !== 0;\n            const resizeObserver = new ResizeObserver(resizeImmediate ? this._skipFirstResize : this._onResize);\n            resizeObserver.observe(element);\n            this._resizeObserver = resizeObserver;\n        } else {\n            window.addEventListener(EVENTS$1.RESIZE, this._onResize);\n        }\n        this._enabled = true;\n        return this;\n    }\n    /**\r\n   * Disable resizer\r\n   */ disable() {\n        if (!this._enabled) return this;\n        const resizeObserver = this._resizeObserver;\n        if (resizeObserver) {\n            resizeObserver.disconnect();\n            this._resizeObserver = null;\n        } else {\n            window.removeEventListener(EVENTS$1.RESIZE, this._onResize);\n        }\n        this._enabled = false;\n        return this;\n    }\n    /** */ constructor(useResizeObserver, onResize){\n        // eslint-disable-next-line @typescript-eslint/member-ordering\n        this._skipFirstResize = (()=>{\n            let isFirstResize = true;\n            return ()=>{\n                if (isFirstResize) {\n                    isFirstResize = false;\n                    return;\n                }\n                this._onResize();\n            };\n        })();\n        this._useResizeObserver = useResizeObserver;\n        this._enabled = false;\n        this._resizeObserver = null;\n        this._onResize = onResize;\n    }\n}\n/**\r\n * A manager class for autoplay feature.\r\n * @ko Autoplay 기능의 매니저 클래스.\r\n * @since 4.0.0\r\n */ class Autoplay {\n    /**\r\n   * Whether autoplay is enabled or not\r\n   * @ko 자동재생 활성화 여부를 나타내는 값\r\n   * @readonly\r\n   * @since 4.0.0\r\n   */ get enabled() {\n        return this._enabled;\n    }\n    /**\r\n   * @hidden\r\n   */ get enableBlocked() {\n        return this._enableBlocked;\n    }\n    /**\r\n   * Whether autoplay is updating the camera at the moment\r\n   * @ko 현재 자동재생이 동작중인지 여부를 나타내는 값\r\n   * @readonly\r\n   * @since 4.0.0\r\n   */ get playing() {\n        return this._enabled && !this._interrupted;\n    }\n    /**\r\n   * Reactivation delay after mouse input in milisecond.\r\n   * @ko 재활성화되기까지의 시간 (밀리초 단위)\r\n   * @default 2000\r\n   * @since 4.0.0\r\n   */ get delay() {\n        return this._delay;\n    }\n    set delay(val) {\n        this._delay = val;\n    }\n    /**\r\n   * Reactivation delay after mouse leave when using {@link AutoplayOptions#pauseOnHover}\r\n   * @ko {@link AutoplayOptions#pauseOnHover} 사용시 마우스가 캔버스 영역을 떠난 뒤 자동재생이 다시 활성화되기까지의 시간\r\n   * @default 0\r\n   * @since 4.0.0\r\n   */ get delayOnMouseLeave() {\n        return this._delayOnMouseLeave;\n    }\n    set delayOnMouseLeave(val) {\n        this._delayOnMouseLeave = val;\n    }\n    /**\r\n   * Y-axis(yaw) rotation speed\r\n   * @ko Y-축 회전(yaw)의 속도\r\n   * @default 1\r\n   * @since 4.0.0\r\n   */ get speed() {\n        return this._speed;\n    }\n    set speed(val) {\n        this._speed = val;\n    }\n    /**\r\n   * Whether to pause rotation on mouse hover\r\n   * @ko 마우스가 캔버스 영역에 들어왔을 때 자동재생을 정지할지 여부\r\n   * @default false\r\n   * @since 4.0.0\r\n   */ get pauseOnHover() {\n        return this._pauseOnHover;\n    }\n    set pauseOnHover(val) {\n        this._pauseOnHover = val;\n    }\n    /**\r\n   * Whether user can interrupt the rotation with click/wheel input\r\n   * @ko 클릭이나 휠같은 사용자 인터랙션시 자동재생을 멈출지 여부\r\n   * @default true\r\n   * @since 4.0.0\r\n   */ get canInterrupt() {\n        return this._canInterrupt;\n    }\n    set canInterrupt(val) {\n        this._canInterrupt = val;\n    }\n    /**\r\n   * Whether to disable autoplay on user interrupt\r\n   * @ko 사용자 동작에 의해 자동재생이 정지할 때, {@link Autoplay#disable}을 호출하여 자동재생을 영구히 정지할지 여부\r\n   * @default false\r\n   * @since 4.0.0\r\n   */ get disableOnInterrupt() {\n        return this._disableOnInterrupt;\n    }\n    set disableOnInterrupt(val) {\n        this._disableOnInterrupt = val;\n    }\n    /**\r\n   * Destroy the instance and remove all event listeners attached\r\n   * @ko 인스턴스를 제거하고 연결된 모든 이벤트 핸들러를 삭제합니다.\r\n   * @since 4.0.0\r\n   */ destroy() {\n        this.disable();\n    }\n    /**\r\n   * Rotate camera by given deltaTime\r\n   * @ko 주어진 deltaTime만큼 카메라를 회전시킵니다.\r\n   * @param deltaTime - Number of milisec to update {@ko 업데이트할 시간, 밀리초 단위}\r\n   * @since 4.0.0\r\n   */ update(deltaTime) {\n        if (!this._enabled) return;\n        if (this._interrupted) {\n            if (this._disableOnInterrupt) {\n                this.disable();\n            }\n            return;\n        }\n        const camera = this._camera;\n        const delta = -this._speed * deltaTime / 100;\n        camera.yaw = circulate(camera.yaw + delta, 0, 360);\n    }\n    /**\r\n   * Enable autoplay and add event listeners.\r\n   * @ko 자동재생을 활성화하고 이벤트리스너들을 추가합니다.\r\n   * @since 4.0.0\r\n   */ enable() {\n        const control = this._control;\n        const element = this._element;\n        if (this._enabled || control.gyro.enabled) return;\n        control.rotate.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        control.rotate.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n        control.zoom.on(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        control.zoom.on(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n        control.gyro.on(CONTROL_EVENTS.ENABLE, this._onGyroEnable);\n        element.addEventListener(EVENTS$1.MOUSE_ENTER, this._onMouseEnter, false);\n        element.addEventListener(EVENTS$1.MOUSE_LEAVE, this._onMouseLeave, false);\n        this._enabled = true;\n        this._enableBlocked = false;\n    }\n    /**\r\n   * Enable autoplay after current `delay` value.\r\n   * @ko 현재의 `delay`값만큼 시간이 지난 다음에 자동재생을 활성화합니다.\r\n   * @since 4.0.0\r\n   */ enableAfterDelay() {\n        this.enable();\n        this._interrupted = true;\n        this._setUninterruptedAfterDelay(this._delay);\n    }\n    /**\r\n   * Disable autoplay and remove all event handlers.\r\n   * @ko 자동재생을 비활성화하고 모든 이벤트 핸들러를 제거합니다.\r\n   * @since 4.0.0\r\n   */ disable() {\n        if (!this._enabled) return;\n        const control = this._control;\n        const element = this._element;\n        control.rotate.off(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        control.rotate.off(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n        control.zoom.off(CONTROL_EVENTS.INPUT_START, this._onInputStart);\n        control.zoom.off(CONTROL_EVENTS.INPUT_END, this._onInputEnd);\n        control.gyro.off(CONTROL_EVENTS.ENABLE, this._onGyroEnable);\n        element.removeEventListener(EVENTS$1.MOUSE_ENTER, this._onMouseEnter, false);\n        element.removeEventListener(EVENTS$1.MOUSE_LEAVE, this._onMouseLeave, false);\n        this._enabled = false;\n        this._interrupted = false;\n        this._hovering = false;\n        this._clearTimeout();\n    }\n    _setUninterruptedAfterDelay(delay) {\n        if (this._hovering) return;\n        this._clearTimeout();\n        if (delay > 0) {\n            this._interruptionTimer = window.setTimeout(()=>{\n                this._interrupted = false;\n                this._interruptionTimer = -1;\n            }, delay);\n        } else {\n            this._interrupted = false;\n            this._interruptionTimer = -1;\n        }\n    }\n    _clearTimeout() {\n        if (this._interruptionTimer >= 0) {\n            window.clearTimeout(this._interruptionTimer);\n            this._interruptionTimer = -1;\n        }\n    }\n    /**\r\n   * Create new AutoPlayer instance\r\n   * @param camera - Instance of the {@link Camera} {@ko Camera의 인스턴스}\r\n   * @param element - Canvas element {@ko 캔버스 엘리먼트}\r\n   * @param options - Autoplay options {@ko 자동재생 옵션들}\r\n   * @since 4.0.0\r\n   */ constructor(viewer, element, options){\n        this._onInputStart = ()=>{\n            if (!this._canInterrupt) return;\n            this._interrupted = true;\n            this._clearTimeout();\n        };\n        this._onInputEnd = ()=>{\n            this._setUninterruptedAfterDelay(this._delay);\n        };\n        this._onGyroEnable = ()=>{\n            this.disable();\n        };\n        this._onMouseEnter = ()=>{\n            if (!this._pauseOnHover) return;\n            this._interrupted = true;\n            this._hovering = true;\n        };\n        this._onMouseLeave = ()=>{\n            if (!this._pauseOnHover) return;\n            this._hovering = false;\n            this._setUninterruptedAfterDelay(this._delayOnMouseLeave);\n        };\n        this._camera = viewer.camera;\n        this._control = viewer.control;\n        this._element = element;\n        this._enabled = false;\n        this._interrupted = false;\n        this._interruptionTimer = -1;\n        this._hovering = false;\n        const { delay = 2000, delayOnMouseLeave = 0, speed = 1, pauseOnHover = false, canInterrupt = true, disableOnInterrupt = false } = getObjectOption(options);\n        this._enableBlocked = !options;\n        this._delay = delay;\n        this._delayOnMouseLeave = delayOnMouseLeave;\n        this._speed = speed;\n        this._pauseOnHover = pauseOnHover;\n        this._canInterrupt = canInterrupt;\n        this._disableOnInterrupt = disableOnInterrupt;\n    }\n}\n/**\r\n * WebXR manager class\r\n * @ko WebXR 매니저 클래스\r\n * @since 4.0.0\r\n */ class XRManager extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\r\n   * Returns WebXR availability.\r\n   * @ko WebXR 사용 가능 여부를 반환합니다.\r\n   * @since 4.0.0\r\n   */ isAvailable() {\n        return __awaiter(this, void 0, void 0, function*() {\n            // eslint-disable-next-line compat/compat\n            const xr = window.navigator.xr;\n            if (!xr) return false;\n            return xr.isSessionSupported(SESSION_VR).then((available)=>{\n                return available;\n            }).catch(()=>{\n                return false;\n            });\n        });\n    }\n    /**\r\n   * Enter VR session\r\n   * @ko VR 세션에 진입합니다.\r\n   * @since 4.0.0\r\n   */ enter() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const ctx = this._ctx;\n            // eslint-disable-next-line compat/compat\n            const xr = window.navigator.xr;\n            if (!xr) return;\n            yield GyroControl.requestSensorPermission();\n            const options = Object.assign({\n                requiredFeatures: [\n                    XR_REFERENCE_SPACE\n                ]\n            }, this._options);\n            yield ctx.makeXRCompatible();\n            const session = yield xr.requestSession(SESSION_VR, options);\n            ctx.bindXRLayer(session);\n            const refSpace = yield session.requestReferenceSpace(XR_REFERENCE_SPACE);\n            this._setSession(session, refSpace);\n            this.trigger(EVENTS.VR_START, {\n                session\n            });\n        });\n    }\n    /**\r\n   * Exit VR session\r\n   * @ko VR 세션에서 나갑니다.\r\n   * @since 4.0.0\r\n   */ exit() {\n        const xrSession = this._xrSession;\n        if (xrSession) {\n            xrSession.end().catch(()=>void 0);\n        }\n        this._xrSession = null;\n        this._xrRefSpace = null;\n    }\n    /**\r\n   * @hidden\r\n   */ canRender(frame) {\n        const refSpace = this._xrRefSpace;\n        if (!refSpace) return false;\n        const pose = frame.getViewerPose(refSpace);\n        return !!pose;\n    }\n    /**\r\n   * @hidden\r\n   */ getEyeParams(frame) {\n        const session = frame.session;\n        const pose = frame.getViewerPose(this._xrRefSpace);\n        if (!pose) return null;\n        const glLayer = session.renderState.baseLayer;\n        if (!glLayer) return null;\n        return pose.views.map((view)=>{\n            const viewport = glLayer.getViewport(view);\n            const vMatrix = view.transform.inverse.matrix;\n            return {\n                viewport,\n                vMatrix,\n                pMatrix: view.projectionMatrix\n            };\n        });\n    }\n    _setSession(session, refSpace) {\n        this._xrSession = session;\n        this._xrRefSpace = refSpace;\n        session.addEventListener(EVENTS$1.XR_END, this._onSessionEnd);\n    }\n    /**\r\n   * Create new instance.\r\n   * 새 인스턴스를 생성합니다.\r\n   * @param ctx - Instance of WebGL context helper {@ko WebGL 콘텍스트 헬퍼의 인스턴스}\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor(ctx, options = {}){\n        super();\n        /**\r\n     * Destroy instance and end XR session if there was any.\r\n     * @ko 인스턴스를 제거하고, XR 세션이 존재할 경우 종료합니다.\r\n     * @since 4.0.0\r\n     */ this.destroy = ()=>{\n            this.exit();\n            this.off();\n        };\n        this._onSessionEnd = ()=>{\n            this.exit();\n            this.trigger(EVENTS.VR_END);\n        };\n        this._xrSession = null;\n        this._xrRefSpace = null;\n        this._ctx = ctx;\n        this._options = options;\n    }\n}\n/**\r\n * Hotspot data\r\n * @ko 핫스팟 데이터\r\n * @since 4.0.0\r\n */ class Hotspot {\n    constructor(element, position){\n        this.element = element;\n        this.position = position;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Hotspot renderer\r\n * @ko Hotspot 렌더러\r\n * @since 4.0.0\r\n */ class HotspotRenderer {\n    /**\r\n   * Refresh hotspots by collecting hotspot elements from current hotspot root element\r\n   * @ko 현재 핫스팟 루트 엘리먼트 내에서 핫스팟 엘리먼트들을 수집하여 갱신합니다.\r\n   * @throws {ERROR_CODES.INSUFFICIENT_ARGS} if data-position doesn't include all x, y, z values {@ko data-position이 x, y, z좌표를 전부 포함하고 있지 않을 때}\r\n   */ refresh() {\n        const container = this._containerEl;\n        if (!container) return;\n        const hotspotEls = [].slice.apply(container.querySelectorAll(\".\".concat(DEFAULT_CLASS.HOTSPOT)));\n        this._hotspots = hotspotEls.map((el)=>this._parseHotspot(el));\n    }\n    /**\r\n   * Render hotspots\r\n   * @ko 핫스팟들을 렌더링합니다.\r\n   * @param camera - Instance of Camera {@ko Camera의 인스턴스}\r\n   */ render(camera) {\n        const hotspots = this._hotspots;\n        const halfWidth = this._renderer.width * 0.5;\n        const halfHeight = this._renderer.height * 0.5;\n        const zoom = camera.zoom;\n        const centerTransform = \"translate(-50%, -50%)\";\n        const zoomTransform = this._zoom ? \"scale(\".concat(zoom, \")\") : \"\";\n        hotspots.forEach((hotspot)=>{\n            const position = hotspot.position;\n            const relPos = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\n            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.copy(relPos, position);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformMat4(relPos, relPos, camera.viewMatrix);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.transformMat4(relPos, relPos, camera.projectionMatrix);\n            if (relPos[2] > 1 || relPos[2] < 0) {\n                hotspot.element.classList.remove(DEFAULT_CLASS.HOTSPOT_VISIBLE);\n                return;\n            }\n            const screenPos = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.fromValues(relPos[0] * halfWidth + halfWidth, -relPos[1] * halfHeight + halfHeight);\n            hotspot.element.classList.add(DEFAULT_CLASS.HOTSPOT_VISIBLE);\n            hotspot.element.style.transform = [\n                centerTransform,\n                \"translate(\".concat(screenPos[0], \"px, \").concat(screenPos[1], \"px)\"),\n                zoomTransform\n            ].join(\" \");\n        });\n    }\n    _parseHotspot(element) {\n        const yawStr = element.dataset.yaw;\n        const pitchStr = element.dataset.pitch;\n        const positionStr = element.dataset.position;\n        if (yawStr || pitchStr) {\n            const yaw = yawStr ? parseFloat(yawStr) : 0;\n            const pitch = pitchStr ? parseFloat(pitchStr) : 0;\n            const position = this._yawPitchToVec3(yaw, pitch);\n            return new Hotspot(element, position);\n        } else if (positionStr) {\n            const pos = positionStr.split(\" \").map((val)=>parseFloat(val));\n            if (pos.length < 3) {\n                throw new View360Error(ERROR.MESSAGES.INSUFFICIENT_ARGS(positionStr, 'hotspot attribute \"data-position\"'), ERROR.CODES.INSUFFICIENT_ARGS);\n            }\n            return new Hotspot(element, gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(pos[0], pos[1], pos[2]));\n        } else {\n            // Place hotspot at yaw: 0, pitch: 0\n            const defaultPos = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, -1);\n            return new Hotspot(element, defaultPos);\n        }\n    }\n    _yawPitchToVec3(yaw, pitch) {\n        const yawRad = yaw * DEG_TO_RAD;\n        const pitchRad = pitch * DEG_TO_RAD;\n        const position = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\n        position[1] = Math.sin(pitchRad);\n        position[2] = Math.cos(pitchRad);\n        position[0] = position[2] * Math.sin(-yawRad);\n        position[2] = -position[2] * Math.cos(-yawRad);\n        return position;\n    }\n    /**\r\n   * Create new instance\r\n   * @ko 새 인스턴스를 생성합니다.\r\n   * @param rootEl - Container element for hotspots {@ko 핫스팟들의 컨테이너 엘리먼트}\r\n   * @param renderer - instance of WebGLRenderer {@ko WebGLRenderer의 인스턴스}\r\n   * @param options - Hotspot options {@ko Hotspot 옵션들 }\r\n   */ constructor(rootEl, renderer, { zoom = false }){\n        this._containerEl = getNullableElement(\".\".concat(DEFAULT_CLASS.HOTSPOT_CONTAINER), rootEl);\n        this._renderer = renderer;\n        this._hotspots = [];\n        this._zoom = zoom;\n    }\n}\n/**\r\n * @hidden\r\n */ class VertexArrayObject {\n    get count() {\n        return this.geometry.indicies.count;\n    }\n    constructor(obj, geometry, buffers){\n        this.obj = obj;\n        this.geometry = geometry;\n        this.buffers = buffers;\n    }\n}\n/**\r\n * @hidden\r\n */ class WebGLContext {\n    get canvas() {\n        return this._canvas;\n    }\n    get maxTextureSize() {\n        return this._maxTextureSize;\n    }\n    get isWebGL2() {\n        return this._isWebGL2;\n    }\n    get supportVAO() {\n        return this._isWebGL2 || !!this._extensions.vao;\n    }\n    get lost() {\n        return this._contextLost;\n    }\n    get debug() {\n        return this._debug;\n    }\n    init() {\n        const canvas = this._canvas;\n        const { gl, isWebGL2 } = this._getContext(canvas);\n        this._gl = gl;\n        this._maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        this._isWebGL2 = isWebGL2;\n        if (!this._isWebGL2) {\n            this._extensions.vao = gl.getExtension(\"OES_vertex_array_object\");\n        }\n        this._extensions.loseContext = gl.getExtension(\"WEBGL_lose_context\");\n        canvas.addEventListener(EVENTS$1.CONTEXT_LOST, this._onContextLost);\n        canvas.addEventListener(EVENTS$1.CONTEXT_RESTORED, this._onContextRestore);\n    // gl.enable(gl.DEPTH_TEST);\n    }\n    destroy() {\n        const gl = this._gl;\n        const canvas = this._canvas;\n        if (gl) {\n            // gl is not defined when destroy is called before init\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        }\n        canvas.removeEventListener(EVENTS$1.CONTEXT_LOST, this._onContextLost);\n        canvas.removeEventListener(EVENTS$1.CONTEXT_RESTORED, this._onContextRestore);\n    }\n    forceLoseContext() {\n        const extension = this._extensions.loseContext;\n        if (!extension) return;\n        extension.loseContext();\n    }\n    forceRestoreContext() {\n        const extension = this._extensions.loseContext;\n        if (!extension) return;\n        extension.restoreContext();\n    }\n    clear() {\n        const gl = this._gl;\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    resize() {\n        const gl = this._gl;\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    viewport(x, y, width, height) {\n        const gl = this._gl;\n        gl.viewport(x, y, width, height);\n    }\n    createVAO(geometry, shaderProgram) {\n        const nativeVAO = this._createNativeVAO();\n        const vao = new VertexArrayObject(nativeVAO, geometry, {\n            indicies: this._createBuffer(),\n            position: this._createBuffer(),\n            uv: this._createBuffer()\n        });\n        if (nativeVAO) {\n            this._bindNativeVAO(nativeVAO);\n            this._supplyGeometryData(vao, shaderProgram);\n            this._bindNativeVAO(null);\n            this._unbindBuffers();\n        }\n        return vao;\n    }\n    draw(vao, shaderProgram) {\n        const gl = this._gl;\n        if (vao.obj) {\n            this._bindNativeVAO(vao.obj);\n        } else {\n            this._supplyGeometryData(vao, shaderProgram);\n        }\n        gl.drawElements(gl.TRIANGLES, vao.count, gl.UNSIGNED_SHORT, 0);\n        if (vao.obj) {\n            this._bindNativeVAO(null);\n        } else {\n            this._unbindBuffers();\n        }\n    }\n    releaseVAO(vao) {\n        if (vao.obj) {\n            this._deleteNativeVAO(vao.obj);\n        }\n        this._deleteBuffer(vao.buffers.indicies);\n        this._deleteBuffer(vao.buffers.position);\n        this._deleteBuffer(vao.buffers.uv);\n    }\n    getUniformLocations(program, uniforms) {\n        const gl = this._gl;\n        const uniformLocations = Object.keys(uniforms).reduce((locations, key)=>{\n            locations[key] = gl.getUniformLocation(program, key);\n            return locations;\n        }, {});\n        return Object.assign(Object.assign({}, this._getCommonUniformLocations(program)), uniformLocations);\n    }\n    updateCommonUniforms(entity, camera, shaderProgram) {\n        const gl = this._gl;\n        const uniformLocations = shaderProgram.uniformLocations;\n        // We're using \"matrix\"(=local matrix) here for efficiency\n        // As projection doesn't require world matrix, as it doesn't have any parent or child\n        const matrix = entity.matrix;\n        const mvMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_3__.create();\n        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.multiply(mvMatrix, camera.viewMatrix, matrix);\n        gl.uniformMatrix4fv(uniformLocations.uMVMatrix, false, mvMatrix);\n        gl.uniformMatrix4fv(uniformLocations.uPMatrix, false, camera.projectionMatrix);\n    }\n    updateVRUniforms(shaderProgram, mvMatrix, pMatrix, eyeIndex) {\n        const gl = this._gl;\n        const uniformLocations = shaderProgram.uniformLocations;\n        gl.uniformMatrix4fv(uniformLocations.uMVMatrix, false, mvMatrix);\n        gl.uniformMatrix4fv(uniformLocations.uPMatrix, false, pMatrix);\n        if (uniformLocations.uEye) {\n            gl.uniform1f(uniformLocations.uEye, eyeIndex);\n        }\n    }\n    updateUniforms(shaderProgram) {\n        const gl = this._gl;\n        const uniforms = shaderProgram.uniforms;\n        const uniformLocations = shaderProgram.uniformLocations;\n        for(const key in uniforms){\n            const uniform = uniforms[key];\n            const location = uniformLocations[key];\n            if (!uniform) continue;\n            if (uniform.needsUpdate) {\n                uniform.update(gl, location, this._isWebGL2);\n            }\n        }\n    }\n    releaseShaderResources(shaderProgram) {\n        const gl = this._gl;\n        const uniforms = shaderProgram.uniforms;\n        for(const key in uniforms){\n            const uniform = uniforms[key];\n            if (!uniform) continue;\n            if (uniform.needsUpdate) {\n                uniform.destroy(gl);\n            }\n        }\n        gl.deleteProgram(shaderProgram.program);\n    }\n    useProgram(shaderProgram) {\n        const gl = this._gl;\n        gl.useProgram(shaderProgram.program);\n    }\n    createProgram(vertexShader, fragmentShader) {\n        const gl = this._gl;\n        const program = gl.createProgram();\n        const vs = this._compileShader(gl.VERTEX_SHADER, vertexShader);\n        const fs = this._compileShader(gl.FRAGMENT_SHADER, fragmentShader);\n        gl.attachShader(program, vs);\n        gl.attachShader(program, fs);\n        gl.bindAttribLocation(program, 0, \"position\");\n        gl.bindAttribLocation(program, 1, \"uv\");\n        gl.linkProgram(program);\n        if (this._debug && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            let shaderLog = null;\n            if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n                shaderLog = gl.getShaderInfoLog(vs);\n            } else if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n                shaderLog = gl.getShaderInfoLog(fs);\n            }\n            throw new View360Error(ERROR.MESSAGES.FAILED_LINKING_PROGRAM(gl.getProgramInfoLog(program), shaderLog), ERROR.CODES.FAILED_LINKING_PROGRAM);\n        }\n        gl.deleteShader(vs);\n        gl.deleteShader(fs);\n        return program;\n    }\n    createWebGLTexture(texData) {\n        const gl = this._gl;\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, texData.wrapS);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, texData.wrapT);\n        if (!texData.isVideo() && this._isWebGL2) {\n            const gl2 = gl;\n            gl2.texStorage2D(gl2.TEXTURE_2D, 1, gl2.RGBA8, texData.width, texData.height);\n        }\n        return texture;\n    }\n    createWebGLCubeTexture(texData, size) {\n        const gl = this._gl;\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, texData.wrapS);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, texData.wrapT);\n        if (this._isWebGL2) {\n            const gl2 = gl;\n            gl2.texStorage2D(gl2.TEXTURE_CUBE_MAP, 1, gl2.RGBA8, size, size);\n        }\n        return texture;\n    }\n    makeXRCompatible() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const gl = this._gl;\n            const attributes = gl.getContextAttributes();\n            if (attributes && attributes.xrCompatible !== true) {\n                yield gl.makeXRCompatible();\n            }\n        });\n    }\n    bindXRLayer(session) {\n        const gl = this._gl;\n        const xrLayer = new XRWebGLLayer(session, gl);\n        session.updateRenderState({\n            baseLayer: xrLayer\n        });\n    }\n    bindXRFrame(frame) {\n        const gl = this._gl;\n        const session = frame.session;\n        const baseLayer = session.renderState.baseLayer;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, baseLayer.framebuffer);\n    }\n    useDefaultFrameBuffer() {\n        const gl = this._gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n    _createBuffer() {\n        return this._gl.createBuffer();\n    }\n    _deleteBuffer(buffer) {\n        return this._gl.deleteBuffer(buffer);\n    }\n    _createNativeVAO() {\n        const gl = this._gl;\n        if (this._isWebGL2) {\n            return gl.createVertexArray();\n        } else {\n            const ext = this._extensions.vao;\n            return (ext === null || ext === void 0 ? void 0 : ext.createVertexArrayOES()) || null;\n        }\n    }\n    _bindNativeVAO(vao) {\n        const gl = this._gl;\n        if (this._isWebGL2) {\n            gl.bindVertexArray(vao);\n        } else {\n            const ext = this._extensions.vao;\n            ext === null || ext === void 0 ? void 0 : ext.bindVertexArrayOES(vao);\n        }\n    }\n    _deleteNativeVAO(vao) {\n        const gl = this._gl;\n        if (this._isWebGL2) {\n            gl.deleteVertexArray(vao);\n        } else {\n            const ext = this._extensions.vao;\n            ext === null || ext === void 0 ? void 0 : ext.deleteVertexArrayOES(vao);\n        }\n    }\n    _supplyGeometryData(vao, shaderProgram) {\n        const geometry = vao.geometry;\n        this._supplyIndiciesData(geometry.indicies, vao.buffers.indicies);\n        this._supplyAttributeData(geometry.vertices, shaderProgram.program, \"position\", vao.buffers.position);\n        this._supplyAttributeData(geometry.uvs, shaderProgram.program, \"uv\", vao.buffers.uv);\n    }\n    _unbindBuffers() {\n        const gl = this._gl;\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n    _supplyIndiciesData(indicies, buffer) {\n        const gl = this._gl;\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indicies.data, gl.STATIC_DRAW);\n    }\n    _supplyAttributeData(attribute, program, name, buffer) {\n        const gl = this._gl;\n        const attribLocation = gl.getAttribLocation(program, name);\n        // Attribute not used\n        if (attribLocation < 0) return;\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, attribute.data, gl.STATIC_DRAW);\n        gl.vertexAttribPointer(attribLocation, attribute.itemSize, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(attribLocation);\n    }\n    _compileShader(type, src) {\n        const gl = this._gl;\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, src);\n        gl.compileShader(shader);\n        return shader;\n    }\n    _getCommonUniformLocations(program) {\n        const gl = this._gl;\n        return {\n            uMVMatrix: gl.getUniformLocation(program, \"uMVMatrix\"),\n            uPMatrix: gl.getUniformLocation(program, \"uPMatrix\")\n        };\n    }\n    _getContext(canvas) {\n        const webglIdentifiers = [\n            \"webgl2\",\n            \"webgl\",\n            \"experimental-webgl\",\n            \"webkit-3d\",\n            \"moz-webgl\"\n        ];\n        let context = null;\n        let isWebGL2 = false;\n        const contextAttributes = {\n            preserveDrawingBuffer: false,\n            antialias: false\n        };\n        const onWebglContextCreationError = (e)=>e.statusMessage;\n        canvas.addEventListener(EVENTS$1.CONTEXT_CREATE_ERROR, onWebglContextCreationError);\n        for (const identifier of webglIdentifiers){\n            try {\n                context = canvas.getContext(identifier, contextAttributes);\n                isWebGL2 = identifier === \"webgl2\";\n            } catch (t) {} // eslint-disable-line no-empty\n            if (context) {\n                break;\n            }\n        }\n        canvas.removeEventListener(EVENTS$1.CONTEXT_CREATE_ERROR, onWebglContextCreationError);\n        if (!context) {\n            throw new View360Error(ERROR.MESSAGES.WEBGL_NOT_SUPPORTED, ERROR.CODES.WEBGL_NOT_SUPPORTED);\n        }\n        return {\n            gl: context,\n            isWebGL2\n        };\n    }\n    constructor(canvas, debug){\n        this._onContextLost = ()=>{\n            const canvas = this._canvas;\n            canvas.classList.add(DEFAULT_CLASS.CTX_LOST);\n            this._contextLost = true;\n        };\n        this._onContextRestore = ()=>{\n            const canvas = this._canvas;\n            canvas.classList.remove(DEFAULT_CLASS.CTX_LOST);\n            this._contextLost = false;\n        };\n        this._canvas = canvas;\n        this._contextLost = false;\n        this._debug = debug;\n        this._extensions = {\n            vao: null,\n            loseContext: null\n        };\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Projection renderer, based on WebGL\r\n * @ko WebGL 기반의 프로젝션 렌더러\r\n * @since 4.0.0\r\n */ class WebGLRenderer {\n    /**\r\n   * Canvas element\r\n   * @ko 캔버스 엘리먼트\r\n   * @since 4.0.0\r\n   */ get canvas() {\n        return this._canvas;\n    }\n    /**\r\n   * Canvas's width (`devicePixelRatio` is not applied)\r\n   * @ko 캔버스의 보이는 너비 (`devicePixelRatio`가 적용되지 않은)\r\n   * @since 4.0.0\r\n   */ get width() {\n        return this._elementSize.x;\n    }\n    /**\r\n   * Canvas's height (`devicePixelRatio` is not applied)\r\n   * @ko 캔버스의 높이 (`devicePixelRatio`가 적용되지 않은)\r\n   * @since 4.0.0\r\n   */ get height() {\n        return this._elementSize.y;\n    }\n    /**\r\n   * Current `devicePixelRatio` value.\r\n   * @ko 현재 `devicePixelRatio` 값.\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```js\r\n   * cosnt renderingWidth = view360.renderer.width * view360.renderer.pixelRatio;\r\n   * ```\r\n   */ get pixelRatio() {\n        return this._pixelRatio;\n    }\n    /**\r\n   * Width / height ratio (= width / height)\r\n   * @ko 너비 / 높이의 비율 (= width / height)\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```js\r\n   * const aspect = view360.renderer.width / view360.renderer.pixelRatio;\r\n   * assert(aspect === view360.renderer.aspect);\r\n   * ```\r\n   */ get aspect() {\n        return this._elementSize.x / this._elementSize.y;\n    }\n    /**\r\n   * Destroy instance and release all resources.\r\n   * @ko 인스턴스를 제거하고 사용된 리소스를 전부 해제합니다.\r\n   * @since 4.0.0\r\n   */ destroy() {\n        const canvas = this._canvas;\n        this.ctx.destroy();\n        canvas.width = 1;\n        canvas.height = 1;\n    }\n    /**\r\n   * Resize canvas and renew inner size cache.\r\n   * @ko 캔버스의 크기를 재계산해서 내부의 사이즈 캐시값을 갱신합니다.\r\n   * @since 4.0.0\r\n   */ resize() {\n        const canvas = this._canvas;\n        const canvasSize = this._elementSize;\n        const devicePixelRatio = window.devicePixelRatio;\n        canvasSize.x = canvas.clientWidth;\n        canvasSize.y = canvas.clientHeight;\n        canvas.width = canvasSize.x * devicePixelRatio;\n        canvas.height = canvasSize.y * devicePixelRatio;\n        this._pixelRatio = devicePixelRatio;\n        this.ctx.resize();\n    }\n    /**\r\n   * Render projection\r\n   * @ko 프로젝션을 렌더링합니다.\r\n   * @param projection - Projection to render {@ko 렌더링할 프로젝션}\r\n   * @param cameraa - Camera instance {@ko 카메라의 인스턴스}\r\n   * @since 4.0.0\r\n   */ render(mesh, camera) {\n        const ctx = this.ctx;\n        if (ctx.lost) return;\n        ctx.clear();\n        ctx.useProgram(mesh.program);\n        ctx.updateCommonUniforms(mesh, camera, mesh.program);\n        mesh.update({\n            camera\n        });\n        ctx.updateUniforms(mesh.program);\n        ctx.draw(mesh.vao, mesh.program);\n    }\n    /**\r\n   * Render VR frame, only used for rendering frames inside VR sessions.\r\n   * @ko VR 프레임을 렌더링합니다. VR 세션 진입 도중에만 사용됩니다.\r\n   * @internal\r\n   * @param mesh - Triangle mesh to render {@ko 렌더링할 메쉬}\r\n   * @param vr - Instance of XRManager {@ko XRManager의 인스턴스}\r\n   * @param frame - VR frame {@ko VR 프레임}\r\n   * @since 4.0.0\r\n   */ renderVR(mesh, vr, frame) {\n        const ctx = this.ctx;\n        const eyeParams = vr.getEyeParams(frame);\n        if (!eyeParams || !mesh) return;\n        ctx.bindXRFrame(frame);\n        ctx.useProgram(mesh.program);\n        ctx.updateUniforms(mesh.program);\n        eyeParams.forEach((eye, eyeIndex)=>{\n            const viewport = eye.viewport;\n            // We're using \"mesh.matrix\"(=local matrix) here for efficiency\n            // As projection doesn't require world matrix, as it doesn't have any parent or child\n            const mvMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_3__.multiply(gl_matrix__WEBPACK_IMPORTED_MODULE_3__.create(), eye.vMatrix, mesh.matrix);\n            ctx.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n            ctx.updateVRUniforms(mesh.program, mvMatrix, eye.pMatrix, eyeIndex);\n            ctx.draw(mesh.vao, mesh.program);\n        });\n    }\n    /**\r\n   * Create new instance\r\n   * @ko 새 인스턴스를 생성합니다.\r\n   * @param canvas - Canvas element {@ko 캔버스 엘리먼트}\r\n   * @param debug - Whether to enable WebGL debugging {@ko WebGL debug 활성화 여부 }\r\n   */ constructor(canvas, debug){\n        this._canvas = canvas;\n        this._elementSize = {\n            x: 0,\n            y: 0\n        };\n        this._pixelRatio = 1;\n        this.ctx = new WebGLContext(canvas, debug);\n    }\n}\n/**\r\n * Panorama 360 image viewer\r\n * @ko 파노라마 360 이미지 뷰어\r\n * @since 4.0.0\r\n * @see View360Options\r\n * @see View360Events\r\n */ class View360 extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\r\n   * Root element (`.view360-container`)\r\n   * @ko 루트 엘리먼트 (`.view360-container`)\r\n   * @since 4.0.0\r\n   * @readonly\r\n   * @example\r\n   * ```html\r\n   * <div id=\"viewer\" class=\"view360-container\">\r\n   *   <canvas class=\"view360-canvas\"></canvas>\r\n   * </div>\r\n   * ```\r\n   * ```ts\r\n   * import View360 from \"@egjs/view360\";\r\n   *\r\n   * const viewer = new View360(\"#viewer\");\r\n   * console.log(viewer.rootEl); // Element with id \"viewer\"\r\n   * ```\r\n   */ get rootEl() {\n        return this._rootEl;\n    }\n    /**\r\n   * Projection renderer.\r\n   * @ko 프로젝션 렌더러.\r\n   * @since 4.0.0\r\n   * @readonly\r\n   */ get renderer() {\n        return this._renderer;\n    }\n    /**\r\n   * Projection camera.\r\n   * @ko 프로젝션 카메라.\r\n   * @since 4.0.0\r\n   * @readonly\r\n   */ get camera() {\n        return this._camera;\n    }\n    /**\r\n   * Rotate/Zoom Controller.\r\n   * @ko 회전/줌 컨트롤러.\r\n   * @since 4.0.0\r\n   * @readonly\r\n   */ get control() {\n        return this._control;\n    }\n    /**\r\n   * WebXR-based VR manager.\r\n   * @ko WebXR 기반의 VR 기능 매니저 인스턴스.\r\n   * @since 4.0.0\r\n   * @readonly\r\n   * @example\r\n   * ```ts\r\n   * // Example: Enter VR\r\n   * // This must be called on user interaction, else will be rejected.\r\n   * viewer.vr.enter();\r\n   * ```\r\n   */ get vr() {\n        return this._vr;\n    }\n    /**\r\n   * Hotspot renderer.\r\n   * You can also change options of {@link View360Options#hotspot} with this.\r\n   * @ko 핫스팟 렌더러 인스턴스.\r\n   * {@link View360Options#hotspot} 옵션 변경도 가능합니다.\r\n   * @since 4.0.0\r\n   * @readonly\r\n   */ get hotspot() {\n        return this._hotspot;\n    }\n    /**\r\n   * An array of plugins added.\r\n   * @ko 추가된 플러그인의 배열\r\n   * @since 4.0.0\r\n   * @readonly\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   plugins: [new ControlBar()]\r\n   * });\r\n   *\r\n   * console.log(viewer.plugins); // [ControlBar]\r\n   *\r\n   * viewer.addPlugins(new LoadingSpinner()) // [ControlBar, LoadingSpinner];\r\n   * ```\r\n   */ get plugins() {\n        return this._plugins;\n    }\n    /**\r\n   * An instance of {@link Projection} that currently enabled. `null` if not initialized yet.\r\n   * You should call {@link View360#load} to change panorama src or projection type.\r\n   * @ko 현재 사용중인 {@link Projection}의 인스턴스. 프로젝션을 활성화하지 않았을 경우 `null`입니다.\r\n   * 파노라마 이미지 소스나 프로젝션 타입을 변경하려면 {@link View360#load}를 호출하면 됩니다.\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360\r\n   * ```\r\n   */ get projection() {\n        return this._projection;\n    }\n    set projection(val) {\n        if (this._initialized && val) {\n            this.load(val);\n        } else {\n            this._projection = val;\n        }\n    }\n    /**\r\n   * An instance of triangle mesh to render.\r\n   * @ko 렌더링할 triangle mesh의 인스턴스\r\n   * @internal\r\n   * @since 4.0.0\r\n   * @readonly\r\n   */ get mesh() {\n        return this._mesh;\n    }\n    /**\r\n   * A boolean value whether {@link View360#init init()} is called before.\r\n   * @ko {@link View360#init init()}이 호출되었는지 여부를 가리키는 값\r\n   * @since 4.0.0\r\n   * @readonly\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el\", { autoInit: false });\r\n   *\r\n   * console.log(viewer.initialized); // false\r\n   *\r\n   * await viewer.init();\r\n   *\r\n   * console.log(viewer.initialized); // true\r\n   * ```\r\n   */ get initialized() {\n        return this._initialized;\n    }\n    /**\r\n   * Instance of the Autoplay manager.\r\n   * You can also change {@link View360Options#autoplay} options with this.\r\n   * @ko Autoplay 기능의 매니저 인스턴스.\r\n   * 이 인스턴스를 통해 {@link View360Options#autoplay} 옵션을 변경하는 것도 가능합니다.\r\n   * @since 4.0.0\r\n   * @readonly\r\n   * @example\r\n   * ```ts\r\n   * // Disable autoplay\r\n   * viewer.autoplay.disable();\r\n   * ```\r\n   */ get autoplay() {\n        return this._autoplay;\n    }\n    /**\r\n   * When this value is `true` and {@link View360Options#projection} is set, {@link View360#init init()} will be called automatically when instance is created.\r\n   * @ko 이 값이 `true`이고, {@link View360Options#projection}이 설정되었으면, 인스턴스 생성 시점에 자동으로 {@link View360#init init()}을 호출합니다.\r\n   * @default true\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * import View360, { EquirectProjection, EVENTS } from \"@egjs/view360\";\r\n   *\r\n   * // viewer.init() is called on instance creation\r\n   * // But as `init` is asynchronous, you should wait for \"ready\" event if you want to do something after initialization.\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   autoInit: true,\r\n   *   projection: new EquirectProjection({ src: \"SRC_TO_URL\" })\r\n   * });\r\n   *\r\n   * console.log(viewer.initialized); // false, as `init` is asynchronous\r\n   *\r\n   * viewer.once(EVENTS.READY, () => {\r\n   *   console.log(viewer.initialized); // true\r\n   * });\r\n   * ```\r\n   */ get autoInit() {\n        return this._autoInit;\n    }\n    /**\r\n   * When `true`, {@link View360#resize} is called when the canvas size is changed.\r\n   * @ko `true`일 경우, 캔버스의 크기가 변경되었을 때 자동으로 {@link View360#resize}를 호출합니다.\r\n   * @default true\r\n   * @since 4.0.0\r\n   * @see View360#useResizeObserver\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   autoResize: true\r\n   * });\r\n   *\r\n   * // This can trigger `viewer.resize()` if the canvas size was not 400px\r\n   * const canvas = viewer.renderer.canvas;\r\n   * canvas.style.width = \"400px\";\r\n   * ```\r\n   */ get autoResize() {\n        return this._autoResize;\n    }\n    /**\r\n   * CSS selector for canvas element to render panorama image/video.\r\n   * The canvas element should be placed inside the root element. (Dont' have to be direct child)\r\n   * @ko 파노라마 이미지/비디오를 렌더링할 canvas 엘리먼트의 CSS 선택자\r\n   * 캔버스 엘리먼트는 루트 엘리먼트 내부에 있어야합니다. 루트 엘리먼트의 직계 자식 엘리먼트(Direct child element)일 필요는 없습니다.\r\n   * @default \"canvas\"\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```html\r\n   * <div class=\"view360-container\">\r\n   *   <canvas id=\"not_this_one\"></canvas>\r\n   *   <!-- This will be selected -->\r\n   *   <canvas id=\"canvas_to_select\"></canvas>\r\n   * </div>\r\n   * ```\r\n   *\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   canvasSelector: \"#canvas_to_select\"\r\n   * });\r\n   * ```\r\n   */ get canvasSelector() {\n        return this._canvasSelector;\n    }\n    /**\r\n   * When `true`, it will use {@link ResizeObserver} API to detect canvas size change when {@link View360Options#autoResize} is enabled.\r\n   * @ko `true`일 때 {@link View360Options#autoResize}가 활성화되었으면, 사용 가능한 환경에서 {@link ResizeObserver} API를 사용해서 캔버스 크기 변화를 추적합니다.\r\n   * @default true\r\n   * @since 4.0.0\r\n   */ get useResizeObserver() {\n        return this._useResizeObserver;\n    }\n    /**\r\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex tabindex} attribute for the canvas element.\r\n   * This is necessary for the keyboard controls.\r\n   * By default, `0` will be assigned. `null` to disable.\r\n   * @ko 캔버스 엘리먼트에 적용할 {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex tabindex} 어트리뷰트의 값.\r\n   * 이 값을 설정해야만 키보드 컨트롤을 사용 가능합니다.\r\n   * 기본값으로 `0`이 설정됩니다. `null`로 지정하면 `tabindex`를 설정하지 않습니다.\r\n   * @see RotateControlOptions#disableKeyboard\r\n   * @default 0\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   tabindex: 5\r\n   * });\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <!-- After init -->\r\n   * <div class=\"view360-container\">\r\n   *   <canvas class=\"view360-canvas\" tabindex=\"5\"></canvas>\r\n   * </div>\r\n   * ```\r\n   */ get tabIndex() {\n        return this._tabIndex;\n    }\n    set tabIndex(val) {\n        const canvas = this._renderer.canvas;\n        this._tabIndex = val;\n        if (val != null) {\n            canvas.tabIndex = val;\n        } else {\n            canvas.removeAttribute(\"tabindex\");\n        }\n    }\n    /**\r\n   * A maximum delta time between frames in seconds.\r\n   * It can prevent camera or control changing too fast when frame being late.\r\n   * @ko 프레임간 시간 차이의 최대값. (초 단위)\r\n   * 퍼포먼스 등의 이유로 프레임 렌더링이 늦어졌을 때, 화면이 갑작스럽게 바뀌는 것을 막아줍니다.\r\n   * @default 1 / 30\r\n   * @since 4.0.0\r\n   */ get maxDeltaTime() {\n        return this._animator.maxDeltaTime;\n    }\n    set maxDeltaTime(val) {\n        this._animator.maxDeltaTime = val;\n    }\n    /**\r\n   * Enable WebGL debugging. Setting this to `true` can decrease performance.\r\n   * This is used internally on developing View360.\r\n   * @ko WebGL 디버깅을 활성화합니다. 이 값을 `true`로 할 경우 성능이 하락할 수 있습니다.\r\n   * 이 옵션은 View360을 개발하기 위해 내부적으로 사용됩니다.\r\n   * @default false\r\n   */ get debug() {\n        return this._debug;\n    }\n    set debug(val) {\n        this._debug = val;\n    }\n    // Camera options\n    /**\r\n   * Initial yaw (y-axis rotation) value for camera. (in degrees, °)\r\n   * As View360 uses right-handed coordinate system internally, camera will rotate counter-clockwise by this value.\r\n   * @ko 카메라의 초기 yaw(y축 회전)값 (도 단위, °)\r\n   * View360은 오른손 좌표계를 사용하기 때문에, 카메라가 해당 값만큼 시계 반대방향으로 회전합니다.\r\n   * @default 0\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   initialYaw: 30\r\n   * });\r\n   *\r\n   * viewer.on(\"ready\", () => {\r\n   *   console.log(viewer.camera.yaw); // 30\r\n   * });\r\n   * ```\r\n   */ get initialYaw() {\n        return this._camera.initialYaw;\n    }\n    set initialYaw(val) {\n        this._camera.initialYaw = val;\n    }\n    /**\r\n   * Initial pitch (x-axis rotation) value for camera. (in degrees, °)\r\n   * As View360 uses right-handed coordinate system internally, positive value will make camera to look upside, while negative value will look down.\r\n   * @ko 카메라의 초기 pitch(x축 회전)값 (도 단위, °)\r\n   * View360은 오른손 좌표계를 사용하기 때문에, 양(+)의 값은 카메라가 위를 보게 하고, 음(-)의 값은 카메라가 아래를 보게 합니다.\r\n   * @default 0\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   initialPitch: 60\r\n   * });\r\n   *\r\n   * viewer.on(\"ready\", () => {\r\n   *   console.log(viewer.camera.pitch); // 60\r\n   * });\r\n   * ```\r\n   */ get initialPitch() {\n        return this._camera.initialPitch;\n    }\n    set initialPitch(val) {\n        this._camera.initialPitch = val;\n    }\n    /**\r\n   * Initial zoom value for camera.\r\n   * Setting this value to `2` will enlarge panorama 200% by width.\r\n   * @ko 카메라의 초기 줌 값.\r\n   * 이 값을 `2`로 설정할 경우 파노라마 이미지를 가로 기준 200%만큼 확대합니다.\r\n   * @default 1\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   initialZoom: 2\r\n   * });\r\n   *\r\n   * viewer.on(\"ready\", () => {\r\n   *   console.log(viewer.camera.zoom); // 2\r\n   * });\r\n   * ```\r\n   */ get initialZoom() {\n        return this._camera.initialZoom;\n    }\n    set initialZoom(val) {\n        this._camera.initialZoom = val;\n    }\n    /**\r\n   * Restrict yaw(y-axis rotation) range. (in degrees, °)\r\n   * @ko yaw(y축 회전) 범위를 제한합니다. (도 단위, °)\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   yawRange: [-30, 30]\r\n   * });\r\n   *\r\n   * viewer.on(\"ready\", () => {\r\n   *   console.log(viewer.camera.yaw); // 0\r\n   *   viewer.camera.lookAt({ yaw: 60  });\r\n   *   console.log(viewer.camera.yaw); // 30\r\n   * });\r\n   * ```\r\n   */ get yawRange() {\n        return this._camera.yawRange;\n    }\n    set yawRange(val) {\n        this._camera.yawRange = val;\n        if (this._projection) this._projection.updateCamera(this._camera);\n    }\n    /**\r\n   * Restrict pitch(x-axis rotation) range. (in degrees, °)\r\n   * @ko pitch(x축 회전) 범위를 제한합니다. (도 단위, °)\r\n   * @default null\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   pitchRange: [-45, 45]\r\n   * });\r\n   *\r\n   * viewer.on(\"ready\", () => {\r\n   *   console.log(viewer.camera.pitch); // 0\r\n   *   viewer.camera.lookAt({ pitch: 60  });\r\n   *   console.log(viewer.camera.pitch); // 45\r\n   * });\r\n   * ```\r\n   */ get pitchRange() {\n        return this._camera.pitchRange;\n    }\n    set pitchRange(val) {\n        this._camera.pitchRange = val;\n        if (this._projection) this._projection.updateCamera(this._camera);\n    }\n    /**\r\n   * Restrict camera zoom range.\r\n   * If `null`, a default zoom range from `0.6` to `10` will be used.\r\n   * @ko 카메라 줌 범위를 제한합니다.\r\n   * `null`일 경우 기본값으로 `0.6`에서 `10`의 범위를 사용합니다.\r\n   * @default null\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * const viewer = new View360(\"#el_id\", {\r\n   *   zoomRange: [0.5, 4]\r\n   * });\r\n   *\r\n   * viewer.on(\"ready\", () => {\r\n   *   console.log(viewer.camera.zoom); // 1\r\n   *   viewer.camera.lookAt({ zoom: 6  });\r\n   *   console.log(viewer.camera.zoom); // 4\r\n   * });\r\n   * ```\r\n   */ get zoomRange() {\n        return this._camera.zoomRange;\n    }\n    set zoomRange(val) {\n        this._camera.zoomRange = val;\n        if (this._projection) this._projection.updateCamera(this._camera);\n    }\n    /**\r\n   * Camera's horizontal FOV(Field of View). (in degrees, °)\r\n   * @ko 카메라의 수평 FOV(Field of View) 값. (도 단위, °)\r\n   * @default 90\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * // Init with fov: 120\r\n   * const viewer = new View360(\"#el_id\", { fov: 120 });\r\n   *\r\n   * // Back to 90\r\n   * viewer.fov = 90;\r\n   * ```\r\n   */ get fov() {\n        return this._camera.fov;\n    }\n    set fov(val) {\n        const camera = this._camera;\n        const control = this._control;\n        camera.fov = val;\n        camera.updateMatrix();\n        control.sync();\n    }\n    // Control options\n    /**\r\n   * A control for camera rotation.\r\n   * You can also change options of {@link View360Options#rotate} with this.\r\n   * @ko 카메라 회전을 담당하는 컨트롤.\r\n   * {@link View360Options#rotate} 옵션 변경도 가능합니다.\r\n   * @since 4.0.0\r\n   * @readonly\r\n   */ get rotate() {\n        return this._control.rotate;\n    }\n    /**\r\n   * A control for camera zoom.\r\n   * You can also change options of {@link View360Options#zoom} with this.\r\n   * @ko 카메라 줌을 담당하는 컨트롤.\r\n   * {@link View360Options#zoom} 옵션 변경도 가능합니다.\r\n   * @since 4.0.0\r\n   * @readonly\r\n   */ get zoom() {\n        return this._control.zoom;\n    }\n    /**\r\n   * A control for camera rotation with gyroscope input.\r\n   * You can also change options of {@link View360Options#gyro} with this.\r\n   * @ko 자이로스코프를 통한 카메라 회전을 담당하는 컨트롤.\r\n   * {@link View360Options#gyro} 옵션 변경도 가능합니다.\r\n   * @since 4.0.0\r\n   * @readonly\r\n   */ get gyro() {\n        return this._control.gyro;\n    }\n    /**\r\n   * Apply CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/cursor cursor} by current state of input when using mouse.\r\n   * If `true`, this will add CSS style to canvas element. It'll apply `cursor: \"grab\"` by default and `cursor: \"grabbing\"` when holding the mouse button.\r\n   * @ko 마우스 사용시 CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/cursor cursor}값을 자동으로 변경할지 여부.\r\n   * `true`일 경우 기본 상태에서 `cursor: \"grab\"`을, 입력 도중에 `cursor: \"grabbing\"`을 캔버스에 적용합니다.\r\n   * @default true\r\n   * @since 4.0.0\r\n   */ get useGrabCursor() {\n        return this._control.useGrabCursor;\n    }\n    set useGrabCursor(val) {\n        this._control.useGrabCursor = val;\n    }\n    /**\r\n   * Disable context menu which pops up on mouse right click.\r\n   * @ko 마우스 우클릭시 표시되는 컨텍스트 메뉴를 비활성화합니다.\r\n   * @default false\r\n   * @since 4.0.0\r\n   */ get disableContextMenu() {\n        return this._control.disableContextMenu;\n    }\n    set disableContextMenu(val) {\n        this._control.disableContextMenu = val;\n    }\n    /**\r\n   * If `true`, enables scroll on mobile(touch) devices on canvas.\r\n   * :::caution\r\n   * When this option is enabled, users must swipe horizontally first then vertically to change view up or down.\r\n   * :::\r\n   * @ko `true`로 설정할 경우, 모바일(터치) 환경의 캔버스 영역 내에서 스크롤을 가능하게 합니다.\r\n   * :::caution\r\n   * 이 값을 활성화할 경우, 사용자가 카메라 뷰를 위/아래로 바꾸기 위해서는 먼저 가로로 스와이프한 이후에 세로로 스와이프해야만 합니다.\r\n   * :::\r\n   * @since 4.0.0\r\n   * @default true\r\n   */ get scrollable() {\n        return this._control.scrollable;\n    }\n    set scrollable(val) {\n        this._control.scrollable = val;\n    }\n    /**\r\n   * If `true`, enables scroll by mouse wheel on canvas.\r\n   * :::caution\r\n   * When this option is enabled, zoom by mouse wheel will be disabled.\r\n   * :::\r\n   * @ko `true`로 설정할 경우, 캔버스 영역 내에서 마우스 휠을 이용한 페이지 스크롤이 가능해집니다.\r\n   * :::caution\r\n   * 이 값을 활성화할 경우, 마우스 휠을 통한 줌이 불가능하게 됩니다.\r\n   * :::\r\n   * @since 4.0.0\r\n   * @default false\r\n   */ get wheelScrollable() {\n        return this._control.wheelScrollable;\n    }\n    set wheelScrollable(val) {\n        this._control.wheelScrollable = val;\n    }\n    /**\r\n   * Destroy instance and release all resources.\r\n   * @ko 인스턴스를 제거하고 모든 리소스를 해제합니다.\r\n   * @since 4.0.0\r\n   */ destroy() {\n        this._camera.destroy();\n        this._animator.stop();\n        this._renderer.destroy();\n        this._control.destroy();\n        this._autoResizer.disable();\n        if (this._mesh) {\n            this._mesh.destroy(this._renderer.ctx);\n            this._mesh = null;\n        }\n        this._plugins.forEach((plugin)=>plugin.destroy(this));\n        this._initialized = false;\n    }\n    /**\r\n   * Initialize inner components and load projection src.\r\n   * @ko 내부 컴포넌트들을 초기화하고 프로젝션 소스를 로드합니다.\r\n   * @since 4.0.0\r\n   */ init() {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this._projection) {\n                throw new View360Error(ERROR.MESSAGES.PROVIDE_PROJECTION_FIRST, ERROR.CODES.PROVIDE_PROJECTION_FIRST);\n            }\n            const renderer = this._renderer;\n            const camera = this._camera;\n            const control = this._control;\n            const animator = this._animator;\n            const hotspot = this._hotspot;\n            const projection = this._projection;\n            const canvas = renderer.canvas;\n            this._bindComponentEvents();\n            renderer.ctx.init();\n            this._resizeComponents();\n            camera.updateMatrix();\n            if (this._autoResize) {\n                this._autoResizer.enable(canvas);\n            }\n            if (!this._autoplay.enableBlocked) {\n                this._autoplay.enable();\n            }\n            this._plugins.forEach((plugin)=>{\n                plugin.init(this);\n            });\n            const texture = yield this._loadTexture(projection);\n            this._applyProjection(projection, texture);\n            hotspot.refresh();\n            animator.start(this._renderFrameOnDemand);\n            yield control.enable();\n            if (this._tabIndex != null && !canvas.hasAttribute(\"tabIndex\")) {\n                canvas.tabIndex = this._tabIndex;\n            }\n            this._initialized = true;\n            this.renderFrame(0);\n            this._emit(EVENTS.READY);\n        });\n    }\n    /**\r\n   * Load new panorama image/video and display it.\r\n   * This will {@link View360#init init()} View360 if it's not initialized yet.\r\n   * @ko 새로운 파노라마 이미지 혹은 비디오를 로드하고 표시합니다.\r\n   * 만약 View360이 아직 초기화되지 않았다면, {@link View360#init init()}을 호출합니다.\r\n   * @param projection - Projection & video options for new source. {@ko 새로운 파노라마 이미지/비디오에 적용할 옵션들}\r\n   * @returns `Promise<true>` if load was successful. {@ko 프로젝션 로드에 성공했을 경우 `Promise<true>`를 반환합니다. }\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * // Change to video\r\n   * viewer.load({\r\n   *   src: \"URL_TO_NEW_VIDEO\",\r\n   *   video: true\r\n   * });\r\n   * ```\r\n   */ load(projection) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!projection) return false;\n            if (this._initialized) {\n                const texture = yield this._loadTexture(projection);\n                this._applyProjection(projection, texture);\n                this.renderFrame(0);\n            } else {\n                // Should update internal options before init\n                this._projection = projection;\n                this.init();\n            }\n            return true;\n        });\n    }\n    /**\r\n   * Refresh component's size by current\r\n   * @ko View360이 내부적으로 캐시하고 있는 엘리먼트 크기를 현재 크기로 갱신합니다.\r\n   * @since 4.0.0\r\n   */ resize() {\n        if (!this._initialized) return;\n        this._resizeComponents();\n        // To prevent flickering, render immediately after resizing components\n        this.renderFrame(0);\n        const { width, height } = this._renderer;\n        this._emit(EVENTS.RESIZE, {\n            width,\n            height\n        });\n    }\n    /**\r\n   * Add new plugins\r\n   * @ko 새로운 플러그인을 추가합니다.\r\n   * @param plugins Plugins to add {@ko 추가할 플러그인들}\r\n   * @see View360Options#plugins\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * // Add a single plugin\r\n   * viewer.addPlugins(new ControlBar());\r\n   *\r\n   * // Add multiple plugins\r\n   * viewer.addPlugins(new ControlBar(), new LoadingSpinner());\r\n   * ```\r\n   */ addPlugins() {\n        for(var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++){\n            plugins[_key] = arguments[_key];\n        }\n        if (this._initialized) {\n            plugins.forEach((plugin)=>{\n                plugin.init(this);\n            });\n        }\n        this._plugins.push(...plugins);\n    }\n    /**\r\n   * Remove plugins.\r\n   * @ko 플러그인을 제거합니다.\r\n   * @param plugins Plugins to remove {@ko 제거할 플러그인들}\r\n   * @since 4.0.0\r\n   * @example\r\n   * ```ts\r\n   * // Remove a single plugin\r\n   * viewer.removePlugins(plugin1);\r\n   *\r\n   * // Remove multiple plugins\r\n   * viewer.removePlugins(plugin2, plugin3);\r\n   * ```\r\n   */ removePlugins() {\n        for(var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++){\n            plugins[_key] = arguments[_key];\n        }\n        plugins.forEach((plugin)=>{\n            const pluginIdx = this._plugins.indexOf(plugin);\n            if (pluginIdx < 0) return;\n            plugin.destroy(this);\n            this._plugins.splice(pluginIdx, 1);\n        });\n    }\n    _emit(eventName) {\n        for(var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            params[_key - 1] = arguments[_key];\n        }\n        const evtParams = params ? params[0] : {};\n        this.trigger(eventName, Object.assign({\n            type: eventName,\n            target: this\n        }, evtParams));\n    }\n    _applyProjection(projection, texture) {\n        const camera = this._camera;\n        const control = this._control;\n        const renderer = this._renderer;\n        const mesh = this._mesh;\n        // Remove previous context\n        if (mesh) {\n            mesh.destroy(renderer.ctx);\n        }\n        const newMesh = projection.createMesh(renderer.ctx, texture);\n        projection.updateCamera(camera);\n        projection.updateControl(control);\n        this._mesh = newMesh;\n        this._emit(EVENTS.PROJECTION_CHANGE, {\n            projection\n        });\n    }\n    _loadTexture(projection) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const contentLoader = new TextureLoader();\n            const { src, video } = projection;\n            this._emit(EVENTS.LOAD_START, {\n                src,\n                video\n            });\n            const texture = yield contentLoader.load(src, video);\n            this._emit(EVENTS.LOAD, {\n                src,\n                video\n            });\n            return texture;\n        });\n    }\n    _resizeComponents() {\n        const renderer = this._renderer;\n        const camera = this._camera;\n        const control = this._control;\n        renderer.resize();\n        camera.resize(renderer.width, renderer.height);\n        control.resize(renderer.width, renderer.height);\n    }\n    _addEventHandlers(events) {\n        // Bind option \"on\"\n        Object.keys(events).forEach((evtName)=>{\n            this.on(evtName, events[evtName]);\n        });\n    }\n    _bindComponentEvents() {\n        var _s = $RefreshSig$();\n        // Bind internal component events\n        const root = this._rootEl;\n        const control = this._control;\n        const animator = this._animator;\n        const renderer = this._renderer;\n        const vr = this._vr;\n        const controlEventsToPropagate = [\n            CONTROL_EVENTS.STATIC_CLICK,\n            CONTROL_EVENTS.INPUT_START,\n            CONTROL_EVENTS.INPUT_END\n        ];\n        controlEventsToPropagate.forEach((evtName)=>{\n            control.rotate.on(evtName, (evt)=>{\n                this._emit(evtName, evt);\n            });\n            control.zoom.on(evtName, (evt)=>{\n                this._emit(evtName, evt);\n            });\n        });\n        vr.on(EVENTS.VR_START, (evt)=>{\n            root.classList.add(DEFAULT_CLASS.IN_VR);\n            animator.changeContext(evt.session);\n            animator.start(this._renderVRFrame);\n            this._emit(EVENTS.VR_START);\n        });\n        vr.on(EVENTS.VR_END, _s(()=>{\n            _s();\n            root.classList.remove(DEFAULT_CLASS.IN_VR);\n            renderer.ctx.useDefaultFrameBuffer();\n            animator.changeContext(window);\n            animator.start(this._renderFrameOnDemand);\n            this.resize();\n            this._emit(EVENTS.VR_END);\n        }, \"6HdQ+NwiCdUw8G23WCt2sagwF8o=\"));\n    }\n    /**\r\n   * Create new instance of View360\r\n   * @ko View360의 새로운 인스턴스를 생성합니다\r\n   * @param root - Root element(`.view360-container`) to mount View360\r\n   * Can be either a CSS selector or HTMLElement.\r\n   * {@ko View360을 마운트할 루트 엘리먼트, CSS 셀렉터나 HTMLElement를 지정 가능합니다.}\r\n   * @param options - Options to apply\r\n   * {@ko 적용할 옵션들}\r\n   * @example\r\n   * ```ts\r\n   * import View360, { EquirectProjection } from \"@egjs/view360\";\r\n   *\r\n   * // Create new View360 instance\r\n   * const viewer = new View360(\"#id-of-a-container\", {\r\n   *   projection: new EquirectProjection({\r\n   *     src: \"URL_TO_PANORAMA_IMAGE_OR_VIDEO\",\r\n   *   })\r\n   * });\r\n   * ```\r\n   */ constructor(root, { projection = null, initialYaw = 0, initialPitch = 0, initialZoom = 1, yawRange = null, pitchRange = null, zoomRange = null, fov = 90, useGrabCursor = true, disableContextMenu = false, rotate = true, zoom = true, gyro = false, scrollable = true, wheelScrollable = false, autoplay = false, hotspot = {}, autoInit = true, autoResize = true, canvasSelector = \"canvas\", useResizeObserver = true, on = {}, plugins = [], maxDeltaTime = 1 / 30, tabIndex = 0, debug = false } = {}){\n        super();\n        /**\r\n     * Render a single panorama image/video frame.\r\n     * Rendering is performed automatically on demand, so you usually don't have to call this.\r\n     * Call this when a frame is not renewed after changing options.\r\n     * @ko 파노라마 이미지/비디오의 한 프레임을 렌더링합니다.\r\n     * 프레임 갱신은 보통 필요한 때에만 자동적으로 이루어지기 때문에, 보통은 이 메소드를 호출할 필요는 없습니다.\r\n     * 옵션 변경 이후에도 프레임 갱신이 이루어지지 않는다면, 이 메소드를 호출해주세요.\r\n     * @param delta Delta time in milisec. {@ko 프레임간 시간 차이, 밀리초 단위}\r\n     * @since 4.0.0\r\n     */ this.renderFrame = (delta)=>{\n            const camera = this._camera;\n            const renderer = this._renderer;\n            const control = this._control;\n            const hotspot = this._hotspot;\n            const autoPlayer = this._autoplay;\n            const mesh = this._mesh;\n            if (!mesh) return;\n            this._emit(EVENTS.BEFORE_RENDER);\n            if (autoPlayer.playing) {\n                autoPlayer.update(delta);\n                control.sync();\n            }\n            if (camera.animation) {\n                camera.animation.update(delta);\n            } else {\n                control.update(delta);\n            }\n            renderer.render(mesh, camera);\n            hotspot.render(camera);\n            if (camera.changed) {\n                this._emit(EVENTS.VIEW_CHANGE, {\n                    yaw: camera.yaw,\n                    pitch: camera.pitch,\n                    zoom: camera.zoom,\n                    quaternion: [\n                        camera.quaternion[0],\n                        camera.quaternion[1],\n                        camera.quaternion[2],\n                        camera.quaternion[3]\n                    ]\n                });\n            }\n            camera.onFrameRender();\n            this._emit(EVENTS.RENDER);\n        };\n        this._renderFrameOnDemand = (delta)=>{\n            const camera = this._camera;\n            const control = this._control;\n            const autoplay = this._autoplay;\n            const mesh = this._mesh;\n            const texture = mesh === null || mesh === void 0 ? void 0 : mesh.getTexture();\n            if (!this._initialized || !texture) return;\n            if (!camera.animation && !control.animating && !autoplay.playing && !texture.isVideo()) return;\n            this.renderFrame(delta);\n        };\n        this._renderVRFrame = (_delta, frame)=>{\n            const vr = this._vr;\n            const mesh = this._mesh;\n            const renderer = this._renderer;\n            if (!mesh) return;\n            this._emit(EVENTS.BEFORE_RENDER);\n            renderer.renderVR(mesh, vr, frame);\n            this._emit(EVENTS.RENDER);\n        };\n        this._rootEl = getElement(root);\n        this._plugins = plugins;\n        this._initialized = false;\n        // Options\n        this._autoInit = autoInit;\n        this._autoResize = autoResize;\n        this._canvasSelector = canvasSelector;\n        this._useResizeObserver = useResizeObserver;\n        this._tabIndex = tabIndex;\n        this._debug = debug;\n        // Core components\n        const canvas = findCanvas(this._rootEl, canvasSelector);\n        this._renderer = new WebGLRenderer(canvas, debug);\n        this._camera = new Camera({\n            initialYaw,\n            initialPitch,\n            initialZoom,\n            fov,\n            yawRange,\n            pitchRange,\n            zoomRange\n        });\n        this._control = new PanoControl(canvas, this._camera, {\n            useGrabCursor,\n            scrollable,\n            wheelScrollable,\n            disableContextMenu,\n            rotate,\n            zoom,\n            gyro\n        });\n        this._animator = new FrameAnimator(maxDeltaTime);\n        this._autoplay = new Autoplay(this, canvas, autoplay);\n        this._projection = projection;\n        this._mesh = null;\n        this._autoResizer = new AutoResizer(useResizeObserver, ()=>this.resize());\n        this._vr = new XRManager(this._renderer.ctx);\n        this._hotspot = new HotspotRenderer(this._rootEl, this._renderer, hotspot);\n        this._addEventHandlers(on);\n        if (projection && autoInit) {\n            this.init();\n        }\n    }\n}\n/**\r\n * Current version string of the View360\r\n * @ko View360의 현재 버젼 문자열\r\n * @since 4.0.0\r\n * @readonly\r\n * @example\r\n * ```ts\r\n * // If the installed version of the View360 is v4.0.0, View360.VERSION is equal to \"4.0.0\"\r\n * console.log(View360.VERSION) // 4.0.0\r\n * ```\r\n */ View360.VERSION = \"4.0.0-beta.7\";\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Base class for 3D objects\r\n * @ko 3D 오브젝트의 베이스 클래스\r\n * @since 4.0.0\r\n * @internal\r\n */ class Object3D extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\r\n   * Update local matrix of the object.\r\n   * @ko 오브젝트의 local matrix를 갱신합니다.\r\n   * @since 4.0.0\r\n   */ updateMatrix() {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.fromRotationTranslationScale(this.matrix, this.rotation, this.position, this.scale);\n    }\n    update(ctx) {\n        this.trigger(OBJECT_3D_EVENTS.UPDATE, ctx);\n    }\n    /**\r\n   * Create new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   */ constructor(){\n        super();\n        this.matrix = gl_matrix__WEBPACK_IMPORTED_MODULE_3__.create();\n        this.rotation = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.create();\n        this.position = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, 0);\n        this.scale = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(1, 1, 1);\n    }\n}\n/**\r\n * A plugin that displays loading spinner while loading the projection.\r\n * @ko 프로젝션 로딩중에 로딩 스피너를 보여주는 플러그인\r\n * @since 4.0.0\r\n * @category Plugin\r\n */ class LoadingSpinner {\n    init(viewer) {\n        viewer.on(EVENTS.LOAD_START, this._startLoading);\n    }\n    destroy(viewer) {\n        viewer.off(EVENTS.LOAD_START, this._startLoading);\n        this._detachElements({\n            target: viewer\n        });\n    }\n    _createElements() {\n        const className = Object.assign(Object.assign({}, this.className), LoadingSpinner.DEFAULT_CLASS);\n        const container = createElement(className.CONTAINER);\n        const ring = createElement(className.RING);\n        container.appendChild(ring);\n        return container;\n    }\n    /**\r\n   * Create a new instance of LoadingSpinner. {@ko LoadingSpinner의 새 인스턴스를 생성합니다.}\r\n   * @param options Options {@ko 옵션들}\r\n   */ constructor({ className = {} } = {}){\n        this._startLoading = (param)=>{\n            let { target: viewer } = param;\n            viewer.rootEl.appendChild(this._container);\n            if (viewer.initialized) {\n                viewer.once(EVENTS.LOAD, this._detachElements);\n            } else {\n                viewer.once(EVENTS.READY, this._detachElements);\n            }\n        };\n        this._detachElements = (param)=>{\n            let { target: viewer } = param;\n            const container = this._container;\n            if (!container) return;\n            if (container.parentElement === viewer.rootEl) {\n                viewer.rootEl.removeChild(container);\n            }\n        };\n        this.className = className;\n        this._container = this._createElements();\n    }\n}\n/**\r\n * Default class names that LoadingSpinner uses\r\n * @ko LoadingSpinner가 사용하는 디폴트 클래스 이름\r\n * @since 4.0.0\r\n */ LoadingSpinner.DEFAULT_CLASS = {\n    /**\r\n   * A class name for the container element\r\n   * @ko 컨테이너 엘리먼트의 클래스 이름\r\n   * @since 4.0.0\r\n   */ CONTAINER: \"view360-spinner\",\n    /**\r\n   * A class name for the spinning ring element\r\n   * @ko 돌아가는 링 엘리먼트의 클래스 이름\r\n   * @since 4.0.0\r\n   */ RING: \"view360-spinner-ring\"\n};\n/**\r\n * Interface of the ControlBar items\r\n * @ko 컨트롤바 아이템의 인터페이스\r\n * @category Plugin\r\n * @group ControlBar\r\n * @since 4.0.0\r\n */ class ControlBarItem {\n    /**\r\n   * Create new instance of the ControlBarItem\r\n   * @ko ControlBarItem의 새로운 인스턴스를 생성합니다.\r\n   * @param options Options {@ko 옵션들}\r\n   */ constructor(options){\n        this.position = options.position;\n        this.order = options.order;\n    }\n}\nconst CONTROL_BAR_DEFAULT_CLASS = {\n    CONTROLS_ROOT: \"view360-controls\",\n    CONTROLS_BG: \"view360-controls-background\",\n    CONTROLS_MAIN: \"view360-controls-main\",\n    CONTROLS_TOP: \"view360-controls-top\",\n    CONTROLS_BOTTOM: \"view360-controls-bottom\",\n    CONTROLS_MID: \"view360-controls-mid\",\n    CONTROLS_LEFT: \"view360-controls-left\",\n    CONTROLS_RIGHT: \"view360-controls-right\",\n    CONTROLS_FLOAT_LEFT: \"view360-controls-float-left\",\n    CONTROLS_FLOAT_RIGHT: \"view360-controls-float-right\",\n    CONTROLS_BUTTON: \"view360-controls-button\",\n    PROGRESS_ROOT: \"view360-controls-progress\",\n    VOLUME_ROOT: \"view360-controls-volume\",\n    RANGE_ROOT: \"view360-range\",\n    RANGE_TRACK: \"view360-range-track\",\n    RANGE_THUMB: \"view360-range-thumb\",\n    RANGE_FILLER: \"view360-range-filler\",\n    PLAY_BUTTON: \"view360-controls-play\",\n    PAUSE_BUTTON: \"view360-controls-pause\",\n    UNMUTED_BUTTON: \"view360-controls-unmuted\",\n    MUTED_BUTTON: \"view360-controls-muted\",\n    FULLSCREEN_BUTTON: \"view360-controls-fullscreen\",\n    FULLSCREEN_EXIT_BUTTON: \"view360-controls-fullscreen-exit\",\n    VR_BUTTON: \"view360-controls-vr\",\n    GYRO_ENABLED: \"view360-controls-gyro-enabled\",\n    GYRO_DISABLED: \"view360-controls-gyro-disabled\",\n    VIDEO_TIME_DISPLAY: \"view360-controls-time\",\n    PIEVIEW_ROOT: \"view360-controls-pie\",\n    FIXED: \"view360-controls-fixed\",\n    UNAVAILABLE: \"view360-controls-unavailable\",\n    HIDDEN: \"view360-controls-hidden\"\n};\nconst CONTROL_BAR_ITEM_POSITION = {\n    /**\r\n   * Place control bar item floating at top-left corner\r\n   * @ko 아이템을 왼쪽 위 구석에 표시합니다.\r\n   * @since 4.0.0\r\n   */ TOP_LEFT: \"top-left\",\n    /**\r\n   * Place control bar item floating at top-right corner\r\n   * @ko 아이템을 오른쪽 위 구석에 표시합니다.\r\n   * @since 4.0.0\r\n   */ TOP_RIGHT: \"top-right\",\n    /**\r\n   * Place control bar item at upper block inside the bottom control bar.\r\n   * @ko 아이템을 하단에 표시되는 컨트롤바 내에서 위쪽 블럭에 표시합니다.\r\n   * @since 4.0.0\r\n   */ MAIN_TOP: \"main-top\",\n    /**\r\n   * Place control bar item at lower block inside the bottom control bar.\r\n   * @ko 아이템을 하단에 표시되는 컨트롤바 내에서 하단 블럭에 표시합니다.\r\n   * @since 4.0.0\r\n   */ MAIN_BOTTOM: \"main-bottom\",\n    /**\r\n   * Place control bar item at center-left block inside the bottom control bar.\r\n   * @ko 아이템을 하단에 표시되는 컨트롤바 내에서 중간 왼쪽 블럭에 표시합니다.\r\n   * @since 4.0.0\r\n   */ MAIN_LEFT: \"main-left\",\n    /**\r\n   * Place control bar item at center-right block inside the bottom control bar.\r\n   * @ko 아이템을 하단에 표시되는 컨트롤바 내에서 중간 오른쪽 블럭에 표시합니다.\r\n   * @since 4.0.0\r\n   */ MAIN_RIGHT: \"main-right\"\n};\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class RangeControl extends _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    init(className) {\n        const mouseInput = this._mouseInput;\n        const touchInput = this._touchInput;\n        this.rootEl.classList.add(className.RANGE_ROOT);\n        this.trackEl.classList.add(className.RANGE_TRACK);\n        this.thumbEl.classList.add(className.RANGE_THUMB);\n        this.fillerEl.classList.add(className.RANGE_FILLER);\n        this._fixedClass = className.FIXED;\n        mouseInput.on(CONTROL_EVENTS.INPUT_START, this._onHold);\n        touchInput.on(CONTROL_EVENTS.INPUT_START, this._onHold);\n        mouseInput.on(CONTROL_EVENTS.INPUT_END, this._onRelease);\n        touchInput.on(CONTROL_EVENTS.INPUT_END, this._onRelease);\n        mouseInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n        touchInput.on(CONTROL_EVENTS.CHANGE, this._onChange);\n        mouseInput.enable(this.rootEl);\n        touchInput.enable(this.rootEl);\n        this.resize();\n    }\n    destroy() {\n        const mouseInput = this._mouseInput;\n        const touchInput = this._touchInput;\n        this.rootEl.className = \"\";\n        this.trackEl.className = \"\";\n        this.thumbEl.className = \"\";\n        this.fillerEl.className = \"\";\n        mouseInput.off();\n        touchInput.off();\n        mouseInput.disable();\n        touchInput.disable();\n    }\n    resize() {\n        this._bbox = this.trackEl.getBoundingClientRect();\n    }\n    updateStyle(progress) {\n        const width = this._bbox.width;\n        const clampedProgress = clamp(progress, 0, 1);\n        this.fillerEl.style.width = \"\".concat(clampedProgress * 100, \"%\");\n        this.thumbEl.style.transform = \"translateX(\".concat(clampedProgress * width, \"px)\");\n    }\n    /**\r\n   *\r\n   */ constructor(){\n        super();\n        this._onHold = (param)=>{\n            let { srcEvent, isTouch } = param;\n            var _a;\n            const bbox = this._bbox;\n            if (!bbox) return;\n            const x = isTouch ? srcEvent.touches[0].pageX : srcEvent.pageX;\n            const elX = bbox.x + ((_a = window.scrollX) !== null && _a !== void 0 ? _a : window.pageXOffset);\n            const clamepdX = clamp(x, elX, elX + bbox.width);\n            const progress = (clamepdX - elX) / bbox.width;\n            this._motion.reset(clamepdX);\n            this.thumbEl.classList.add(this._fixedClass);\n            this.trigger(CONTROL_EVENTS.INPUT_START, progress);\n        };\n        this._onChange = (param)=>{\n            let { delta } = param;\n            var _a;\n            const motion = this._motion;\n            const bbox = this._bbox;\n            if (!bbox) return;\n            motion.setNewEndByDelta(delta.x);\n            motion.update(1);\n            const elX = bbox.x + ((_a = window.scrollX) !== null && _a !== void 0 ? _a : window.pageXOffset);\n            const clampedX = clamp(motion.val, elX, elX + bbox.width);\n            const progress = (clampedX - elX) / bbox.width;\n            this.trigger(CONTROL_EVENTS.CHANGE, progress);\n        };\n        this._onRelease = ()=>{\n            const bbox = this._bbox;\n            if (!bbox) return;\n            this.thumbEl.classList.remove(this._fixedClass);\n            this.trigger(CONTROL_EVENTS.INPUT_END);\n        };\n        const root = document.createElement(EL_DIV);\n        const track = document.createElement(EL_DIV);\n        const thumb = document.createElement(EL_DIV);\n        const filler = document.createElement(EL_DIV);\n        root.draggable = false;\n        track.appendChild(filler);\n        track.appendChild(thumb);\n        root.appendChild(track);\n        this.rootEl = root;\n        this.trackEl = track;\n        this.thumbEl = thumb;\n        this.fillerEl = filler;\n        this._mouseInput = new MouseInput();\n        this._touchInput = new TouchInput();\n        this._motion = new Motion({\n            duration: 1,\n            range: INFINITE_RANGE,\n            easing: (x)=>x\n        });\n        this._bbox = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            top: 0\n        };\n        this._fixedClass = CONTROL_BAR_DEFAULT_CLASS.FIXED;\n    }\n}\n/**\r\n * Show video progress bar.\r\n * @ko 비디오의 프로그레스 바를 표시합니다.\r\n * @category Plugin\r\n * @group ControlBar\r\n * @since 4.0.0\r\n */ class ProgressBar extends ControlBarItem {\n    get element() {\n        return this._rangeControl.rootEl;\n    }\n    init(viewer, controlBar) {\n        var _a;\n        const video = (_a = viewer.mesh) === null || _a === void 0 ? void 0 : _a.getTexture();\n        const element = this.element;\n        const rangeControl = this._rangeControl;\n        const unavailableClass = controlBar.className.UNAVAILABLE;\n        if (!video || !video.isVideo()) {\n            element.classList.add(unavailableClass);\n            return;\n        }\n        element.classList.remove(unavailableClass);\n        element.classList.add(controlBar.className.PROGRESS_ROOT);\n        viewer.on(EVENTS.RESIZE, this._onResize);\n        video.source.addEventListener(EVENTS$1.VIDEO_TIME_UPDATE, this._onTimeUpdate);\n        video.source.addEventListener(EVENTS$1.VIDEO_DURATION_CHANGE, this._onDurationChange);\n        video.source.addEventListener(VIDEO_TIME_CHANGE_EVENT, this._onTimeUpdate);\n        rangeControl.init(controlBar.className);\n        rangeControl.on(CONTROL_EVENTS.INPUT_START, this._onHold);\n        rangeControl.on(CONTROL_EVENTS.CHANGE, this._onControl);\n        rangeControl.on(CONTROL_EVENTS.INPUT_END, this._onRelease);\n        this._video = video;\n        this._currentTime = video.source.currentTime;\n        this._duration = video.source.duration;\n        this._controlBar = controlBar;\n        rangeControl.updateStyle(this._currentTime / this._duration);\n    }\n    destroy(viewer) {\n        const video = this._video;\n        viewer.off(EVENTS.RESIZE, this._onResize);\n        if (video) {\n            video.source.removeEventListener(EVENTS$1.VIDEO_TIME_UPDATE, this._onTimeUpdate);\n            video.source.removeEventListener(EVENTS$1.VIDEO_DURATION_CHANGE, this._onDurationChange);\n            video.source.removeEventListener(VIDEO_TIME_CHANGE_EVENT, this._onTimeUpdate);\n        }\n        this._rangeControl.destroy();\n        this._video = null;\n        this._playPromise = null;\n    }\n    /**\r\n   * Create a new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ position = CONTROL_BAR_ITEM_POSITION.MAIN_TOP, order = 9999 } = {}){\n        super({\n            position,\n            order\n        });\n        this._onResize = ()=>{\n            this._rangeControl.resize();\n        };\n        this._onTimeUpdate = ()=>{\n            const video = this._video;\n            if (!video) return;\n            this._currentTime = video.source.currentTime;\n            this._rangeControl.updateStyle(this._currentTime / this._duration);\n        };\n        this._onDurationChange = ()=>{\n            const video = this._video;\n            if (!video) return;\n            this._duration = video.source.duration;\n            this._rangeControl.updateStyle(this._currentTime / this._duration);\n        };\n        this._onHold = (progress)=>{\n            const video = this._video;\n            const controlBar = this._controlBar;\n            if (!video || !controlBar) return;\n            const paused = video.isPaused();\n            video.source.pause();\n            const time = video.source.duration * progress;\n            video.source.currentTime = time;\n            video.source.dispatchEvent(new CustomEvent(VIDEO_TIME_CHANGE_EVENT, {\n                detail: {\n                    time\n                }\n            }));\n            controlBar.rootEl.classList.add(controlBar.className.FIXED);\n            this._wasPaused = !this._playPromise && paused;\n        };\n        this._onControl = (progress)=>{\n            const video = this._video;\n            if (!video) return;\n            const time = video.source.duration * progress;\n            video.source.currentTime = time;\n            video.source.dispatchEvent(new CustomEvent(VIDEO_TIME_CHANGE_EVENT, {\n                detail: {\n                    time\n                }\n            }));\n        };\n        this._onRelease = ()=>{\n            const video = this._video;\n            const controlBar = this._controlBar;\n            if (video && controlBar) {\n                if (!this._wasPaused && !this._playPromise) {\n                    this._playPromise = video.source.play().catch(()=>void 0);\n                    // This should not be chained\n                    this._playPromise.then(()=>{\n                        this._playPromise = null;\n                    });\n                    controlBar.rootEl.classList.remove(controlBar.className.FIXED);\n                }\n            }\n            this._wasPaused = false;\n        };\n        this.position = position;\n        this.order = order;\n        this._controlBar = null;\n        this._rangeControl = new RangeControl();\n        this._video = null;\n        this._wasPaused = false;\n        this._currentTime = 0;\n        this._duration = 0;\n        this._playPromise = null;\n    }\n}\n/**\r\n * Show video play / pause button.\r\n * @ko 비디오 재생 / 일시정지 버튼을 표시합니다.\r\n * @category Plugin\r\n * @group ControlBar\r\n * @since 4.0.0\r\n */ class PlayButton extends ControlBarItem {\n    init(viewer, controlBar) {\n        var _a;\n        const element = this.element;\n        const video = (_a = viewer.mesh) === null || _a === void 0 ? void 0 : _a.getTexture();\n        const className = controlBar.className;\n        const unavailableClass = className.UNAVAILABLE;\n        if (!video || !video.isVideo()) {\n            element.classList.add(unavailableClass);\n            return;\n        }\n        element.classList.add(className.CONTROLS_BUTTON);\n        element.classList.remove(unavailableClass);\n        const paused = video.isPaused();\n        this._video = video;\n        this._paused = paused;\n        this._controlBar = controlBar;\n        if (paused) {\n            this._onPause();\n        } else {\n            this._onPlay();\n        }\n        element.addEventListener(EVENTS$1.CLICK, this._onClick);\n        video.source.addEventListener(EVENTS$1.VIDEO_PLAY, this._onPlay);\n        video.source.addEventListener(EVENTS$1.VIDEO_PAUSE, this._onPause);\n    }\n    destroy() {\n        const video = this._video;\n        const element = this.element;\n        if (!video) return;\n        element.className = \"\";\n        element.removeEventListener(EVENTS$1.CLICK, this._onClick);\n        video.source.removeEventListener(EVENTS$1.VIDEO_PLAY, this._onPlay);\n        video.source.removeEventListener(EVENTS$1.VIDEO_PAUSE, this._onPause);\n        this._video = null;\n        this._paused = true;\n        this._controlBar = null;\n    }\n    /**\r\n   * Create a new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ position = CONTROL_BAR_ITEM_POSITION.MAIN_LEFT, order = 9999 } = {}){\n        super({\n            position,\n            order\n        });\n        this._onClick = ()=>{\n            const video = this._video;\n            if (!video) return;\n            if (this._paused) {\n                video.source.play();\n            } else {\n                video.source.pause();\n            }\n        };\n        this._onPlay = ()=>{\n            if (!this._controlBar) return;\n            const element = this.element;\n            const className = this._controlBar.className;\n            element.classList.add(className.PAUSE_BUTTON);\n            element.classList.remove(className.PLAY_BUTTON);\n            element.title = \"Pause Video\";\n            this._paused = false;\n        };\n        this._onPause = ()=>{\n            if (!this._controlBar) return;\n            const element = this.element;\n            const className = this._controlBar.className;\n            element.classList.add(className.PLAY_BUTTON);\n            element.classList.remove(className.PAUSE_BUTTON);\n            element.title = \"Play Video\";\n            this._paused = true;\n        };\n        this.element = document.createElement(EL_BUTTON);\n        this._video = null;\n        this._paused = true;\n        this._controlBar = null;\n    }\n}\n/**\r\n * Show video volume control.\r\n * @ko 비디오 볼륨 조절 버튼을 표시합니다.\r\n * @category Plugin\r\n * @group ControlBar\r\n * @since 4.0.0\r\n */ class VolumeControl extends ControlBarItem {\n    get element() {\n        return this._rootEl;\n    }\n    init(viewer, controlBar) {\n        var _a;\n        const video = (_a = viewer.mesh) === null || _a === void 0 ? void 0 : _a.getTexture();\n        const root = this._rootEl;\n        const button = this._buttonEl;\n        const rangeControl = this._rangeControl;\n        const className = controlBar.className;\n        const unavailableClass = className.UNAVAILABLE;\n        if (!video || !video.isVideo()) {\n            root.classList.add(unavailableClass);\n            return;\n        }\n        root.classList.remove(unavailableClass);\n        root.classList.add(className.CONTROLS_BUTTON);\n        root.classList.add(className.VOLUME_ROOT);\n        button.classList.add(className.CONTROLS_BUTTON);\n        if (video.source.muted) {\n            button.classList.add(className.MUTED_BUTTON);\n        } else {\n            button.classList.add(className.UNMUTED_BUTTON);\n        }\n        viewer.on(EVENTS.RESIZE, this._onResize);\n        root.addEventListener(EVENTS$1.TRANSITION_END, this._onResize);\n        button.addEventListener(EVENTS$1.CLICK, this._onClick);\n        video.source.addEventListener(EVENTS$1.VIDEO_VOLUME_CHANGE, this._onVolumeChange);\n        video.source.addEventListener(EVENTS$1.VIDEO_LOADED_DATA, this._updateDisplay);\n        video.source.addEventListener(EVENTS$1.VIDEO_CAN_PLAYTHROUGH, this._updateDisplay);\n        rangeControl.init(className);\n        rangeControl.on(CONTROL_EVENTS.INPUT_START, this._onHold);\n        rangeControl.on(CONTROL_EVENTS.CHANGE, this._onChange);\n        rangeControl.on(CONTROL_EVENTS.INPUT_END, this._onRelease);\n        this._controlBar = controlBar;\n        this._video = video;\n        this._updateDisplay();\n    }\n    destroy(viewer) {\n        const video = this._video;\n        const button = this._buttonEl;\n        const root = this._rootEl;\n        root.className = \"\";\n        button.className = \"\";\n        viewer.off(EVENTS.RESIZE, this._onResize);\n        root.removeEventListener(EVENTS$1.TRANSITION_END, this._onResize);\n        button.removeEventListener(EVENTS$1.CLICK, this._onClick);\n        if (video) {\n            video.source.removeEventListener(EVENTS$1.VIDEO_VOLUME_CHANGE, this._onVolumeChange);\n            video.source.removeEventListener(EVENTS$1.VIDEO_LOADED_DATA, this._updateDisplay);\n            video.source.removeEventListener(EVENTS$1.VIDEO_CAN_PLAYTHROUGH, this._updateDisplay);\n        }\n        this._controlBar = null;\n        this._rangeControl.destroy();\n        this._video = null;\n    }\n    _createElements() {\n        const root = document.createElement(EL_BUTTON);\n        const buttonEl = document.createElement(EL_DIV);\n        root.appendChild(this._rangeControl.rootEl);\n        root.appendChild(buttonEl);\n        root.title = \"Toggle Mute\";\n        this._rootEl = root;\n        this._buttonEl = buttonEl;\n    }\n    /**\r\n   * Create a new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ position = CONTROL_BAR_ITEM_POSITION.MAIN_RIGHT, order = 9999 } = {}){\n        super({\n            position,\n            order\n        });\n        this._onResize = ()=>{\n            this._rangeControl.resize();\n            this._updateDisplay();\n        };\n        this._onClick = ()=>{\n            const video = this._video;\n            if (!video || this._rootEl.disabled) return;\n            video.source.muted = !video.source.muted;\n        };\n        this._onVolumeChange = ()=>{\n            const button = this._buttonEl;\n            const video = this._video;\n            const controlBar = this._controlBar;\n            if (!video || !controlBar) return;\n            const className = controlBar.className;\n            if (video.source.muted || video.source.volume === 0) {\n                button.classList.add(className.MUTED_BUTTON);\n                button.classList.remove(className.UNMUTED_BUTTON);\n            } else {\n                button.classList.add(className.UNMUTED_BUTTON);\n                button.classList.remove(className.MUTED_BUTTON);\n            }\n            this._updateDisplay();\n        };\n        this._onHold = (progress)=>{\n            const video = this._video;\n            const controlBar = this._controlBar;\n            if (!video || !controlBar) return;\n            const className = controlBar.className;\n            video.source.volume = progress;\n            this._rootEl.classList.add(className.FIXED);\n            controlBar.containerEl.classList.add(className.FIXED);\n            this._updateDisplay();\n        };\n        this._onChange = (progress)=>{\n            const video = this._video;\n            if (!video) return;\n            video.source.volume = progress;\n            if (progress > 0) {\n                video.source.muted = false;\n            } else {\n                video.source.muted = true;\n            }\n            this._updateDisplay();\n        };\n        this._onRelease = ()=>{\n            const controlBar = this._controlBar;\n            if (!controlBar) return;\n            const className = controlBar.className;\n            this._rootEl.classList.remove(className.FIXED);\n            controlBar.containerEl.classList.remove(className.FIXED);\n        };\n        this._updateDisplay = ()=>{\n            const video = this._video;\n            const root = this._rootEl;\n            if (!video) return;\n            if (!video.hasAudio()) {\n                root.disabled = true;\n                return;\n            }\n            root.disabled = false;\n            const volume = video.source.muted ? 0 : video.source.volume;\n            this._rangeControl.updateStyle(volume);\n        };\n        this._controlBar = null;\n        this._rangeControl = new RangeControl();\n        this._createElements();\n        this._video = null;\n    }\n}\n/**\r\n * Show fullscreen enter / exit button.\r\n * @ko 풀스크린 진입 / 해제 버튼을 표시합니다.\r\n * @category Plugin\r\n * @group ControlBar\r\n * @since 4.0.0\r\n */ class FullscreenButton extends ControlBarItem {\n    init(viewer, controlBar) {\n        const element = this.element;\n        const className = controlBar.className;\n        if (!this._fullscreenAvailable()) {\n            element.classList.add(className.UNAVAILABLE);\n            return;\n        }\n        element.classList.add(className.CONTROLS_BUTTON);\n        element.classList.remove(className.UNAVAILABLE);\n        element.addEventListener(EVENTS$1.CLICK, this._onClick);\n        this._addFullscreenHandlers();\n        if (isFullscreen()) {\n            element.classList.add(className.FULLSCREEN_EXIT_BUTTON);\n        } else {\n            element.classList.add(className.FULLSCREEN_BUTTON);\n        }\n        this._controlBar = controlBar;\n        this._targetEl = viewer.rootEl;\n    }\n    destroy() {\n        const element = this.element;\n        element.className = \"\";\n        element.removeEventListener(EVENTS$1.CLICK, this._onClick);\n        this._removeFullscreenHandlers();\n        this._controlBar = null;\n        this._targetEl = null;\n    }\n    _fullscreenAvailable() {\n        return FULLSCREEN_REQUEST.some((key)=>!!document[key]);\n    }\n    _requestFullscreen(el) {\n        for (const key of FULLSCREEN_REQUEST){\n            const request = el[key];\n            if (request) {\n                request.call(el);\n                return;\n            }\n        }\n    }\n    _exitFullscreen() {\n        for (const key of FULLSCREEN_EXIT){\n            const exit = document[key];\n            if (exit) {\n                exit.call(document);\n                return;\n            }\n        }\n    }\n    _addFullscreenHandlers() {\n        FULLSCREEN_CHANGE.forEach((evtName)=>{\n            document.addEventListener(evtName, this._onFullscreenChange);\n        });\n    }\n    _removeFullscreenHandlers() {\n        FULLSCREEN_CHANGE.forEach((evtName)=>{\n            document.removeEventListener(evtName, this._onFullscreenChange);\n        });\n    }\n    /**\r\n   * Create a new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ position = CONTROL_BAR_ITEM_POSITION.MAIN_RIGHT, order = 9999 } = {}){\n        super({\n            position,\n            order\n        });\n        this._onClick = ()=>{\n            const target = this._targetEl;\n            if (!target) return;\n            if (isFullscreen()) {\n                this._exitFullscreen();\n            } else {\n                this._requestFullscreen(target);\n            }\n        };\n        this._onFullscreenChange = ()=>{\n            const element = this.element;\n            const controlBar = this._controlBar;\n            if (!controlBar) return;\n            const className = controlBar.className;\n            if (isFullscreen()) {\n                element.classList.add(className.FULLSCREEN_EXIT_BUTTON);\n                element.classList.remove(className.FULLSCREEN_BUTTON);\n            } else {\n                element.classList.add(className.FULLSCREEN_BUTTON);\n                element.classList.remove(className.FULLSCREEN_EXIT_BUTTON);\n            }\n        };\n        this.element = document.createElement(EL_BUTTON);\n        this.element.title = \"Toggle Fullscreen\";\n        this._controlBar = null;\n        this._targetEl = null;\n    }\n}\n/**\r\n * Show video current / total time.\r\n * @ko 비디오의 현재 / 총 재생시간을 표시합니다.\r\n * @category Plugin\r\n * @group ControlBar\r\n * @since 4.0.0\r\n */ class VideoTime extends ControlBarItem {\n    init(viewer, controlBar) {\n        var _a;\n        const video = (_a = viewer.mesh) === null || _a === void 0 ? void 0 : _a.getTexture();\n        const element = this.element;\n        const className = controlBar.className;\n        if (!video || !video.isVideo()) {\n            element.classList.add(className.UNAVAILABLE);\n            return;\n        }\n        element.classList.add(className.VIDEO_TIME_DISPLAY);\n        element.classList.remove(className.UNAVAILABLE);\n        video.source.addEventListener(EVENTS$1.VIDEO_TIME_UPDATE, this._onTimeUpdate);\n        video.source.addEventListener(EVENTS$1.VIDEO_DURATION_CHANGE, this._onDurationChange);\n        video.source.addEventListener(VIDEO_TIME_CHANGE_EVENT, this._onCustomTimeChange);\n        this._video = video;\n        this._currentTime = video.source.currentTime;\n        this._duration = video.source.duration;\n        this._updateDisplay();\n    }\n    destroy() {\n        const video = this._video;\n        if (!video) return;\n        this.element.className = \"\";\n        video.source.removeEventListener(EVENTS$1.VIDEO_TIME_UPDATE, this._onTimeUpdate);\n        video.source.removeEventListener(EVENTS$1.VIDEO_DURATION_CHANGE, this._onDurationChange);\n        video.source.removeEventListener(VIDEO_TIME_CHANGE_EVENT, this._onCustomTimeChange);\n        this._video = null;\n    }\n    _updateDisplay() {\n        const time = this._currentTime;\n        const timeMinute = Math.floor(time / 60);\n        const timeSeconds = Math.floor(time - timeMinute * 60);\n        const timeSecondsFormatted = timeSeconds < 10 ? \"0\".concat(timeSeconds) : timeSeconds;\n        const duration = this._duration;\n        const durationMinute = Math.floor(duration / 60);\n        const durationSeconds = Math.floor(duration - durationMinute * 60);\n        const durationSecondsFormatted = durationSeconds < 10 ? \"0\".concat(durationSeconds) : durationSeconds;\n        this.element.innerText = \"\".concat(timeMinute, \":\").concat(timeSecondsFormatted, \" / \").concat(durationMinute, \":\").concat(durationSecondsFormatted);\n    }\n    /**\r\n   * Create a new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ position = CONTROL_BAR_ITEM_POSITION.MAIN_LEFT, order = 9999 } = {}){\n        super({\n            position,\n            order\n        });\n        this._onTimeUpdate = ()=>{\n            const video = this._video;\n            if (!video) return;\n            this._currentTime = video.source.currentTime;\n            this._updateDisplay();\n        };\n        this._onDurationChange = ()=>{\n            const video = this._video;\n            if (!video) return;\n            this._duration = video.source.duration;\n            this._updateDisplay();\n        };\n        this._onCustomTimeChange = (evt)=>{\n            this._currentTime = evt.detail.time;\n            this._updateDisplay();\n        };\n        this.element = document.createElement(EL_DIV);\n        this._video = null;\n        this._currentTime = 0;\n        this._duration = 0;\n    }\n}\n/**\r\n * Show camera direction/fov indicator.\r\n * @ko 카메라가 향하는 방향 및 FOV를 표시합니다.\r\n * @category Plugin\r\n * @group ControlBar\r\n * @since 4.0.0\r\n */ class PieView extends ControlBarItem {\n    init(viewer, controlBar) {\n        const element = this.element;\n        if (!viewer.initialized) {\n            viewer.once(EVENTS.READY, this._updatePie);\n        } else {\n            this._updatePie({\n                target: viewer\n            });\n        }\n        const rootClass = controlBar.className.PIEVIEW_ROOT;\n        element.classList.add(rootClass);\n        if (this.resetCamera) {\n            element.addEventListener(EVENTS$1.CLICK, this._onClick);\n        }\n        viewer.on(EVENTS.VIEW_CHANGE, this._updatePie);\n        this._viewer = viewer;\n    }\n    destroy(viewer) {\n        const element = this.element;\n        element.removeEventListener(EVENTS$1.CLICK, this._onClick);\n        element.className = \"\";\n        viewer.off(EVENTS.READY, this._updatePie);\n        viewer.off(EVENTS.VIEW_CHANGE, this._updatePie);\n        this._viewer = null;\n    }\n    _createPieElements() {\n        const root = this.element;\n        const pieSVG = document.createElementNS(SVG_NAMESPACE, \"svg\");\n        pieSVG.setAttribute(\"viewBox\", \"0 0 48 48\");\n        pieSVG.setAttribute(\"width\", \"100%\");\n        pieSVG.setAttribute(\"height\", \"100%\");\n        const piePath = document.createElementNS(SVG_NAMESPACE, \"circle\");\n        piePath.setAttribute(\"stroke\", \"currentColor\");\n        piePath.setAttribute(\"fill\", \"transparent\");\n        piePath.setAttribute(\"cx\", \"24\");\n        piePath.setAttribute(\"cy\", \"24\");\n        piePath.setAttribute(\"r\", \"12\");\n        piePath.setAttribute(\"stroke-width\", \"24\");\n        pieSVG.appendChild(piePath);\n        const rangeCircle = document.createElementNS(SVG_NAMESPACE, \"circle\");\n        rangeCircle.setAttribute(\"stroke\", \"currentColor\");\n        rangeCircle.setAttribute(\"fill\", \"transparent\");\n        rangeCircle.setAttribute(\"cx\", \"24\");\n        rangeCircle.setAttribute(\"cy\", \"24\");\n        rangeCircle.setAttribute(\"r\", \"22.5\");\n        rangeCircle.setAttribute(\"stroke-width\", \"3\");\n        pieSVG.appendChild(rangeCircle);\n        root.appendChild(pieSVG);\n        this._piePathEl = piePath;\n        this._rangeCircleEl = rangeCircle;\n    }\n    /**\r\n   * Create a new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ resetCamera = true, position = CONTROL_BAR_ITEM_POSITION.TOP_RIGHT, order = 9999 } = {}){\n        super({\n            position,\n            order\n        });\n        this._onClick = ()=>{\n            const viewer = this._viewer;\n            const resetCamera = this.resetCamera;\n            if (!viewer || !resetCamera) return;\n            const { yaw = viewer.initialYaw, pitch = viewer.initialPitch, zoom = viewer.initialZoom, duration = 500 } = getObjectOption(resetCamera);\n            viewer.camera.animateTo({\n                yaw,\n                pitch,\n                zoom,\n                duration\n            });\n        };\n        this._updatePie = (param)=>{\n            let { target: viewer } = param;\n            const piePath = this._piePathEl;\n            const rangeCircle = this._rangeCircleEl;\n            const camera = viewer.camera;\n            const fov = camera.getHorizontalFov();\n            const yawRange = camera.getYawRange(camera.zoom);\n            const halfFov = fov * 0.5;\n            const pieRadius = 24 * Math.PI;\n            const pieDeg = pieRadius * fov / 360;\n            const pieOffset = pieRadius * (camera.yaw + halfFov + 90) / 360;\n            piePath.setAttribute(\"stroke-dasharray\", \"\".concat(pieDeg, \" \").concat(pieRadius - pieDeg));\n            piePath.setAttribute(\"stroke-dashoffset\", \"\".concat(pieOffset));\n            if (isFinite(yawRange.min) && isFinite(yawRange.max)) {\n                const radius = 45 * Math.PI; // 2 * PI * r\n                const min = (circulate(yawRange.min, -180, 180) - halfFov) / 360;\n                const max = (circulate(yawRange.max, -180, 180) + halfFov) / 360;\n                const rangeDiff = radius * Math.abs(max - min);\n                const offset = -radius * (min - 0.25);\n                rangeCircle.setAttribute(\"stroke-dasharray\", \"\".concat(rangeDiff, \" \").concat(radius - rangeDiff));\n                rangeCircle.setAttribute(\"stroke-dashoffset\", \"\".concat(offset));\n            } else {\n                rangeCircle.setAttribute(\"stroke-dasharray\", \"\");\n                rangeCircle.setAttribute(\"stroke-dashoffset\", \"\");\n            }\n        };\n        this.element = document.createElement(EL_DIV);\n        this.element.title = \"Reset view\";\n        this.resetCamera = resetCamera;\n        this._createPieElements();\n        this._viewer = null;\n    }\n}\n/**\r\n * Show VR enter button.\r\n * @ko VR 진입 버튼을 표시합니다.\r\n * @category Plugin\r\n * @group ControlBar\r\n * @since 4.0.0\r\n */ class VRButton extends ControlBarItem {\n    init(viewer, controlBar) {\n        const element = this.element;\n        const className = controlBar.className;\n        element.classList.add(className.UNAVAILABLE);\n        element.classList.add(className.VR_BUTTON);\n        element.classList.add(className.CONTROLS_BUTTON);\n        viewer.vr.isAvailable().then((available)=>{\n            if (available) {\n                element.classList.remove(className.UNAVAILABLE);\n            }\n        });\n        element.addEventListener(EVENTS$1.CLICK, this._onClick);\n        this._viewer = viewer;\n    }\n    destroy() {\n        const element = this.element;\n        element.className = \"\";\n        element.removeEventListener(EVENTS$1.CLICK, this._onClick);\n        this._viewer = null;\n    }\n    /**\r\n   * Create a new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ position = CONTROL_BAR_ITEM_POSITION.MAIN_RIGHT, order = 9999 } = {}){\n        super({\n            position,\n            order\n        });\n        this._onClick = ()=>{\n            const viewer = this._viewer;\n            if (!viewer) return;\n            viewer.vr.enter();\n        };\n        this.element = document.createElement(EL_BUTTON);\n        this.element.title = \"Enter VR\";\n        this._viewer = null;\n    }\n}\n/**\r\n * Show gyroscope control enable / disable button\r\n * @ko 자이로스코프 컨트롤 활성화 / 비활성화 버튼을 표시합니다.\r\n * @category Plugin\r\n * @group ControlBar\r\n * @since 4.0.0\r\n */ class GyroButton extends ControlBarItem {\n    init(viewer, controlBar) {\n        const element = this.element;\n        const className = controlBar.className;\n        element.addEventListener(EVENTS$1.CLICK, this._onClick);\n        element.classList.add(className.CONTROLS_BUTTON);\n        element.classList.add(className.UNAVAILABLE);\n        const enableButton = ()=>{\n            element.classList.remove(className.UNAVAILABLE);\n            viewer.control.gyro.on(CONTROL_EVENTS.ENABLE, this._updateStyle);\n            viewer.control.gyro.on(CONTROL_EVENTS.DISABLE, this._updateStyle);\n        };\n        if (sensorCanBeEnabledIOS()) {\n            enableButton();\n        } else {\n            GyroControl.isAvailable().then((available)=>{\n                if (!available) return;\n                enableButton();\n            });\n        }\n        this._controlBar = controlBar;\n        this._viewer = viewer;\n        this._updateStyle();\n    }\n    destroy(viewer) {\n        const element = this.element;\n        viewer.control.gyro.off(CONTROL_EVENTS.ENABLE, this._updateStyle);\n        viewer.control.gyro.off(CONTROL_EVENTS.DISABLE, this._updateStyle);\n        element.removeEventListener(EVENTS$1.CLICK, this._onClick);\n        element.className = \"\";\n        this._controlBar = null;\n        this._viewer = null;\n    }\n    /**\r\n   * Create a new instance.\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ position = CONTROL_BAR_ITEM_POSITION.MAIN_RIGHT, order = 9999 } = {}){\n        super({\n            position,\n            order\n        });\n        this._onClick = ()=>{\n            const viewer = this._viewer;\n            const controlBar = this._controlBar;\n            if (!viewer || !controlBar) return;\n            const gyroControl = viewer.control.gyro;\n            if (gyroControl.enabled) {\n                gyroControl.disable();\n            } else {\n                GyroControl.requestSensorPermission().then((available)=>{\n                    if (available) {\n                        gyroControl.enable();\n                    } else {\n                        this.element.classList.add(controlBar.className.UNAVAILABLE);\n                    }\n                });\n            }\n        };\n        this._updateStyle = ()=>{\n            const element = this.element;\n            const viewer = this._viewer;\n            const controlBar = this._controlBar;\n            if (!viewer || !controlBar) return;\n            const gyroControl = viewer.control.gyro;\n            const className = controlBar.className;\n            if (gyroControl.enabled) {\n                element.classList.add(className.GYRO_ENABLED);\n                element.classList.remove(className.GYRO_DISABLED);\n            } else {\n                element.classList.add(className.GYRO_DISABLED);\n                element.classList.remove(className.GYRO_ENABLED);\n            }\n        };\n        this.element = document.createElement(EL_DIV);\n        this.element.title = \"Toggle gyroscope control\";\n    }\n}\nclass AutoHide {\n    get enabled() {\n        return !!this._targetEl;\n    }\n    get hidden() {\n        return this._controlBar.containerEl.classList.contains(this._hiddenClass);\n    }\n    get _hiddenClass() {\n        return this._controlBar.className.HIDDEN;\n    }\n    get _fixedClass() {\n        return this._controlBar.className.FIXED;\n    }\n    enable(viewer) {\n        var _a;\n        if (this._targetEl) {\n            this.disable(viewer);\n        }\n        const initialDelay = this._initialDelay;\n        const root = viewer.rootEl;\n        this._targetEl = viewer.rootEl;\n        this._timer = window.setTimeout(()=>{\n            this.hide();\n        }, initialDelay);\n        root.addEventListener(EVENTS$1.MOUSE_DOWN, this._onHold);\n        root.addEventListener(EVENTS$1.MOUSE_ENTER, this._onMouseEnter);\n        root.addEventListener(EVENTS$1.MOUSE_MOVE, this._onMouseMove);\n        root.addEventListener(EVENTS$1.MOUSE_LEAVE, this._onMouseLeave);\n        this._addFullscreenHandlers();\n        const video = (_a = viewer.mesh) === null || _a === void 0 ? void 0 : _a.getTexture();\n        if (!video || !video.isVideo()) {\n            return;\n        }\n        if (video.isPaused()) {\n            this._controlBar.containerEl.classList.add(this._fixedClass);\n        }\n        video.source.addEventListener(EVENTS$1.VIDEO_PLAY, this._onVideoPlay);\n        video.source.addEventListener(EVENTS$1.VIDEO_PAUSE, this._onVideoPause);\n        this._video = video;\n    }\n    disable(viewer) {\n        if (!this._targetEl) return;\n        const controlBar = this._controlBar;\n        const root = viewer.rootEl;\n        const video = this._video;\n        root.removeEventListener(EVENTS$1.MOUSE_DOWN, this._onHold);\n        window.removeEventListener(EVENTS$1.MOUSE_UP, this._onRelease);\n        root.removeEventListener(EVENTS$1.MOUSE_ENTER, this._onMouseEnter);\n        root.removeEventListener(EVENTS$1.MOUSE_MOVE, this._onMouseMove);\n        root.removeEventListener(EVENTS$1.MOUSE_LEAVE, this._onMouseLeave);\n        this._removeFullscreenHandlers();\n        window.clearTimeout(this._timer);\n        controlBar.containerEl.classList.remove(this._fixedClass);\n        if (video) {\n            video.source.removeEventListener(EVENTS$1.VIDEO_PLAY, this._onVideoPlay);\n            video.source.removeEventListener(EVENTS$1.VIDEO_PAUSE, this._onVideoPause);\n        }\n        this._isCursorInside = false;\n        this._isGrabbing = false;\n        this._video = null;\n        this._targetEl = null;\n    }\n    show() {\n        this._clearHideTimer();\n        this._controlBar.containerEl.classList.remove(this._hiddenClass);\n    }\n    showTemporaliy() {\n        this.show();\n        this._hideAfterDelay(this._idleDelay);\n    }\n    hide() {\n        this._clearHideTimer();\n        this._controlBar.containerEl.classList.add(this._hiddenClass);\n    }\n    _clearHideTimer() {\n        if (this._timer) {\n            window.clearTimeout(this._timer);\n            this._timer = -1;\n        }\n    }\n    _hideAfterDelay() {\n        let delay = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this._delay;\n        if (this._isGrabbing || !this._isFullscreen && this._isCursorInside) return;\n        this._clearHideTimer();\n        if (delay <= 0) {\n            this.hide();\n        } else {\n            this._timer = window.setTimeout(()=>{\n                this.hide();\n            }, delay);\n        }\n    }\n    _addFullscreenHandlers() {\n        FULLSCREEN_CHANGE.forEach((evtName)=>{\n            document.addEventListener(evtName, this._onFullscreenChange);\n        });\n    }\n    _removeFullscreenHandlers() {\n        FULLSCREEN_CHANGE.forEach((evtName)=>{\n            document.removeEventListener(evtName, this._onFullscreenChange);\n        });\n    }\n    constructor(controlBar, { initialDelay = 3000, delay = 0, idleDelay: activationDelay = 3000 }){\n        this._onMouseEnter = ()=>{\n            this._isCursorInside = true;\n            this.show();\n        };\n        this._onMouseLeave = ()=>{\n            this._isCursorInside = false;\n            this._hideAfterDelay();\n        };\n        this._onMouseMove = ()=>{\n            if (!this._isFullscreen) return;\n            this.showTemporaliy();\n        };\n        this._onHold = (evt)=>{\n            this._isGrabbing = true;\n            if (evt.pointerType === \"mouse\") {\n                this._isCursorInside = true;\n            }\n            window.addEventListener(EVENTS$1.MOUSE_UP, this._onRelease);\n            this.show();\n        };\n        this._onRelease = ()=>{\n            this._isGrabbing = false;\n            window.removeEventListener(EVENTS$1.MOUSE_UP, this._onRelease);\n            this._hideAfterDelay();\n        };\n        this._onVideoPlay = ()=>{\n            const root = this._targetEl;\n            if (!root) return;\n            this._controlBar.containerEl.classList.remove(this._fixedClass);\n        };\n        this._onVideoPause = ()=>{\n            const root = this._targetEl;\n            if (!root) return;\n            this._controlBar.containerEl.classList.add(this._fixedClass);\n        };\n        this._onFullscreenChange = ()=>{\n            this._isFullscreen = isFullscreen();\n            if (this._isFullscreen) {\n                this._hideAfterDelay();\n            }\n        };\n        this._controlBar = controlBar;\n        this._initialDelay = initialDelay;\n        this._delay = delay;\n        this._idleDelay = activationDelay;\n        this._timer = -1;\n        this._isCursorInside = false;\n        this._isGrabbing = false;\n        this._isFullscreen = false;\n        this._video = null;\n        this._targetEl = null;\n    }\n}\nclass VideoControl {\n    enable(root, video) {\n        this._video = video;\n        // capture is needed for resolving conflict with keyboard control\n        root.addEventListener(EVENTS$1.KEY_DOWN, this._onKeyDown, true);\n    }\n    disable(root) {\n        this._video = null;\n        root.removeEventListener(EVENTS$1.KEY_DOWN, this._onKeyDown, true);\n    }\n    _changeVideoTime(video, forward) {\n        const delta = forward ? 5 : -5;\n        video.currentTime += delta;\n        video.dispatchEvent(new CustomEvent(VIDEO_TIME_CHANGE_EVENT, {\n            detail: {\n                time: video.currentTime\n            }\n        }));\n    }\n    _changeVideoVolume(video, increase) {\n        const delta = increase ? 0.1 : -0.1;\n        if (video.muted) {\n            video.volume = clamp(delta, 0, 1);\n        } else {\n            video.volume = clamp(video.volume + delta, 0, 1);\n        }\n        if (video.volume > 0) {\n            video.muted = false;\n        } else {\n            video.muted = true;\n        }\n    }\n    _toggleVideo(video) {\n        if (video.isPaused()) {\n            video.source.play();\n        } else {\n            video.source.pause();\n        }\n    }\n    constructor(){\n        this._onKeyDown = (event)=>{\n            const video = this._video;\n            if (!video) return;\n            event.preventDefault();\n            event.stopPropagation();\n            const videoEl = video.source;\n            const keyPressed = event.keyCode != null ? DIRECTION_KEY_CODE[event.keyCode] : DIRECTION_KEY_NAME[event.key];\n            switch(keyPressed){\n                case \"LEFT\":\n                case \"RIGHT\":\n                    return this._changeVideoTime(videoEl, keyPressed === \"RIGHT\");\n                case \"UP\":\n                case \"DOWN\":\n                    return this._changeVideoVolume(videoEl, keyPressed === \"UP\");\n            }\n            const spacePressed = event.keyCode === SPACE_KEY_CODE || event.key === SPACE_KEY_NAME;\n            if (spacePressed) {\n                this._toggleVideo(video);\n            }\n        };\n    }\n}\n/**\r\n * A plugin that displays extra buttons & controls that controls {@link View360}.\r\n * @ko {@link View360}에 부가적인 버튼과 컨트롤을 추가해주는 플러그인.\r\n * @category Plugin\r\n * @since 4.0.0\r\n */ class ControlBar {\n    /**\r\n   * Root element of the control bar\r\n   * @ko 컨트롤바의 루트 엘리먼트\r\n   * @since 4.0.0\r\n   */ get rootEl() {\n        return this._rootEl;\n    }\n    /**\r\n   * Container element of the control bar\r\n   * @ko 컨트롤바의 컨테이너 엘리먼트\r\n   * @since 4.0.0\r\n   */ get containerEl() {\n        return this._containerEl;\n    }\n    /**\r\n   * Background element of the control bar\r\n   * @ko 컨트롤바의 배경 엘리먼트\r\n   * @since 4.0.0\r\n   */ get backgroundEl() {\n        return this._bgEl;\n    }\n    /**\r\n   * Control bar's default items created by {@link ControlBarOptions}\r\n   * @ko 주어진 {@link ControlBarOptions}에 의해 생성된 디폴트 아이템들\r\n   * @since 4.0.0\r\n   */ get items() {\n        return this._items;\n    }\n    /**\r\n   * Custom control bar items\r\n   * @ko 커스텀 컨트롤바 아이템들을 추가합니다.\r\n   * @since 4.0.0\r\n   */ get customItems() {\n        return this._customItems;\n    }\n    init(viewer) {\n        const panoRoot = viewer.rootEl;\n        const controlsRoot = this._rootEl;\n        const defaultItems = this._createDefaultItems();\n        this._updateBackground(viewer);\n        this._updateAutoHide(viewer);\n        this._updateKeyboardHandler(viewer);\n        panoRoot.appendChild(controlsRoot);\n        this._addItem(viewer, defaultItems);\n        this._addItem(viewer, this._customItems);\n        viewer.on(EVENTS.PROJECTION_CHANGE, this._onNewSrcLoad);\n        viewer.on(EVENTS.STATIC_CLICK, this._onStaticClick);\n    }\n    destroy(viewer) {\n        // Remove controls root from pano root\n        const panoRoot = viewer.rootEl;\n        const controlsRoot = this._rootEl;\n        const items = this._items;\n        if (controlsRoot.parentElement === panoRoot) {\n            panoRoot.removeChild(controlsRoot);\n        }\n        Object.keys(items).forEach((key)=>{\n            const category = items[key];\n            category.forEach((item)=>{\n                item.destroy(viewer, this);\n            });\n            items[key] = [];\n        });\n        this._clearItemElements();\n        this._autoHider.disable(viewer);\n        this._videoControl.disable(panoRoot);\n        viewer.off(EVENTS.PROJECTION_CHANGE, this._onNewSrcLoad);\n        viewer.off(EVENTS.STATIC_CLICK, this._onStaticClick);\n    }\n    _addItem(viewer, items) {\n        for (const item of items){\n            const category = this._items[item.position];\n            const wrapper = this._wrapperEl[item.position];\n            const nextSiblingIndex = findIndex(category, (sibling)=>sibling.order > item.order);\n            if (nextSiblingIndex >= 0) {\n                const nextSibling = category[nextSiblingIndex].element;\n                category.splice(nextSiblingIndex, 0, item);\n                wrapper.insertBefore(item.element, nextSibling);\n            } else {\n                category.push(item);\n                wrapper.appendChild(item.element);\n            }\n            item.init(viewer, this);\n        }\n    }\n    _createPositionWrappers() {\n        const className = Object.assign(Object.assign({}, ControlBar.DEFAULT_CLASS), this.className);\n        const rootEl = this._rootEl;\n        // BG & FLOATING CONTROLS\n        const backgroundEl = createElement(className.CONTROLS_BG);\n        const floatLeftEl = createElement(className.CONTROLS_FLOAT_LEFT);\n        const floatRightEl = createElement(className.CONTROLS_FLOAT_RIGHT);\n        rootEl.appendChild(floatLeftEl);\n        rootEl.appendChild(floatRightEl);\n        // BOTTOM CONTROLS\n        const container = createElement(className.CONTROLS_MAIN);\n        const topWrapper = createElement(className.CONTROLS_TOP);\n        const bottomWrapper = createElement(className.CONTROLS_BOTTOM);\n        const midWrapper = createElement(className.CONTROLS_MID);\n        const leftControlsWrapper = createElement(className.CONTROLS_LEFT);\n        const rightControlsWrapper = createElement(className.CONTROLS_RIGHT);\n        midWrapper.appendChild(leftControlsWrapper);\n        midWrapper.appendChild(rightControlsWrapper);\n        container.appendChild(backgroundEl);\n        container.appendChild(topWrapper);\n        container.appendChild(midWrapper);\n        container.appendChild(bottomWrapper);\n        rootEl.appendChild(container);\n        this._bgEl = backgroundEl;\n        this._containerEl = container;\n        this._wrapperEl = {\n            [ControlBar.POSITION.MAIN_TOP]: topWrapper,\n            [ControlBar.POSITION.MAIN_LEFT]: leftControlsWrapper,\n            [ControlBar.POSITION.MAIN_RIGHT]: rightControlsWrapper,\n            [ControlBar.POSITION.MAIN_BOTTOM]: bottomWrapper,\n            [ControlBar.POSITION.TOP_LEFT]: floatLeftEl,\n            [ControlBar.POSITION.TOP_RIGHT]: floatRightEl\n        };\n    }\n    _clearItemElements() {\n        const wrappers = Object.keys(ControlBar.POSITION).map((key)=>ControlBar.POSITION[key]).map((pos)=>this._wrapperEl[pos]);\n        // Remove all elements inside wrappers\n        wrappers.forEach((wrapper)=>{\n            while(wrapper.firstChild){\n                wrapper.removeChild(wrapper.firstChild);\n            }\n        });\n    }\n    _updateAutoHide(viewer) {\n        var _a;\n        const autoHide = this.autoHide;\n        const autoHider = this._autoHider;\n        if (autoHide != null) {\n            if (autoHide) {\n                autoHider.enable(viewer);\n            } else {\n                autoHider.disable(viewer);\n            }\n        } else {\n            // Automatically choose whether to show background by content type\n            const texture = (_a = viewer.mesh) === null || _a === void 0 ? void 0 : _a.getTexture();\n            if (texture && texture.isVideo()) {\n                // Enable auto hide when content type is video\n                autoHider.enable(viewer);\n            } else {\n                autoHider.disable(viewer);\n            }\n        }\n    }\n    _updateBackground(viewer) {\n        var _a, _b;\n        const background = this._bgEl;\n        const showBackground = this.showBackground;\n        const hiddenClass = (_a = this.className.HIDDEN) !== null && _a !== void 0 ? _a : ControlBar.DEFAULT_CLASS.HIDDEN;\n        if (showBackground != null) {\n            if (showBackground) {\n                background.classList.remove(hiddenClass);\n            } else {\n                background.classList.add(hiddenClass);\n            }\n        } else {\n            // Automatically choose whether to show background by content type\n            const texture = (_b = viewer.mesh) === null || _b === void 0 ? void 0 : _b.getTexture();\n            if (texture && texture.isVideo()) {\n                // Show bg when content type is video\n                background.classList.remove(hiddenClass);\n            } else {\n                background.classList.add(hiddenClass);\n            }\n        }\n    }\n    _updateKeyboardHandler(viewer) {\n        var _a;\n        const panoRoot = viewer.rootEl;\n        const videoControl = this._videoControl;\n        const texture = (_a = viewer.mesh) === null || _a === void 0 ? void 0 : _a.getTexture();\n        if (this.keyboardControls && texture && texture.isVideo()) {\n            videoControl.enable(panoRoot, texture);\n        } else {\n            videoControl.disable(panoRoot);\n        }\n    }\n    _createDefaultItems() {\n        const items = [];\n        if (this.progressBar) {\n            items.push(new ProgressBar(getObjectOption(this.progressBar)));\n        }\n        if (this.playButton) {\n            items.push(new PlayButton(getObjectOption(this.playButton)));\n        }\n        if (this.volumeButton) {\n            items.push(new VolumeControl(getObjectOption(this.volumeButton)));\n        }\n        if (this.gyroButton) {\n            items.push(new GyroButton(getObjectOption(this.gyroButton)));\n        }\n        if (this.vrButton) {\n            items.push(new VRButton(getObjectOption(this.vrButton)));\n        }\n        if (this.fullscreenButton) {\n            items.push(new FullscreenButton(getObjectOption(this.fullscreenButton)));\n        }\n        if (this.videoTime) {\n            items.push(new VideoTime(getObjectOption(this.videoTime)));\n        }\n        if (this.pieView) {\n            items.push(new PieView(getObjectOption(this.pieView)));\n        }\n        return items;\n    }\n    /**\r\n   * Create new instance of ControlBar.\r\n   * @ko ControlBar의 새 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ autoHide, showBackground, clickToPlay = true, keyboardControls = true, progressBar = true, playButton = true, volumeButton = true, fullscreenButton = true, videoTime = true, pieView = true, vrButton = true, gyroButton = true, className = {}, customItems = [] } = {}){\n        var _a;\n        this._onStaticClick = (param)=>{\n            let { target: viewer, isTouch } = param;\n            var _a;\n            const autoHider = this._autoHider;\n            if (isTouch) {\n                if (!autoHider.enabled) return;\n                if (autoHider.hidden) {\n                    autoHider.showTemporaliy();\n                } else {\n                    autoHider.hide();\n                }\n            } else {\n                if (!this.clickToPlay) return;\n                const video = (_a = viewer.mesh) === null || _a === void 0 ? void 0 : _a.getTexture();\n                if (!video || !video.isVideo()) return;\n                if (video.isPaused()) {\n                    video.source.play();\n                } else {\n                    video.source.pause();\n                }\n            }\n        };\n        this._onNewSrcLoad = (param)=>{\n            let { target: viewer } = param;\n            const items = this._items;\n            this._updateBackground(viewer);\n            this._updateAutoHide(viewer);\n            this._updateKeyboardHandler(viewer);\n            Object.keys(items).forEach((key)=>{\n                const category = items[key];\n                category.forEach((item)=>{\n                    item.destroy(viewer, this);\n                    item.init(viewer, this);\n                });\n            });\n        };\n        this.autoHide = autoHide;\n        this.showBackground = showBackground;\n        this.clickToPlay = clickToPlay;\n        this.keyboardControls = keyboardControls;\n        this.progressBar = progressBar;\n        this.playButton = playButton;\n        this.volumeButton = volumeButton;\n        this.fullscreenButton = fullscreenButton;\n        this.videoTime = videoTime;\n        this.pieView = pieView;\n        this.vrButton = vrButton;\n        this.gyroButton = gyroButton;\n        this.className = Object.assign(Object.assign({}, ControlBar.DEFAULT_CLASS), className);\n        const rootClass = (_a = className.CONTROLS_ROOT) !== null && _a !== void 0 ? _a : ControlBar.DEFAULT_CLASS.CONTROLS_ROOT;\n        this._rootEl = createElement(rootClass);\n        this._createPositionWrappers();\n        this._items = Object.keys(ControlBar.POSITION).reduce((items, key)=>{\n            items[ControlBar.POSITION[key]] = [];\n            return items;\n        }, {});\n        this._customItems = customItems;\n        this._autoHider = new AutoHide(this, getObjectOption(autoHide));\n        this._videoControl = new VideoControl();\n        customItems.forEach((item)=>{\n            this._items[item.position].push(item);\n        });\n    }\n}\n/**\r\n * Default class names that ControlBar uses\r\n * @ko ControlBar가 사용하는 디폴트 클래스 이름들\r\n * @since 4.0.0\r\n */ ControlBar.DEFAULT_CLASS = CONTROL_BAR_DEFAULT_CLASS;\n/**\r\n * Constants for {@link ControlBarItemOptions#position}\r\n * @ko {@link ControlBarItemOptions#position}에 사용 가능한 값들\r\n */ ControlBar.POSITION = CONTROL_BAR_ITEM_POSITION;\n/**\r\n * Base class for projections.\r\n * @ko 프로젝션 베이스 클래스.\r\n * @category Projection\r\n * @since 4.0.0\r\n */ class Projection {\n    /**\r\n   * Update camera to match projection's settings.\r\n   * @ko 현재 프로젝션의 세팅으로 카메라를 업데이트합니다.\r\n   * @param camera - Instance of the camera to update {@ko 업데이트할 카메라의 인스턴스}\r\n   * @since 4.0.0\r\n   */ updateCamera(camera) {\n        // Use default mode & no view restriction\n        camera.resetRange();\n    }\n    /**\r\n   * Update control to match projection's settings.\r\n   * @ko 현재 프로젝션의 세팅으로 컨트롤을 업데이트합니다.\r\n   * @param control - Instance of the control to update {@ko 업데이트할 컨트롤의 인스턴스}\r\n   * @since 4.0.0\r\n   */ updateControl(control) {\n        control.ignoreZoomScale = false;\n    }\n    /**\r\n   * Create new instance\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor({ src, video = false }){\n        this.src = src;\n        this.video = video;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class Uniform {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    destroy(gl) {\n    // DO_NOTHING\n    }\n    constructor(){\n        this.needsUpdate = true;\n    }\n}\nclass UniformTextureCube extends Uniform {\n    destroy(gl) {\n        this.texture.destroy();\n        gl.deleteTexture(this._webglTexture);\n    }\n    update(gl, location, isWebGL2) {\n        const texture = this.texture;\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n        gl.uniform1i(location, 0);\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._webglTexture);\n        const sources = reorderCube(texture.sources, this._cubemapOrder);\n        sources.forEach((src, idx)=>{\n            if (isWebGL2) {\n                gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + idx, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, src);\n            } else {\n                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + idx, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, src);\n            }\n        });\n        if (!texture.isVideo()) {\n            this.needsUpdate = false;\n        }\n    }\n    constructor(ctx, texture, cubemapOrder){\n        super();\n        this.texture = texture;\n        this._webglTexture = ctx.createWebGLCubeTexture(texture, texture.width);\n        this._cubemapOrder = cubemapOrder;\n    }\n}\n/** @hidden */ class CubeTexturePainter {\n    get size() {\n        return this._size;\n    }\n    destroy() {\n        const canvas = this._canvas;\n        // release memories\n        canvas.width = 1;\n        canvas.height = 1;\n        this._canvas = null;\n    }\n    draw(gl, isWebGL2) {\n        const size = this._size;\n        const texture = this.texture;\n        let surfaceIdx = 0;\n        for(let row = 0; row < this._row; row++){\n            for(let column = 0; column < this._column; column++){\n                const x = size * column;\n                const y = size * row;\n                const renderingFace = this._renderingOrder[surfaceIdx];\n                this._ctx.drawImage(texture.source, x, y, size, size, 0, 0, size, size);\n                if (isWebGL2) {\n                    gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderingFace, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, this._canvas);\n                } else {\n                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderingFace, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._canvas);\n                }\n                surfaceIdx++;\n            }\n        }\n    }\n    _calcRenderingSize() {\n        const { width, height } = this.texture;\n        const aspect = width / height;\n        if (aspect === 1 / 6) {\n            this._size = width;\n            this._row = 6;\n            this._column = 1;\n        } else if (aspect === 6) {\n            this._size = height;\n            this._row = 1;\n            this._column = 6;\n        } else if (aspect === 2 / 3) {\n            this._size = width * 0.5;\n            this._row = 3;\n            this._column = 2;\n        } else {\n            this._size = width / 3;\n            this._row = 2;\n            this._column = 3;\n        }\n    }\n    constructor(texture, cubemapOrder){\n        this.texture = texture;\n        this._renderingOrder = reorderCube(range(6), cubemapOrder);\n        const canvas = document.createElement(\"canvas\");\n        this._calcRenderingSize();\n        canvas.width = this._size;\n        canvas.height = this._size;\n        this._canvas = canvas;\n        this._ctx = canvas.getContext(\"2d\");\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class UniformCanvasCube extends Uniform {\n    get texture() {\n        return this._painter.texture;\n    }\n    destroy(gl) {\n        gl.deleteTexture(this._webglTexture);\n        this._painter.destroy();\n    }\n    update(gl, location, isWebGL2) {\n        const texture = this.texture;\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n        gl.uniform1i(location, 0);\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._webglTexture);\n        this._painter.draw(gl, isWebGL2);\n        if (!texture.isVideo()) {\n            this.needsUpdate = false;\n        }\n    }\n    constructor(ctx, texture, cubemapOrder){\n        super();\n        this._painter = new CubeTexturePainter(texture, cubemapOrder);\n        this._webglTexture = ctx.createWebGLCubeTexture(texture, this._painter.size);\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @hidden\r\n */ class TriangleMesh extends Object3D {\n    destroy(ctx) {\n        ctx.releaseVAO(this.vao);\n        ctx.releaseShaderResources(this.program);\n    }\n    getTexture() {\n        return this.program.uniforms.uTexture.texture;\n    }\n    constructor(vao, program){\n        super();\n        this.vao = vao;\n        this.program = program;\n    }\n}\nclass ShaderProgram {\n    constructor(ctx, vertexShader, fragmentShader, uniforms){\n        this.program = ctx.createProgram(vertexShader, fragmentShader);\n        this.uniforms = uniforms;\n        this.uniformLocations = ctx.getUniformLocations(this.program, uniforms);\n    }\n}\n/**\r\n * @hidden\r\n */ class VertexData {\n    /** */ constructor(data, itemSize){\n        this.data = data;\n        this.itemSize = itemSize;\n        this.count = data.length / itemSize;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @hidden\r\n */ class Geometry {\n    /** */ constructor(vertices, indicies, uvs){\n        this.vertices = new VertexData(new Float32Array(vertices), 3);\n        this.indicies = new VertexData(new Uint16Array(indicies), 1);\n        this.uvs = new VertexData(new Float32Array(uvs), 2);\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @hidden\r\n */ class CubeGeometry extends Geometry {\n    constructor({ order, rotateUV }){\n        const vertices = [\n            // back\n            1,\n            -1,\n            1,\n            -1,\n            -1,\n            1,\n            -1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            // front\n            -1,\n            -1,\n            -1,\n            1,\n            -1,\n            -1,\n            1,\n            1,\n            -1,\n            -1,\n            1,\n            -1,\n            // up\n            -1,\n            1,\n            -1,\n            1,\n            1,\n            -1,\n            1,\n            1,\n            1,\n            -1,\n            1,\n            1,\n            // down\n            -1,\n            -1,\n            1,\n            1,\n            -1,\n            1,\n            1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            // right\n            1,\n            -1,\n            -1,\n            1,\n            -1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            -1,\n            // left\n            -1,\n            -1,\n            1,\n            -1,\n            -1,\n            -1,\n            -1,\n            1,\n            -1,\n            -1,\n            1,\n            1\n        ];\n        const indicies = [\n            0,\n            1,\n            2,\n            0,\n            2,\n            3,\n            4,\n            5,\n            6,\n            4,\n            6,\n            7,\n            8,\n            9,\n            10,\n            8,\n            10,\n            11,\n            12,\n            13,\n            14,\n            12,\n            14,\n            15,\n            16,\n            17,\n            18,\n            16,\n            18,\n            19,\n            20,\n            21,\n            22,\n            20,\n            22,\n            23\n        ];\n        const oneThird = 1 / 3;\n        const coords = [];\n        for(let r = 1; r >= 0; r--){\n            for(let c = 0; c < 3; c++){\n                const coord = [\n                    c * oneThird,\n                    r * 0.5,\n                    (c + 1) * oneThird,\n                    r * 0.5,\n                    (c + 1) * oneThird,\n                    (r + 1) * 0.5,\n                    c * oneThird,\n                    (r + 1) * 0.5\n                ];\n                coords.push(coord);\n            }\n        }\n        if (rotateUV) {\n            rotateUV.forEach((degree, idx)=>{\n                if (degree === ROTATE.ZERO) return;\n                const coord = coords[idx];\n                let newOrder;\n                if (degree === ROTATE.CW_90) {\n                    newOrder = [\n                        1,\n                        2,\n                        3,\n                        0\n                    ];\n                } else if (degree === ROTATE.CCW_90) {\n                    newOrder = [\n                        3,\n                        0,\n                        1,\n                        2\n                    ];\n                } else {\n                    newOrder = [\n                        2,\n                        3,\n                        0,\n                        1\n                    ];\n                }\n                const newCoords = Array(coord.length);\n                for(let uvIdx = 0; uvIdx < coord.length / 2; uvIdx++){\n                    newCoords[uvIdx * 2 + 0] = coord[newOrder[uvIdx] * 2 + 0];\n                    newCoords[uvIdx * 2 + 1] = coord[newOrder[uvIdx] * 2 + 1];\n                }\n                coords[idx] = newCoords;\n            });\n        }\n        const uvs = reorderCube(coords, order, \"BFUDRL\").reduce((acc, val)=>acc.concat(val), []);\n        super(vertices, indicies, uvs);\n    }\n}\nvar vs$3 = \"#define GLSLIFY 1\\nattribute vec3 position;attribute vec2 uv;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying highp vec3 vPos;void main(){vPos=position;gl_Position=uPMatrix*uMVMatrix*vec4(position,1.0);}\"; // eslint-disable-line\nvar fs$3 = \"#define GLSLIFY 1\\nuniform samplerCube uTexture;varying highp vec3 vPos;void main(){gl_FragColor=textureCube(uTexture,vec3(vPos.x,vPos.y,-vPos.z));}\"; // eslint-disable-line\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Projection based on cubemap images, accepts both multiple or single images.\r\n * @ko 큐브맵 이미지 기반의 프로젝션, 단일 혹은 여러 장의 이미지를 모두 사용 가능합니다.\r\n * @since 4.0.0\r\n * @category Projection\r\n */ class CubemapProjection extends Projection {\n    createMesh(ctx, texture) {\n        const cubemapOrder = this._cubemapOrder;\n        const cubemapFlipX = this._cubemapFlipX;\n        const uniforms = {\n            uTexture: texture.isCube() ? new UniformTextureCube(ctx, texture, cubemapOrder) : new UniformCanvasCube(ctx, texture, cubemapOrder)\n        };\n        const geometry = new CubeGeometry({\n            order: cubemapOrder\n        });\n        const program = new ShaderProgram(ctx, vs$3, fs$3, uniforms);\n        const vao = ctx.createVAO(geometry, program);\n        const mesh = new TriangleMesh(vao, program);\n        if (cubemapFlipX) {\n            mesh.scale[0] = -1;\n        }\n        mesh.updateMatrix();\n        return mesh;\n    }\n    /**\r\n   * Create new instance.\r\n   * @ko 새 인스턴스를 생성합니다.\r\n   * @param options Options {@ko Options}\r\n   */ constructor(options){\n        super(options);\n        const { cubemapOrder = \"RLUDFB\", cubemapFlipX = false } = options;\n        this._cubemapOrder = cubemapOrder;\n        this._cubemapFlipX = cubemapFlipX;\n    }\n}\nclass UniformTexture2D extends Uniform {\n    destroy(gl) {\n        this.texture.destroy();\n        gl.deleteTexture(this._webglTexture);\n    }\n    update(gl, location, isWebGL2) {\n        const texture = this.texture;\n        const isVideo = texture.isVideo();\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n        gl.uniform1i(location, 0);\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this._webglTexture);\n        if (!isVideo && isWebGL2) {\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source);\n        }\n        if (!isVideo) {\n            this.needsUpdate = false;\n        }\n    }\n    constructor(ctx, texture){\n        super();\n        this.texture = texture;\n        this._webglTexture = ctx.createWebGLTexture(texture);\n    }\n}\nvar vs$2 = \"#define GLSLIFY 1\\nattribute vec3 position;attribute vec2 uv;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying highp vec2 vUV;void main(){vUV=uv;gl_Position=uPMatrix*uMVMatrix*vec4(position,1.0);}\"; // eslint-disable-line\nvar fs$2 = \"#define GLSLIFY 1\\nuniform sampler2D uTexture;varying highp vec2 vUV;void main(){gl_FragColor=texture2D(uTexture,vUV.st);}\"; // eslint-disable-line\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Projection based on cubemap strip.\r\n * Slightly more efficient than {@link CubemapProjection} as it doesn't copy cubemap image to canvas while rendering.\r\n * Accepts only single image.\r\n * @ko 큐브맵 스트립 기반의 프로젝션.\r\n * {@link CubemapProjection}와 달리 렌더링하는 과정에 캔버스에 이미지를 복사하는 과정이 없기 때문에 살짝 더 효율적입니다.\r\n * 단일 이미지만 사용 가능합니다.\r\n * @since 4.0.0\r\n * @category Projection\r\n */ class CubestripProjection extends Projection {\n    createMesh(ctx, texture) {\n        const cubemapOrder = this._cubemapOrder;\n        const cubemapFlipX = this._cubemapFlipX;\n        const uniforms = {\n            uTexture: new UniformTexture2D(ctx, texture)\n        };\n        const geometry = new CubeGeometry({\n            order: cubemapOrder\n        });\n        const program = new ShaderProgram(ctx, vs$2, fs$2, uniforms);\n        const vao = ctx.createVAO(geometry, program);\n        const mesh = new TriangleMesh(vao, program);\n        if (cubemapFlipX) {\n            mesh.scale[0] = -1;\n        }\n        mesh.updateMatrix();\n        return mesh;\n    }\n    /**\r\n   * Create new instance.\r\n   * @ko 새 인스턴스를 생성합니다.\r\n   * @param options Options {@ko Options}\r\n   */ constructor(options){\n        super(options);\n        const { cubemapOrder = \"RLUDFB\", cubemapFlipX = false } = options;\n        this._cubemapOrder = cubemapOrder;\n        this._cubemapFlipX = cubemapFlipX;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @hidden\r\n */ class CylinderGeometry extends Geometry {\n    constructor(maxTheta){\n        const vertices = [];\n        const indicies = [];\n        const uvs = [];\n        const height = 1;\n        const radialSegments = 60;\n        const halfHeight = height * 0.5;\n        const heightSegments = [\n            -halfHeight,\n            halfHeight\n        ];\n        const invRadialSegments = 1 / radialSegments;\n        const angleConst = maxTheta * invRadialSegments;\n        for(let yIdx = 0; yIdx < 2; yIdx++){\n            const y = heightSegments[yIdx];\n            for(let lngIdx = 0; lngIdx <= radialSegments; lngIdx++){\n                const angle = lngIdx * angleConst + Math.PI - maxTheta * 0.5;\n                const x = Math.cos(angle);\n                const z = Math.sin(angle);\n                const u = lngIdx * invRadialSegments;\n                const v = yIdx;\n                uvs.push(u, v);\n                vertices.push(x, y, z);\n                if (yIdx === 0 && lngIdx < radialSegments) {\n                    const a = lngIdx;\n                    const b = a + radialSegments + 1;\n                    indicies.push(a, b, a + 1, b, b + 1, a + 1);\n                }\n            }\n        }\n        super(vertices, indicies, uvs);\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n*/ /**\r\n * Projection based on cylindrical projection.\r\n * This can show panorama images taken from smartphones.\r\n * @ko 원통 투영법 기반의 프로젝션.\r\n * 일반적인 스마트폰 파노라마 사진을 표시하는데 사용될 수 있습니다.\r\n * @since 4.0.0\r\n * @category Projection\r\n */ class CylindricalProjection extends Projection {\n    createMesh(ctx, texture) {\n        if (this._mesh) return this._mesh;\n        const partial = this._partial;\n        const { width, height } = texture;\n        const aspect = width / height;\n        const halfVFov = 180 / aspect;\n        const cylinderHeight = partial ? 1 : 2 * Math.tan(halfVFov * DEG_TO_RAD);\n        const cylinderTheta = partial ? aspect : 2 * Math.PI;\n        const geometry = new CylinderGeometry(cylinderTheta);\n        const program = new ShaderProgram(ctx, vs$2, fs$2, {\n            uTexture: new UniformTexture2D(ctx, texture)\n        });\n        const vao = ctx.createVAO(geometry, program);\n        const mesh = new TriangleMesh(vao, program);\n        mesh.scale[1] = cylinderHeight;\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.identity(mesh.rotation);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.rotateY(mesh.rotation, mesh.rotation, -Math.PI / 2);\n        mesh.updateMatrix();\n        this._aspect = aspect;\n        this._halfHeight = cylinderHeight * 0.5;\n        this._mesh = mesh;\n        return mesh;\n    }\n    updateCamera(camera) {\n        super.updateCamera(camera);\n        const mesh = this._mesh;\n        const aspect = this._aspect;\n        const halfHeight = this._halfHeight;\n        if (!mesh) return;\n        if (this._partial) {\n            const restrictedYaw = 0.5 * aspect * RAD_TO_DEG;\n            camera.restrictYawRange(-restrictedYaw, restrictedYaw);\n        }\n        const restrictedPitch = Math.atan2(halfHeight, 1) * RAD_TO_DEG;\n        const minZoom = Math.tan(camera.fov * DEG_TO_RAD * 0.5) / (halfHeight * camera.aspect);\n        camera.restrictPitchRange(-restrictedPitch, restrictedPitch);\n        camera.restrictZoomRange(minZoom, Infinity);\n        camera.restrictRenderHeight(halfHeight * 2);\n    }\n    /**\r\n   * Create new instance.\r\n   * @ko 새 인스턴스를 생성합니다.\r\n   * @param options Options {@ko Options}\r\n   */ constructor(options){\n        super(options);\n        const { partial = false } = options;\n        this._partial = partial;\n        this._aspect = 1;\n        this._halfHeight = 0;\n        this._mesh = null;\n    }\n}\nvar fs$1 = \"#define PI 3.14159265359\\nprecision mediump float;\\n#define GLSLIFY 1\\nuniform sampler2D uTexture;varying highp vec2 vUV;const vec2 OPERATE_COORDS_RANGE=vec2(-1.0,1.0);const vec2 TEXTURE_COORDS_RANGE=vec2(0.0,1.0);const float ONE_THIRD=1.0/3.0;const float EAC_CONST=2.0/PI;float scale(vec2 domainRange,vec2 targetRange,float val){float unit=1.0/(domainRange[1]-domainRange[0]);return targetRange[0]+(targetRange[1]-targetRange[0])*(val-domainRange[0])*unit;}void main(void){float transformedCoordX;float transformedCoordY;float texRangeXStart=floor(vUV.s*3.)*ONE_THIRD;float texRangeYStart=floor(vUV.t*2.)*0.5;vec2 orgTextureRangeX=vec2(texRangeXStart,texRangeXStart+ONE_THIRD);vec2 orgTextureRangeY=vec2(texRangeYStart,texRangeYStart+0.5);float px=scale(orgTextureRangeX,OPERATE_COORDS_RANGE,vUV.s);float py=scale(orgTextureRangeY,OPERATE_COORDS_RANGE,vUV.t);float qu=EAC_CONST*atan(px)+0.5;float qv=EAC_CONST*atan(py)+0.5;transformedCoordX=scale(TEXTURE_COORDS_RANGE,orgTextureRangeX,qu);transformedCoordY=scale(TEXTURE_COORDS_RANGE,orgTextureRangeY,qv);gl_FragColor=texture2D(uTexture,vec2(transformedCoordX,transformedCoordY));}\"; // eslint-disable-line\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Equi-Angular Cubemap Projection.\r\n * This format is used by Youtube's 360 videos.\r\n * @ko Equi-Angular Cubemap 프로젝션.\r\n * 이 포맷은 주로 Youtube의 360 비디오에 사용됩니다.\r\n * @since 4.0.0\r\n * @category Projection\r\n */ class EquiangularProjection extends Projection {\n    createMesh(ctx, texture) {\n        const uniforms = {\n            uTexture: new UniformTexture2D(ctx, texture)\n        };\n        const geometry = new CubeGeometry({\n            order: \"LFRDBU\",\n            rotateUV: [\n                ROTATE.ZERO,\n                ROTATE.ZERO,\n                ROTATE.ZERO,\n                ROTATE.CW_90,\n                ROTATE.CCW_90,\n                ROTATE.CW_90\n            ]\n        });\n        const program = new ShaderProgram(ctx, vs$2, fs$1, uniforms);\n        const vao = ctx.createVAO(geometry, program);\n        const mesh = new TriangleMesh(vao, program);\n        return mesh;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @hidden\r\n */ class SphereGeometry extends Geometry {\n    /** */ constructor(){\n        // const radius = 1;\n        const widthSegments = 60;\n        const heightSegments = 60;\n        const ANGLE_CORRECTION_FOR_CENTER_ALIGN = -0.5 * Math.PI;\n        const uvs = [];\n        const vertices = [];\n        const indicies = [];\n        let latIdx;\n        let lngIdx;\n        for(latIdx = 0; latIdx <= widthSegments; latIdx++){\n            const theta = (latIdx / widthSegments - 0.5) * Math.PI;\n            const sinTheta = Math.sin(theta);\n            const cosTheta = Math.cos(theta);\n            for(lngIdx = 0; lngIdx <= heightSegments; lngIdx++){\n                const phi = (lngIdx / heightSegments - 0.5) * 2 * Math.PI + ANGLE_CORRECTION_FOR_CENTER_ALIGN;\n                const sinPhi = Math.sin(phi);\n                const cosPhi = Math.cos(phi);\n                const x = cosPhi * cosTheta;\n                const y = sinTheta;\n                const z = sinPhi * cosTheta;\n                const u = lngIdx / heightSegments;\n                const v = latIdx / widthSegments;\n                uvs.push(u, v);\n                vertices.push(x, y, z);\n                if (lngIdx !== heightSegments && latIdx !== widthSegments) {\n                    const a = latIdx * (heightSegments + 1) + lngIdx;\n                    const b = a + heightSegments + 1;\n                    indicies.push(a, a + 1, b, b, a + 1, b + 1);\n                }\n            }\n        }\n        super(vertices, indicies, uvs);\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Projection based on equirectangular projection.\r\n * @ko 등 장방형 도법(Equirectangular projection) 기반의 프로젝션\r\n * @since 4.0.0\r\n * @category Projection\r\n */ class EquirectProjection extends Projection {\n    createMesh(ctx, texture) {\n        const uniforms = {\n            uTexture: new UniformTexture2D(ctx, texture)\n        };\n        const geometry = new SphereGeometry();\n        const program = new ShaderProgram(ctx, vs$2, fs$2, uniforms);\n        const vao = ctx.createVAO(geometry, program);\n        const mesh = new TriangleMesh(vao, program);\n        return mesh;\n    }\n    /**\r\n   * Create new instance\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor(options){\n        super(options);\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class UniformFloat extends Uniform {\n    update(gl, location) {\n        gl.uniform1f(location, this.val);\n        this.needsUpdate = false;\n    }\n    constructor(val){\n        super();\n        this.val = val;\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * @hidden\r\n */ class PlaneGeometry extends Geometry {\n    /** */ constructor(width = 2, height = 2, z = -1){\n        const halfWidth = width * 0.5;\n        const halfHeight = height * 0.5;\n        const vertices = [\n            -halfWidth,\n            -halfHeight,\n            z,\n            halfWidth,\n            -halfHeight,\n            z,\n            -halfWidth,\n            halfHeight,\n            z,\n            halfWidth,\n            halfHeight,\n            z\n        ];\n        const indicies = [\n            0,\n            1,\n            2,\n            2,\n            1,\n            3\n        ];\n        const uvs = [\n            0,\n            0,\n            1,\n            0,\n            0,\n            1,\n            1,\n            1\n        ];\n        super(vertices, indicies, uvs);\n    }\n}\nvar vs$1 = \"#define GLSLIFY 1\\nattribute vec3 position;attribute vec2 uv;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying highp vec2 vUV;void main(){vUV=uv;gl_Position=vec4(position,1.0);}\"; // eslint-disable-line\nvar fs = \"precision mediump float;\\n#define GLSLIFY 1\\nuniform sampler2D uTexture;uniform float uYaw;uniform float uPitch;uniform float uZoom;varying highp vec2 vUV;const float PI=3.1415926536;const float PI_2=PI*0.5;vec2 toStereographicUV(in vec2 uv,in vec2 center){float R=1.*uZoom;vec2 texLatLon=(uv*2.-1.)*vec2(PI,PI_2);vec2 central=(center*2.-1.)*vec2(PI,PI_2)+vec2(PI,0);float x=texLatLon.x;float y=texLatLon.y;float rou=sqrt(x*x+y*y);float c=2.0*atan(rou,R*0.5);float sin_c=sin(c);float cos_c=cos(c);float sin_cy=sin(central.y);float cos_cy=cos(central.y);float lat=asin(cos_c*sin_cy+(y*sin_c*cos_cy)/rou);float lon=central.x+atan(x*sin_c,rou*cos_cy*cos_c-y*sin_cy*sin_c);float u=(lon/PI+1.0)*0.5;float v=(lat/PI_2+1.0)*0.5;return vec2(u,v);}void main(){vec2 central=vec2(uYaw,uPitch);vec2 uv=toStereographicUV(vUV,central);gl_FragColor=texture2D(uTexture,uv);}\"; // eslint-disable-line\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Projection based on so-called \"Little planet\" or \"Tiny planet\" effect.\r\n * @ko \"Little planet\" 혹은 \"Tiny planet\"로 불리는 이펙트 기반의 프로젝션\r\n * @since 4.0.0\r\n * @category Projection\r\n */ class LittlePlanetProjection extends Projection {\n    createMesh(ctx, texture) {\n        texture.wrapS = WebGLRenderingContext.REPEAT;\n        texture.wrapT = WebGLRenderingContext.REPEAT;\n        const uniforms = {\n            uTexture: new UniformTexture2D(ctx, texture),\n            uYaw: new UniformFloat(0),\n            uPitch: new UniformFloat(0.5),\n            uZoom: new UniformFloat(1)\n        };\n        const geometry = new PlaneGeometry();\n        const program = new ShaderProgram(ctx, vs$1, fs, uniforms);\n        const vao = ctx.createVAO(geometry, program);\n        const mesh = new TriangleMesh(vao, program);\n        mesh.on(OBJECT_3D_EVENTS.UPDATE, (param)=>{\n            let { camera } = param;\n            const uniforms = mesh.program.uniforms;\n            uniforms.uYaw.val = camera.yaw / 360;\n            // Range from 0 ~ 1\n            uniforms.uPitch.val = camera.pitch / 180 + 0.5;\n            uniforms.uZoom.val = camera.zoom;\n            uniforms.uYaw.needsUpdate = true;\n            uniforms.uPitch.needsUpdate = true;\n            uniforms.uZoom.needsUpdate = true;\n        });\n        return mesh;\n    }\n    updateControl(control) {\n        control.ignoreZoomScale = true;\n    }\n    /**\r\n   * Create new instance\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor(options){\n        super(options);\n    }\n}\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ class UniformVector4Array extends Uniform {\n    update(gl, location) {\n        gl.uniform4fv(location, this.val.reduce((arr, vector)=>[\n                ...arr,\n                ...vector\n            ], []));\n        this.needsUpdate = false;\n    }\n    constructor(val){\n        super();\n        this.val = val;\n    }\n}\nvar vs = \"#define GLSLIFY 1\\nattribute vec3 position;attribute vec2 uv;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;uniform vec4 uTexScaleOffset[2];uniform float uEye;varying highp vec2 vUV;void main(){vec4 scaleOffset=uTexScaleOffset[int(uEye)];vUV=uv.xy*scaleOffset.xy+scaleOffset.zw;gl_Position=uPMatrix*uMVMatrix*vec4(position,1.0);}\"; // eslint-disable-line\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */ /**\r\n * Projection based on stereo equirectangular images.\r\n * @ko Stereo equirectangular 이미지 기반의 프로젝션\r\n * @since 4.0.0\r\n * @category Projection\r\n */ class StereoEquiProjection extends Projection {\n    createMesh(ctx, texture) {\n        let leftEye;\n        let rightEye;\n        switch(this._mode){\n            case StereoEquiProjection.MODE.LEFT_RIGHT:\n                leftEye = [\n                    0.5,\n                    1,\n                    0,\n                    0\n                ];\n                rightEye = [\n                    0.5,\n                    1,\n                    0.5,\n                    0\n                ];\n                break;\n            default:\n                // Default, uses \"top_bottom\"\n                leftEye = [\n                    1,\n                    0.5,\n                    0,\n                    0\n                ];\n                rightEye = [\n                    1,\n                    0.5,\n                    0,\n                    0.5\n                ];\n        }\n        const uniforms = {\n            uTexture: new UniformTexture2D(ctx, texture),\n            uEye: new UniformFloat(0),\n            uTexScaleOffset: new UniformVector4Array([\n                leftEye,\n                rightEye\n            ])\n        };\n        const geometry = new SphereGeometry();\n        const program = new ShaderProgram(ctx, vs, fs$2, uniforms);\n        const vao = ctx.createVAO(geometry, program);\n        const mesh = new TriangleMesh(vao, program);\n        return mesh;\n    }\n    /**\r\n   * Create new instance\r\n   * @ko 새로운 인스턴스를 생성합니다.\r\n   * @param options - Options {@ko 옵션들}\r\n   */ constructor(options){\n        super(options);\n        this._mode = options.mode;\n    }\n}\n/**\r\n * Available stereoscopic modes\r\n * @ko 사용가능한 스테레오스코픽 모드들\r\n * @since 4.0.0\r\n */ StereoEquiProjection.MODE = {\n    /**\r\n   * @ko 이미지가 왼쪽/오른쪽으로 구성되어있을 경우\r\n   * @since 4.0.0\r\n   */ LEFT_RIGHT: \"left_right\",\n    /**\r\n   * @ko 이미지가 위/아래로 구성되어있을 경우\r\n   * @since 4.0.0\r\n   */ TOP_BOTTOM: \"top_bottom\"\n};\n/**\r\n * @hidden\r\n */ const withMethods = (prototype, attr)=>{\n    [\n        _egjs_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype,\n        View360.prototype\n    ].forEach((proto)=>{\n        Object.getOwnPropertyNames(proto).filter((name)=>name.charAt(0) !== \"_\" && name !== \"constructor\").forEach((name)=>{\n            const descriptor = Object.getOwnPropertyDescriptor(proto, name);\n            if (descriptor.value) {\n                // Public Function\n                Object.defineProperty(prototype, name, {\n                    value: function() {\n                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                            args[_key] = arguments[_key];\n                        }\n                        return descriptor.value.call(this[attr], ...args);\n                    }\n                });\n            } else {\n                const getterDescriptor = {};\n                if (descriptor.get) {\n                    getterDescriptor.get = function() {\n                        var _a;\n                        return this[attr] && ((_a = descriptor.get) === null || _a === void 0 ? void 0 : _a.call(this[attr]));\n                    };\n                }\n                if (descriptor.set) {\n                    getterDescriptor.set = function() {\n                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                            args[_key] = arguments[_key];\n                        }\n                        var _a;\n                        return (_a = descriptor.set) === null || _a === void 0 ? void 0 : _a.call(this[attr], ...args);\n                    };\n                }\n                Object.defineProperty(prototype, name, getterDescriptor);\n            }\n        });\n    });\n};\n/**\r\n * @hidden\r\n */ const getValidProps = (propsObj)=>{\n    return Object.keys(propsObj).reduce((props, propName)=>{\n        if (propsObj[propName] != null) {\n            props[propName] = propsObj[propName];\n        }\n        return props;\n    }, {});\n};\nconst VIEW360_METHODS = [\n    \"destroy\",\n    \"init\",\n    \"load\",\n    \"resize\",\n    \"addPlugins\",\n    \"removePlugins\",\n    \"renderFrame\",\n    // @egjs/component methods\n    \"on\",\n    \"hasOn\",\n    \"once\",\n    \"off\",\n    \"trigger\"\n];\n/*\r\n * Copyright (c) 2023-present NAVER Corp.\r\n * egjs projects are licensed under the MIT license\r\n */  //# sourceMappingURL=view360.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@egjs/view360/dist/view360.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRAY_TYPE: function() { return /* binding */ ARRAY_TYPE; },\n/* harmony export */   EPSILON: function() { return /* binding */ EPSILON; },\n/* harmony export */   RANDOM: function() { return /* binding */ RANDOM; },\n/* harmony export */   equals: function() { return /* binding */ equals; },\n/* harmony export */   setMatrixArrayType: function() { return /* binding */ setMatrixArrayType; },\n/* harmony export */   toRadian: function() { return /* binding */ toRadian; }\n/* harmony export */ });\n/**\n * Common utilities\n * @module glMatrix\n */ // Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== \"undefined\" ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */ function setMatrixArrayType(type) {\n    ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */ function toRadian(a) {\n    return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */ function equals(a, b) {\n    return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function() {\n    var y = 0, i = arguments.length;\n    while(i--){\n        y += arguments[i] * arguments[i];\n    }\n    return Math.sqrt(y);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FDRCwwQkFBMEI7QUFDbkIsSUFBSUEsVUFBVSxTQUFTO0FBQ3ZCLElBQUlDLGFBQWEsT0FBT0MsaUJBQWlCLGNBQWNBLGVBQWVDLE1BQU07QUFDNUUsSUFBSUMsU0FBU0MsS0FBS0MsTUFBTSxDQUFDO0FBQ2hDOzs7O0NBSUMsR0FFTSxTQUFTQyxtQkFBbUJDLElBQUk7SUFDckNQLGFBQWFPO0FBQ2Y7QUFDQSxJQUFJQyxTQUFTSixLQUFLSyxFQUFFLEdBQUc7QUFDdkI7Ozs7Q0FJQyxHQUVNLFNBQVNDLFNBQVNDLENBQUM7SUFDeEIsT0FBT0EsSUFBSUg7QUFDYjtBQUNBOzs7Ozs7OztDQVFDLEdBRU0sU0FBU0ksT0FBT0QsQ0FBQyxFQUFFRSxDQUFDO0lBQ3pCLE9BQU9ULEtBQUtVLEdBQUcsQ0FBQ0gsSUFBSUUsTUFBTWQsVUFBVUssS0FBS1csR0FBRyxDQUFDLEtBQUtYLEtBQUtVLEdBQUcsQ0FBQ0gsSUFBSVAsS0FBS1UsR0FBRyxDQUFDRDtBQUMxRTtBQUNBLElBQUksQ0FBQ1QsS0FBS1ksS0FBSyxFQUFFWixLQUFLWSxLQUFLLEdBQUc7SUFDNUIsSUFBSUMsSUFBSSxHQUNKQyxJQUFJQyxVQUFVQyxNQUFNO0lBRXhCLE1BQU9GLElBQUs7UUFDVkQsS0FBS0UsU0FBUyxDQUFDRCxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsRUFBRTtJQUNsQztJQUVBLE9BQU9kLEtBQUtpQixJQUFJLENBQUNKO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL2NvbW1vbi5qcz81ZDNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29tbW9uIHV0aWxpdGllc1xuICogQG1vZHVsZSBnbE1hdHJpeFxuICovXG4vLyBDb25maWd1cmF0aW9uIENvbnN0YW50c1xuZXhwb3J0IHZhciBFUFNJTE9OID0gMC4wMDAwMDE7XG5leHBvcnQgdmFyIEFSUkFZX1RZUEUgPSB0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyA/IEZsb2F0MzJBcnJheSA6IEFycmF5O1xuZXhwb3J0IHZhciBSQU5ET00gPSBNYXRoLnJhbmRvbTtcbi8qKlxuICogU2V0cyB0aGUgdHlwZSBvZiBhcnJheSB1c2VkIHdoZW4gY3JlYXRpbmcgbmV3IHZlY3RvcnMgYW5kIG1hdHJpY2VzXG4gKlxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXlDb25zdHJ1Y3RvciB8IEFycmF5Q29uc3RydWN0b3J9IHR5cGUgQXJyYXkgdHlwZSwgc3VjaCBhcyBGbG9hdDMyQXJyYXkgb3IgQXJyYXlcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0TWF0cml4QXJyYXlUeXBlKHR5cGUpIHtcbiAgQVJSQVlfVFlQRSA9IHR5cGU7XG59XG52YXIgZGVncmVlID0gTWF0aC5QSSAvIDE4MDtcbi8qKlxuICogQ29udmVydCBEZWdyZWUgVG8gUmFkaWFuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGEgQW5nbGUgaW4gRGVncmVlc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0b1JhZGlhbihhKSB7XG4gIHJldHVybiBhICogZGVncmVlO1xufVxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCB0aGUgYXJndW1lbnRzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSB2YWx1ZSwgd2l0aGluIGFuIGFic29sdXRlXG4gKiBvciByZWxhdGl2ZSB0b2xlcmFuY2Ugb2YgZ2xNYXRyaXguRVBTSUxPTiAoYW4gYWJzb2x1dGUgdG9sZXJhbmNlIGlzIHVzZWQgZm9yIHZhbHVlcyBsZXNzXG4gKiB0aGFuIG9yIGVxdWFsIHRvIDEuMCwgYW5kIGEgcmVsYXRpdmUgdG9sZXJhbmNlIGlzIHVzZWQgZm9yIGxhcmdlciB2YWx1ZXMpXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGEgVGhlIGZpcnN0IG51bWJlciB0byB0ZXN0LlxuICogQHBhcmFtIHtOdW1iZXJ9IGIgVGhlIHNlY29uZCBudW1iZXIgdG8gdGVzdC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBudW1iZXJzIGFyZSBhcHByb3hpbWF0ZWx5IGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBNYXRoLmFicyhhIC0gYikgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYSksIE1hdGguYWJzKGIpKTtcbn1cbmlmICghTWF0aC5oeXBvdCkgTWF0aC5oeXBvdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHkgPSAwLFxuICAgICAgaSA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHkgKz0gYXJndW1lbnRzW2ldICogYXJndW1lbnRzW2ldO1xuICB9XG5cbiAgcmV0dXJuIE1hdGguc3FydCh5KTtcbn07Il0sIm5hbWVzIjpbIkVQU0lMT04iLCJBUlJBWV9UWVBFIiwiRmxvYXQzMkFycmF5IiwiQXJyYXkiLCJSQU5ET00iLCJNYXRoIiwicmFuZG9tIiwic2V0TWF0cml4QXJyYXlUeXBlIiwidHlwZSIsImRlZ3JlZSIsIlBJIiwidG9SYWRpYW4iLCJhIiwiZXF1YWxzIiwiYiIsImFicyIsIm1heCIsImh5cG90IiwieSIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzcXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gl-matrix/esm/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gl-matrix/esm/mat3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat3.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   adjoint: function() { return /* binding */ adjoint; },\n/* harmony export */   clone: function() { return /* binding */ clone; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   create: function() { return /* binding */ create; },\n/* harmony export */   determinant: function() { return /* binding */ determinant; },\n/* harmony export */   equals: function() { return /* binding */ equals; },\n/* harmony export */   exactEquals: function() { return /* binding */ exactEquals; },\n/* harmony export */   frob: function() { return /* binding */ frob; },\n/* harmony export */   fromMat2d: function() { return /* binding */ fromMat2d; },\n/* harmony export */   fromMat4: function() { return /* binding */ fromMat4; },\n/* harmony export */   fromQuat: function() { return /* binding */ fromQuat; },\n/* harmony export */   fromRotation: function() { return /* binding */ fromRotation; },\n/* harmony export */   fromScaling: function() { return /* binding */ fromScaling; },\n/* harmony export */   fromTranslation: function() { return /* binding */ fromTranslation; },\n/* harmony export */   fromValues: function() { return /* binding */ fromValues; },\n/* harmony export */   identity: function() { return /* binding */ identity; },\n/* harmony export */   invert: function() { return /* binding */ invert; },\n/* harmony export */   mul: function() { return /* binding */ mul; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   multiplyScalar: function() { return /* binding */ multiplyScalar; },\n/* harmony export */   multiplyScalarAndAdd: function() { return /* binding */ multiplyScalarAndAdd; },\n/* harmony export */   normalFromMat4: function() { return /* binding */ normalFromMat4; },\n/* harmony export */   projection: function() { return /* binding */ projection; },\n/* harmony export */   rotate: function() { return /* binding */ rotate; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   str: function() { return /* binding */ str; },\n/* harmony export */   sub: function() { return /* binding */ sub; },\n/* harmony export */   subtract: function() { return /* binding */ subtract; },\n/* harmony export */   translate: function() { return /* binding */ translate; },\n/* harmony export */   transpose: function() { return /* binding */ transpose; }\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 3x3 Matrix\n * @module mat3\n */ /**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[5] = 0;\n        out[6] = 0;\n        out[7] = 0;\n    }\n    out[0] = 1;\n    out[4] = 1;\n    out[8] = 1;\n    return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */ function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */ function clone(a) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */ function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */ function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */ function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */ function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */ function invert(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2];\n    var a10 = a[3], a11 = a[4], a12 = a[5];\n    var a20 = a[6], a21 = a[7], a22 = a[8];\n    var b01 = a22 * a11 - a12 * a21;\n    var b11 = -a22 * a10 + a12 * a20;\n    var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n    var det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */ function adjoint(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2];\n    var a10 = a[3], a11 = a[4], a12 = a[5];\n    var a20 = a[6], a21 = a[7], a22 = a[8];\n    out[0] = a11 * a22 - a12 * a21;\n    out[1] = a02 * a21 - a01 * a22;\n    out[2] = a01 * a12 - a02 * a11;\n    out[3] = a12 * a20 - a10 * a22;\n    out[4] = a00 * a22 - a02 * a20;\n    out[5] = a02 * a10 - a00 * a12;\n    out[6] = a10 * a21 - a11 * a20;\n    out[7] = a01 * a20 - a00 * a21;\n    out[8] = a00 * a11 - a01 * a10;\n    return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */ function determinant(a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2];\n    var a10 = a[3], a11 = a[4], a12 = a[5];\n    var a20 = a[6], a21 = a[7], a22 = a[8];\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */ function multiply(out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2];\n    var a10 = a[3], a11 = a[4], a12 = a[5];\n    var a20 = a[6], a21 = a[7], a22 = a[8];\n    var b00 = b[0], b01 = b[1], b02 = b[2];\n    var b10 = b[3], b11 = b[4], b12 = b[5];\n    var b20 = b[6], b21 = b[7], b22 = b[8];\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */ function translate(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */ function rotate(out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/ function scale(out, a, v) {\n    var x = v[0], y = v[1];\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */ function fromTranslation(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */ function fromRotation(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */ function fromScaling(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/ function fromMat2d(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */ function fromQuat(out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var yx = y * x2;\n    var yy = y * y2;\n    var zx = z * x2;\n    var zy = z * y2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n    return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */ function normalFromMat4(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    var b00 = a00 * a11 - a01 * a10;\n    var b01 = a00 * a12 - a02 * a10;\n    var b02 = a00 * a13 - a03 * a10;\n    var b03 = a01 * a12 - a02 * a11;\n    var b04 = a01 * a13 - a03 * a11;\n    var b05 = a02 * a13 - a03 * a12;\n    var b06 = a20 * a31 - a21 * a30;\n    var b07 = a20 * a32 - a22 * a30;\n    var b08 = a20 * a33 - a23 * a30;\n    var b09 = a21 * a32 - a22 * a31;\n    var b10 = a21 * a33 - a23 * a31;\n    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */ function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */ function str(a) {\n    return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */ function frob(a) {\n    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */ function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */ function multiplyScalarAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    out[6] = a[6] + b[6] * scale;\n    out[7] = a[7] + b[7] * scale;\n    out[8] = a[8] + b[8] * scale;\n    return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */ function equals(a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n    return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */ var sub = subtract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gl-matrix/esm/mat3.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gl-matrix/esm/mat4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat4.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   adjoint: function() { return /* binding */ adjoint; },\n/* harmony export */   clone: function() { return /* binding */ clone; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   create: function() { return /* binding */ create; },\n/* harmony export */   determinant: function() { return /* binding */ determinant; },\n/* harmony export */   equals: function() { return /* binding */ equals; },\n/* harmony export */   exactEquals: function() { return /* binding */ exactEquals; },\n/* harmony export */   frob: function() { return /* binding */ frob; },\n/* harmony export */   fromQuat: function() { return /* binding */ fromQuat; },\n/* harmony export */   fromQuat2: function() { return /* binding */ fromQuat2; },\n/* harmony export */   fromRotation: function() { return /* binding */ fromRotation; },\n/* harmony export */   fromRotationTranslation: function() { return /* binding */ fromRotationTranslation; },\n/* harmony export */   fromRotationTranslationScale: function() { return /* binding */ fromRotationTranslationScale; },\n/* harmony export */   fromRotationTranslationScaleOrigin: function() { return /* binding */ fromRotationTranslationScaleOrigin; },\n/* harmony export */   fromScaling: function() { return /* binding */ fromScaling; },\n/* harmony export */   fromTranslation: function() { return /* binding */ fromTranslation; },\n/* harmony export */   fromValues: function() { return /* binding */ fromValues; },\n/* harmony export */   fromXRotation: function() { return /* binding */ fromXRotation; },\n/* harmony export */   fromYRotation: function() { return /* binding */ fromYRotation; },\n/* harmony export */   fromZRotation: function() { return /* binding */ fromZRotation; },\n/* harmony export */   frustum: function() { return /* binding */ frustum; },\n/* harmony export */   getRotation: function() { return /* binding */ getRotation; },\n/* harmony export */   getScaling: function() { return /* binding */ getScaling; },\n/* harmony export */   getTranslation: function() { return /* binding */ getTranslation; },\n/* harmony export */   identity: function() { return /* binding */ identity; },\n/* harmony export */   invert: function() { return /* binding */ invert; },\n/* harmony export */   lookAt: function() { return /* binding */ lookAt; },\n/* harmony export */   mul: function() { return /* binding */ mul; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   multiplyScalar: function() { return /* binding */ multiplyScalar; },\n/* harmony export */   multiplyScalarAndAdd: function() { return /* binding */ multiplyScalarAndAdd; },\n/* harmony export */   ortho: function() { return /* binding */ ortho; },\n/* harmony export */   orthoNO: function() { return /* binding */ orthoNO; },\n/* harmony export */   orthoZO: function() { return /* binding */ orthoZO; },\n/* harmony export */   perspective: function() { return /* binding */ perspective; },\n/* harmony export */   perspectiveFromFieldOfView: function() { return /* binding */ perspectiveFromFieldOfView; },\n/* harmony export */   perspectiveNO: function() { return /* binding */ perspectiveNO; },\n/* harmony export */   perspectiveZO: function() { return /* binding */ perspectiveZO; },\n/* harmony export */   rotate: function() { return /* binding */ rotate; },\n/* harmony export */   rotateX: function() { return /* binding */ rotateX; },\n/* harmony export */   rotateY: function() { return /* binding */ rotateY; },\n/* harmony export */   rotateZ: function() { return /* binding */ rotateZ; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   str: function() { return /* binding */ str; },\n/* harmony export */   sub: function() { return /* binding */ sub; },\n/* harmony export */   subtract: function() { return /* binding */ subtract; },\n/* harmony export */   targetTo: function() { return /* binding */ targetTo; },\n/* harmony export */   translate: function() { return /* binding */ translate; },\n/* harmony export */   transpose: function() { return /* binding */ transpose; }\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */ /**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[11] = 0;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n    }\n    out[0] = 1;\n    out[5] = 1;\n    out[10] = 1;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */ function clone(a) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */ function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */ function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */ function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */ function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3];\n        var a12 = a[6], a13 = a[7];\n        var a23 = a[11];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */ function invert(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    var b00 = a00 * a11 - a01 * a10;\n    var b01 = a00 * a12 - a02 * a10;\n    var b02 = a00 * a13 - a03 * a10;\n    var b03 = a01 * a12 - a02 * a11;\n    var b04 = a01 * a13 - a03 * a11;\n    var b05 = a02 * a13 - a03 * a12;\n    var b06 = a20 * a31 - a21 * a30;\n    var b07 = a20 * a32 - a22 * a30;\n    var b08 = a20 * a33 - a23 * a30;\n    var b09 = a21 * a32 - a22 * a31;\n    var b10 = a21 * a33 - a23 * a31;\n    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */ function adjoint(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n    return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */ function determinant(a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    var b00 = a00 * a11 - a01 * a10;\n    var b01 = a00 * a12 - a02 * a10;\n    var b02 = a00 * a13 - a03 * a10;\n    var b03 = a01 * a12 - a02 * a11;\n    var b04 = a01 * a13 - a03 * a11;\n    var b05 = a02 * a13 - a03 * a12;\n    var b06 = a20 * a31 - a21 * a30;\n    var b07 = a20 * a32 - a22 * a30;\n    var b08 = a20 * a33 - a23 * a30;\n    var b09 = a21 * a32 - a22 * a31;\n    var b10 = a21 * a33 - a23 * a31;\n    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */ function multiply(out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15]; // Cache only the current line of the second matrix\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */ function translate(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n    var a00, a01, a02, a03;\n    var a10, a11, a12, a13;\n    var a20, a21, a22, a23;\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n    return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/ function scale(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */ function rotate(out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2];\n    var len = Math.hypot(x, y, z);\n    var s, c, t;\n    var a00, a01, a02, a03;\n    var a10, a11, a12, a13;\n    var a20, a21, a22, a23;\n    var b00, b01, b02;\n    var b10, b11, b12;\n    var b20, b21, b22;\n    if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n        return null;\n    }\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11]; // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function rotateX(out, a, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    var a10 = a[4];\n    var a11 = a[5];\n    var a12 = a[6];\n    var a13 = a[7];\n    var a20 = a[8];\n    var a21 = a[9];\n    var a22 = a[10];\n    var a23 = a[11];\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged rows\n        out[0] = a[0];\n        out[1] = a[1];\n        out[2] = a[2];\n        out[3] = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    } // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function rotateY(out, a, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a03 = a[3];\n    var a20 = a[8];\n    var a21 = a[9];\n    var a22 = a[10];\n    var a23 = a[11];\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged rows\n        out[4] = a[4];\n        out[5] = a[5];\n        out[6] = a[6];\n        out[7] = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    } // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function rotateZ(out, a, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a03 = a[3];\n    var a10 = a[4];\n    var a11 = a[5];\n    var a12 = a[6];\n    var a13 = a[7];\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[8] = a[8];\n        out[9] = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    } // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */ function fromTranslation(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */ function fromScaling(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */ function fromRotation(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2];\n    var len = Math.hypot(x, y, z);\n    var s, c, t;\n    if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n        return null;\n    }\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c; // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function fromXRotation(out, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function fromYRotation(out, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = 0;\n    out[2] = -s;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function fromZRotation(out, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */ function fromRotationTranslation(out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var xy = x * y2;\n    var xz = x * z2;\n    var yy = y * y2;\n    var yz = y * z2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */ function fromQuat2(out, a) {\n    var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];\n    var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n    if (magnitude > 0) {\n        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n    } else {\n        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n    }\n    fromRotationTranslation(out, a, translation);\n    return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n    return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getScaling(out, mat) {\n    var m11 = mat[0];\n    var m12 = mat[1];\n    var m13 = mat[2];\n    var m21 = mat[4];\n    var m22 = mat[5];\n    var m23 = mat[6];\n    var m31 = mat[8];\n    var m32 = mat[9];\n    var m33 = mat[10];\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n    return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */ function getRotation(out, mat) {\n    var scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    getScaling(scaling, mat);\n    var is1 = 1 / scaling[0];\n    var is2 = 1 / scaling[1];\n    var is3 = 1 / scaling[2];\n    var sm11 = mat[0] * is1;\n    var sm12 = mat[1] * is2;\n    var sm13 = mat[2] * is3;\n    var sm21 = mat[4] * is1;\n    var sm22 = mat[5] * is2;\n    var sm23 = mat[6] * is3;\n    var sm31 = mat[8] * is1;\n    var sm32 = mat[9] * is2;\n    var sm33 = mat[10] * is3;\n    var trace = sm11 + sm22 + sm33;\n    var S = 0;\n    if (trace > 0) {\n        S = Math.sqrt(trace + 1.0) * 2;\n        out[3] = 0.25 * S;\n        out[0] = (sm23 - sm32) / S;\n        out[1] = (sm31 - sm13) / S;\n        out[2] = (sm12 - sm21) / S;\n    } else if (sm11 > sm22 && sm11 > sm33) {\n        S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n        out[3] = (sm23 - sm32) / S;\n        out[0] = 0.25 * S;\n        out[1] = (sm12 + sm21) / S;\n        out[2] = (sm31 + sm13) / S;\n    } else if (sm22 > sm33) {\n        S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n        out[3] = (sm31 - sm13) / S;\n        out[0] = (sm12 + sm21) / S;\n        out[1] = 0.25 * S;\n        out[2] = (sm23 + sm32) / S;\n    } else {\n        S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n        out[3] = (sm12 - sm21) / S;\n        out[0] = (sm31 + sm13) / S;\n        out[1] = (sm23 + sm32) / S;\n        out[2] = 0.25 * S;\n    }\n    return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */ function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var xy = x * y2;\n    var xz = x * z2;\n    var yy = y * y2;\n    var yz = y * z2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    var sx = s[0];\n    var sy = s[1];\n    var sz = s[2];\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */ function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var xy = x * y2;\n    var xz = x * z2;\n    var yy = y * y2;\n    var yz = y * z2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    var sx = s[0];\n    var sy = s[1];\n    var sz = s[2];\n    var ox = o[0];\n    var oy = o[1];\n    var oz = o[2];\n    var out0 = (1 - (yy + zz)) * sx;\n    var out1 = (xy + wz) * sx;\n    var out2 = (xz - wy) * sx;\n    var out4 = (xy - wz) * sy;\n    var out5 = (1 - (xx + zz)) * sy;\n    var out6 = (yz + wx) * sy;\n    var out8 = (xz + wy) * sz;\n    var out9 = (yz - wx) * sz;\n    var out10 = (1 - (xx + yy)) * sz;\n    out[0] = out0;\n    out[1] = out1;\n    out[2] = out2;\n    out[3] = 0;\n    out[4] = out4;\n    out[5] = out5;\n    out[6] = out6;\n    out[7] = 0;\n    out[8] = out8;\n    out[9] = out9;\n    out[10] = out10;\n    out[11] = 0;\n    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n    out[15] = 1;\n    return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */ function fromQuat(out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var yx = y * x2;\n    var yy = y * y2;\n    var zx = z * x2;\n    var zy = z * y2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */ function frustum(out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left);\n    var tb = 1 / (top - bottom);\n    var nf = 1 / (near - far);\n    out[0] = near * 2 * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = near * 2 * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = far * near * 2 * nf;\n    out[15] = 0;\n    return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */ function perspectiveNO(out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2), nf;\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n        nf = 1 / (near - far);\n        out[10] = (far + near) * nf;\n        out[14] = 2 * far * near * nf;\n    } else {\n        out[10] = -1;\n        out[14] = -2 * near;\n    }\n    return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */ var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */ function perspectiveZO(out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2), nf;\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n        nf = 1 / (near - far);\n        out[10] = far * nf;\n        out[14] = far * near * nf;\n    } else {\n        out[10] = -1;\n        out[14] = -near;\n    }\n    return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function perspectiveFromFieldOfView(out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n    var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n    var xScale = 2.0 / (leftTan + rightTan);\n    var yScale = 2.0 / (upTan + downTan);\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = (upTan - downTan) * yScale * 0.5;\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = far * near / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function orthoNO(out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right);\n    var bt = 1 / (bottom - top);\n    var nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */ var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function orthoZO(out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right);\n    var bt = 1 / (bottom - top);\n    var nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = near * nf;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */ function lookAt(out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n    var eyex = eye[0];\n    var eyey = eye[1];\n    var eyez = eye[2];\n    var upx = up[0];\n    var upy = up[1];\n    var upz = up[2];\n    var centerx = center[0];\n    var centery = center[1];\n    var centerz = center[2];\n    if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n        return identity(out);\n    }\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n    len = 1 / Math.hypot(z0, z1, z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.hypot(x0, x1, x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n    len = Math.hypot(y0, y1, y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */ function targetTo(out, eye, target, up) {\n    var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];\n    var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];\n    var len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n    var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */ function str(a) {\n    return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */ function frob(a) {\n    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */ function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */ function multiplyScalarAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    out[6] = a[6] + b[6] * scale;\n    out[7] = a[7] + b[7] * scale;\n    out[8] = a[8] + b[8] * scale;\n    out[9] = a[9] + b[9] * scale;\n    out[10] = a[10] + b[10] * scale;\n    out[11] = a[11] + b[11] * scale;\n    out[12] = a[12] + b[12] * scale;\n    out[13] = a[13] + b[13] * scale;\n    out[14] = a[14] + b[14] * scale;\n    out[15] = a[15] + b[15] * scale;\n    return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */ function equals(a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];\n    var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];\n    var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];\n    var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];\n    var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */ var sub = subtract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gl-matrix/esm/mat4.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gl-matrix/esm/quat.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   calculateW: function() { return /* binding */ calculateW; },\n/* harmony export */   clone: function() { return /* binding */ clone; },\n/* harmony export */   conjugate: function() { return /* binding */ conjugate; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   create: function() { return /* binding */ create; },\n/* harmony export */   dot: function() { return /* binding */ dot; },\n/* harmony export */   equals: function() { return /* binding */ equals; },\n/* harmony export */   exactEquals: function() { return /* binding */ exactEquals; },\n/* harmony export */   exp: function() { return /* binding */ exp; },\n/* harmony export */   fromEuler: function() { return /* binding */ fromEuler; },\n/* harmony export */   fromMat3: function() { return /* binding */ fromMat3; },\n/* harmony export */   fromValues: function() { return /* binding */ fromValues; },\n/* harmony export */   getAngle: function() { return /* binding */ getAngle; },\n/* harmony export */   getAxisAngle: function() { return /* binding */ getAxisAngle; },\n/* harmony export */   identity: function() { return /* binding */ identity; },\n/* harmony export */   invert: function() { return /* binding */ invert; },\n/* harmony export */   len: function() { return /* binding */ len; },\n/* harmony export */   length: function() { return /* binding */ length; },\n/* harmony export */   lerp: function() { return /* binding */ lerp; },\n/* harmony export */   ln: function() { return /* binding */ ln; },\n/* harmony export */   mul: function() { return /* binding */ mul; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   normalize: function() { return /* binding */ normalize; },\n/* harmony export */   pow: function() { return /* binding */ pow; },\n/* harmony export */   random: function() { return /* binding */ random; },\n/* harmony export */   rotateX: function() { return /* binding */ rotateX; },\n/* harmony export */   rotateY: function() { return /* binding */ rotateY; },\n/* harmony export */   rotateZ: function() { return /* binding */ rotateZ; },\n/* harmony export */   rotationTo: function() { return /* binding */ rotationTo; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   setAxes: function() { return /* binding */ setAxes; },\n/* harmony export */   setAxisAngle: function() { return /* binding */ setAxisAngle; },\n/* harmony export */   slerp: function() { return /* binding */ slerp; },\n/* harmony export */   sqlerp: function() { return /* binding */ sqlerp; },\n/* harmony export */   sqrLen: function() { return /* binding */ sqrLen; },\n/* harmony export */   squaredLength: function() { return /* binding */ squaredLength; },\n/* harmony export */   str: function() { return /* binding */ str; }\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/common.js\");\n/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/mat3.js\");\n/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec4.js */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/vec4.js\");\n\n\n\n\n/**\n * Quaternion\n * @module quat\n */ /**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = 0;\n    }\n    out[3] = 1;\n    return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */ function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/ function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */ function getAxisAngle(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */ function getAngle(a, b) {\n    var dotproduct = dot(a, b);\n    return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */ function multiply(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    var bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateX(out, a, rad) {\n    rad *= 0.5;\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    var bx = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateY(out, a, rad) {\n    rad *= 0.5;\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    var by = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateZ(out, a, rad) {\n    rad *= 0.5;\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    var bz = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */ function calculateW(out, a) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */ function exp(out, a) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    var r = Math.sqrt(x * x + y * y + z * z);\n    var et = Math.exp(w);\n    var s = r > 0 ? et * Math.sin(r) / r : 0;\n    out[0] = x * s;\n    out[1] = y * s;\n    out[2] = z * s;\n    out[3] = et * Math.cos(r);\n    return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */ function ln(out, a) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    var r = Math.sqrt(x * x + y * y + z * z);\n    var t = r > 0 ? Math.atan2(r, w) / r : 0;\n    out[0] = x * t;\n    out[1] = y * t;\n    out[2] = z * t;\n    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n    return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */ function pow(out, a, b) {\n    ln(out, a);\n    scale(out, out, b);\n    exp(out, out);\n    return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */ function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    var bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    var omega, cosom, sinom, scale0, scale1; // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    } // calculate coefficients\n    if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    } // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */ function random(out) {\n    // Implementation of http://planning.cs.uiuc.edu/node198.html\n    // TODO: Calling random 3 times is probably not the fastest solution\n    var u1 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM();\n    var u2 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM();\n    var u3 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM();\n    var sqrt1MinusU1 = Math.sqrt(1 - u1);\n    var sqrtU1 = Math.sqrt(u1);\n    out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n    out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n    out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n    out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n    return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */ function invert(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */ function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */ function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        var j = (i + 1) % 3;\n        var k = (i + 2) % 3;\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n    return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */ function fromEuler(out, x, y, z) {\n    var halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n    var sx = Math.sin(x);\n    var cx = Math.cos(x);\n    var sy = Math.sin(y);\n    var cy = Math.cos(y);\n    var sz = Math.sin(z);\n    var cz = Math.cos(z);\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n    return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */ function str(a) {\n    return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */ var clone = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */ var fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */ var copy = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */ var set = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */ var add = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */ var scale = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */ var dot = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */ var lerp = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */ var length = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */ var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */ var squaredLength = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */ var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */ var normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ var exactEquals = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ var equals = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */ var rotationTo = function() {\n    var tmpvec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.create();\n    var xUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.fromValues(1, 0, 0);\n    var yUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 1, 0);\n    return function(out, a, b) {\n        var dot = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.dot(a, b);\n        if (dot < -0.999999) {\n            _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, xUnitVec3, a);\n            if (_vec3_js__WEBPACK_IMPORTED_MODULE_2__.len(tmpvec3) < 0.000001) _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, yUnitVec3, a);\n            _vec3_js__WEBPACK_IMPORTED_MODULE_2__.normalize(tmpvec3, tmpvec3);\n            setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return normalize(out, out);\n        }\n    };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */ var sqlerp = function() {\n    var temp1 = create();\n    var temp2 = create();\n    return function(out, a, b, c, d, t) {\n        slerp(temp1, a, d, t);\n        slerp(temp2, b, c, t);\n        slerp(out, temp1, temp2, 2 * t * (1 - t));\n        return out;\n    };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */ var setAxes = function() {\n    var matr = _mat3_js__WEBPACK_IMPORTED_MODULE_3__.create();\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n        return normalize(out, fromMat3(out, matr));\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gl-matrix/esm/quat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gl-matrix/esm/vec2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec2.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   angle: function() { return /* binding */ angle; },\n/* harmony export */   ceil: function() { return /* binding */ ceil; },\n/* harmony export */   clone: function() { return /* binding */ clone; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   create: function() { return /* binding */ create; },\n/* harmony export */   cross: function() { return /* binding */ cross; },\n/* harmony export */   dist: function() { return /* binding */ dist; },\n/* harmony export */   distance: function() { return /* binding */ distance; },\n/* harmony export */   div: function() { return /* binding */ div; },\n/* harmony export */   divide: function() { return /* binding */ divide; },\n/* harmony export */   dot: function() { return /* binding */ dot; },\n/* harmony export */   equals: function() { return /* binding */ equals; },\n/* harmony export */   exactEquals: function() { return /* binding */ exactEquals; },\n/* harmony export */   floor: function() { return /* binding */ floor; },\n/* harmony export */   forEach: function() { return /* binding */ forEach; },\n/* harmony export */   fromValues: function() { return /* binding */ fromValues; },\n/* harmony export */   inverse: function() { return /* binding */ inverse; },\n/* harmony export */   len: function() { return /* binding */ len; },\n/* harmony export */   length: function() { return /* binding */ length; },\n/* harmony export */   lerp: function() { return /* binding */ lerp; },\n/* harmony export */   max: function() { return /* binding */ max; },\n/* harmony export */   min: function() { return /* binding */ min; },\n/* harmony export */   mul: function() { return /* binding */ mul; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   negate: function() { return /* binding */ negate; },\n/* harmony export */   normalize: function() { return /* binding */ normalize; },\n/* harmony export */   random: function() { return /* binding */ random; },\n/* harmony export */   rotate: function() { return /* binding */ rotate; },\n/* harmony export */   round: function() { return /* binding */ round; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   scaleAndAdd: function() { return /* binding */ scaleAndAdd; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   sqrDist: function() { return /* binding */ sqrDist; },\n/* harmony export */   sqrLen: function() { return /* binding */ sqrLen; },\n/* harmony export */   squaredDistance: function() { return /* binding */ squaredDistance; },\n/* harmony export */   squaredLength: function() { return /* binding */ squaredLength; },\n/* harmony export */   str: function() { return /* binding */ str; },\n/* harmony export */   sub: function() { return /* binding */ sub; },\n/* harmony export */   subtract: function() { return /* binding */ subtract; },\n/* harmony export */   transformMat2: function() { return /* binding */ transformMat2; },\n/* harmony export */   transformMat2d: function() { return /* binding */ transformMat2d; },\n/* harmony export */   transformMat3: function() { return /* binding */ transformMat3; },\n/* harmony export */   transformMat4: function() { return /* binding */ transformMat4; },\n/* harmony export */   zero: function() { return /* binding */ zero; }\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */ /**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[0] = 0;\n        out[1] = 0;\n    }\n    return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */ function clone(a) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */ function fromValues(x, y) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */ function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */ function ceil(out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */ function floor(out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function min(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function max(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */ function round(out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */ function scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */ function distance(a, b) {\n    var x = b[0] - a[0], y = b[1] - a[1];\n    return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */ function squaredDistance(a, b) {\n    var x = b[0] - a[0], y = b[1] - a[1];\n    return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    var x = a[0], y = a[1];\n    return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */ function squaredLength(a) {\n    var x = a[0], y = a[1];\n    return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */ function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */ function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */ function normalize(out, a) {\n    var x = a[0], y = a[1];\n    var len = x * x + y * y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */ function cross(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */ function lerp(out, a, b, t) {\n    var ax = a[0], ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */ function random(out, scale) {\n    scale = scale || 1.0;\n    var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */ function transformMat2(out, a, m) {\n    var x = a[0], y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */ function transformMat2d(out, a, m) {\n    var x = a[0], y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */ function transformMat3(out, a, m) {\n    var x = a[0], y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */ function transformMat4(out, a, m) {\n    var x = a[0];\n    var y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */ function rotate(out, a, b, rad) {\n    //Translate point to the origin\n    var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad); //perform rotation and translate to correct position\n    out[0] = p0 * cosC - p1 * sinC + b[0];\n    out[1] = p0 * sinC + p1 * cosC + b[1];\n    return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */ function angle(a, b) {\n    var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], // mag is the product of the magnitudes of a and b\n    mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), // mag &&.. short circuits if mag == 0\n    cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */ function zero(out) {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */ function str(a) {\n    return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function equals(a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */ var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */ var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */ var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */ var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */ var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */ var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */ var forEach = function() {\n    var vec = create();\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if (!stride) {\n            stride = 2;\n        }\n        if (!offset) {\n            offset = 0;\n        }\n        if (count) {\n            l = Math.min(count * stride + offset, a.length);\n        } else {\n            l = a.length;\n        }\n        for(i = offset; i < l; i += stride){\n            vec[0] = a[i];\n            vec[1] = a[i + 1];\n            fn(vec, vec, arg);\n            a[i] = vec[0];\n            a[i + 1] = vec[1];\n        }\n        return a;\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gl-matrix/esm/vec2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   angle: function() { return /* binding */ angle; },\n/* harmony export */   bezier: function() { return /* binding */ bezier; },\n/* harmony export */   ceil: function() { return /* binding */ ceil; },\n/* harmony export */   clone: function() { return /* binding */ clone; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   create: function() { return /* binding */ create; },\n/* harmony export */   cross: function() { return /* binding */ cross; },\n/* harmony export */   dist: function() { return /* binding */ dist; },\n/* harmony export */   distance: function() { return /* binding */ distance; },\n/* harmony export */   div: function() { return /* binding */ div; },\n/* harmony export */   divide: function() { return /* binding */ divide; },\n/* harmony export */   dot: function() { return /* binding */ dot; },\n/* harmony export */   equals: function() { return /* binding */ equals; },\n/* harmony export */   exactEquals: function() { return /* binding */ exactEquals; },\n/* harmony export */   floor: function() { return /* binding */ floor; },\n/* harmony export */   forEach: function() { return /* binding */ forEach; },\n/* harmony export */   fromValues: function() { return /* binding */ fromValues; },\n/* harmony export */   hermite: function() { return /* binding */ hermite; },\n/* harmony export */   inverse: function() { return /* binding */ inverse; },\n/* harmony export */   len: function() { return /* binding */ len; },\n/* harmony export */   length: function() { return /* binding */ length; },\n/* harmony export */   lerp: function() { return /* binding */ lerp; },\n/* harmony export */   max: function() { return /* binding */ max; },\n/* harmony export */   min: function() { return /* binding */ min; },\n/* harmony export */   mul: function() { return /* binding */ mul; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   negate: function() { return /* binding */ negate; },\n/* harmony export */   normalize: function() { return /* binding */ normalize; },\n/* harmony export */   random: function() { return /* binding */ random; },\n/* harmony export */   rotateX: function() { return /* binding */ rotateX; },\n/* harmony export */   rotateY: function() { return /* binding */ rotateY; },\n/* harmony export */   rotateZ: function() { return /* binding */ rotateZ; },\n/* harmony export */   round: function() { return /* binding */ round; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   scaleAndAdd: function() { return /* binding */ scaleAndAdd; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   sqrDist: function() { return /* binding */ sqrDist; },\n/* harmony export */   sqrLen: function() { return /* binding */ sqrLen; },\n/* harmony export */   squaredDistance: function() { return /* binding */ squaredDistance; },\n/* harmony export */   squaredLength: function() { return /* binding */ squaredLength; },\n/* harmony export */   str: function() { return /* binding */ str; },\n/* harmony export */   sub: function() { return /* binding */ sub; },\n/* harmony export */   subtract: function() { return /* binding */ subtract; },\n/* harmony export */   transformMat3: function() { return /* binding */ transformMat3; },\n/* harmony export */   transformMat4: function() { return /* binding */ transformMat4; },\n/* harmony export */   transformQuat: function() { return /* binding */ transformQuat; },\n/* harmony export */   zero: function() { return /* binding */ zero; }\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */ /**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = 0;\n    }\n    return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */ function clone(a) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */ function fromValues(x, y, z) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */ function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */ function ceil(out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */ function floor(out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function min(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function max(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */ function round(out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */ function scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */ function distance(a, b) {\n    var x = b[0] - a[0];\n    var y = b[1] - a[1];\n    var z = b[2] - a[2];\n    return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */ function squaredDistance(a, b) {\n    var x = b[0] - a[0];\n    var y = b[1] - a[1];\n    var z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */ function squaredLength(a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */ function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */ function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */ function normalize(out, a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    var len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function cross(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2];\n    var bx = b[0], by = b[1], bz = b[2];\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */ function lerp(out, a, b, t) {\n    var ax = a[0];\n    var ay = a[1];\n    var az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */ function hermite(out, a, b, c, d, t) {\n    var factorTimes2 = t * t;\n    var factor1 = factorTimes2 * (2 * t - 3) + 1;\n    var factor2 = factorTimes2 * (t - 2) + t;\n    var factor3 = factorTimes2 * (t - 1);\n    var factor4 = factorTimes2 * (3 - 2 * t);\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n    return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */ function bezier(out, a, b, c, d, t) {\n    var inverseFactor = 1 - t;\n    var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n    var factorTimes2 = t * t;\n    var factor1 = inverseFactorTimesTwo * inverseFactor;\n    var factor2 = 3 * t * inverseFactorTimesTwo;\n    var factor3 = 3 * factorTimes2 * inverseFactor;\n    var factor4 = factorTimes2 * t;\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n    return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */ function random(out, scale) {\n    scale = scale || 1.0;\n    var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n    var z = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 - 1.0;\n    var zScale = Math.sqrt(1.0 - z * z) * scale;\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */ function transformMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */ function transformMat3(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */ function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    var qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    var x = a[0], y = a[1], z = a[2]; // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n    var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n    var w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2; // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */ function rotateX(out, a, b, rad) {\n    var p = [], r = []; //Translate point to the origin\n    p[0] = a[0] - b[0];\n    p[1] = a[1] - b[1];\n    p[2] = a[2] - b[2]; //perform rotation\n    r[0] = p[0];\n    r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n    r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n    out[0] = r[0] + b[0];\n    out[1] = r[1] + b[1];\n    out[2] = r[2] + b[2];\n    return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */ function rotateY(out, a, b, rad) {\n    var p = [], r = []; //Translate point to the origin\n    p[0] = a[0] - b[0];\n    p[1] = a[1] - b[1];\n    p[2] = a[2] - b[2]; //perform rotation\n    r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n    r[1] = p[1];\n    r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n    out[0] = r[0] + b[0];\n    out[1] = r[1] + b[1];\n    out[2] = r[2] + b[2];\n    return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */ function rotateZ(out, a, b, rad) {\n    var p = [], r = []; //Translate point to the origin\n    p[0] = a[0] - b[0];\n    p[1] = a[1] - b[1];\n    p[2] = a[2] - b[2]; //perform rotation\n    r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n    r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n    r[2] = p[2]; //translate to correct position\n    out[0] = r[0] + b[0];\n    out[1] = r[1] + b[1];\n    out[2] = r[2] + b[2];\n    return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */ function angle(a, b) {\n    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */ function zero(out) {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */ function str(a) {\n    return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function equals(a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */ var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */ var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */ var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */ var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */ var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */ var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */ var forEach = function() {\n    var vec = create();\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if (!stride) {\n            stride = 3;\n        }\n        if (!offset) {\n            offset = 0;\n        }\n        if (count) {\n            l = Math.min(count * stride + offset, a.length);\n        } else {\n            l = a.length;\n        }\n        for(i = offset; i < l; i += stride){\n            vec[0] = a[i];\n            vec[1] = a[i + 1];\n            vec[2] = a[i + 2];\n            fn(vec, vec, arg);\n            a[i] = vec[0];\n            a[i + 1] = vec[1];\n            a[i + 2] = vec[2];\n        }\n        return a;\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gl-matrix/esm/vec3.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gl-matrix/esm/vec4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec4.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   ceil: function() { return /* binding */ ceil; },\n/* harmony export */   clone: function() { return /* binding */ clone; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   create: function() { return /* binding */ create; },\n/* harmony export */   cross: function() { return /* binding */ cross; },\n/* harmony export */   dist: function() { return /* binding */ dist; },\n/* harmony export */   distance: function() { return /* binding */ distance; },\n/* harmony export */   div: function() { return /* binding */ div; },\n/* harmony export */   divide: function() { return /* binding */ divide; },\n/* harmony export */   dot: function() { return /* binding */ dot; },\n/* harmony export */   equals: function() { return /* binding */ equals; },\n/* harmony export */   exactEquals: function() { return /* binding */ exactEquals; },\n/* harmony export */   floor: function() { return /* binding */ floor; },\n/* harmony export */   forEach: function() { return /* binding */ forEach; },\n/* harmony export */   fromValues: function() { return /* binding */ fromValues; },\n/* harmony export */   inverse: function() { return /* binding */ inverse; },\n/* harmony export */   len: function() { return /* binding */ len; },\n/* harmony export */   length: function() { return /* binding */ length; },\n/* harmony export */   lerp: function() { return /* binding */ lerp; },\n/* harmony export */   max: function() { return /* binding */ max; },\n/* harmony export */   min: function() { return /* binding */ min; },\n/* harmony export */   mul: function() { return /* binding */ mul; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   negate: function() { return /* binding */ negate; },\n/* harmony export */   normalize: function() { return /* binding */ normalize; },\n/* harmony export */   random: function() { return /* binding */ random; },\n/* harmony export */   round: function() { return /* binding */ round; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   scaleAndAdd: function() { return /* binding */ scaleAndAdd; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   sqrDist: function() { return /* binding */ sqrDist; },\n/* harmony export */   sqrLen: function() { return /* binding */ sqrLen; },\n/* harmony export */   squaredDistance: function() { return /* binding */ squaredDistance; },\n/* harmony export */   squaredLength: function() { return /* binding */ squaredLength; },\n/* harmony export */   str: function() { return /* binding */ str; },\n/* harmony export */   sub: function() { return /* binding */ sub; },\n/* harmony export */   subtract: function() { return /* binding */ subtract; },\n/* harmony export */   transformMat4: function() { return /* binding */ transformMat4; },\n/* harmony export */   transformQuat: function() { return /* binding */ transformQuat; },\n/* harmony export */   zero: function() { return /* binding */ zero; }\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(app-pages-browser)/./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */ /**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n    }\n    return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */ function clone(a) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */ function fromValues(x, y, z, w) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */ function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */ function ceil(out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */ function floor(out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function min(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function max(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */ function round(out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */ function scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */ function distance(a, b) {\n    var x = b[0] - a[0];\n    var y = b[1] - a[1];\n    var z = b[2] - a[2];\n    var w = b[3] - a[3];\n    return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */ function squaredDistance(a, b) {\n    var x = b[0] - a[0];\n    var y = b[1] - a[1];\n    var z = b[2] - a[2];\n    var w = b[3] - a[3];\n    return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    var w = a[3];\n    return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */ function squaredLength(a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    var w = a[3];\n    return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */ function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */ function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    out[3] = 1.0 / a[3];\n    return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */ function normalize(out, a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    var w = a[3];\n    var len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */ function cross(out, u, v, w) {\n    var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];\n    var G = u[0];\n    var H = u[1];\n    var I = u[2];\n    var J = u[3];\n    out[0] = H * F - I * E + J * D;\n    out[1] = -(G * F) + I * C - J * B;\n    out[2] = G * E - H * C + J * A;\n    out[3] = -(G * D) + H * B - I * A;\n    return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */ function lerp(out, a, b, t) {\n    var ax = a[0];\n    var ay = a[1];\n    var az = a[2];\n    var aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */ function random(out, scale) {\n    scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n    // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n    // http://projecteuclid.org/euclid.aoms/1177692644;\n    var v1, v2, v3, v4;\n    var s1, s2;\n    do {\n        v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n        v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n        s1 = v1 * v1 + v2 * v2;\n    }while (s1 >= 1);\n    do {\n        v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n        v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n        s2 = v3 * v3 + v4 * v4;\n    }while (s2 >= 1);\n    var d = Math.sqrt((1 - s1) / s2);\n    out[0] = scale * v1;\n    out[1] = scale * v2;\n    out[2] = scale * v3 * d;\n    out[3] = scale * v4 * d;\n    return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */ function transformMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */ function transformQuat(out, a, q) {\n    var x = a[0], y = a[1], z = a[2];\n    var qx = q[0], qy = q[1], qz = q[2], qw = q[3]; // calculate quat * vec\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */ function zero(out) {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */ function str(a) {\n    return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function equals(a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */ var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */ var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */ var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */ var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */ var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */ var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */ var forEach = function() {\n    var vec = create();\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if (!stride) {\n            stride = 4;\n        }\n        if (!offset) {\n            offset = 0;\n        }\n        if (count) {\n            l = Math.min(count * stride + offset, a.length);\n        } else {\n            l = a.length;\n        }\n        for(i = offset; i < l; i += stride){\n            vec[0] = a[i];\n            vec[1] = a[i + 1];\n            vec[2] = a[i + 2];\n            vec[3] = a[i + 3];\n            fn(vec, vec, arg);\n            a[i] = vec[0];\n            a[i + 1] = vec[1];\n            a[i + 2] = vec[2];\n            a[i + 3] = vec[3];\n        }\n        return a;\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gl-matrix/esm/vec4.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@egjs/react-view360/css/view360.min.css":
/*!**************************************************************!*\
  !*** ./node_modules/@egjs/react-view360/css/view360.min.css ***!
  \**************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"18c869f463b0\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZWdqcy9yZWFjdC12aWV3MzYwL2Nzcy92aWV3MzYwLm1pbi5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZWdqcy9yZWFjdC12aWV3MzYwL2Nzcy92aWV3MzYwLm1pbi5jc3M/MTJiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjE4Yzg2OWY0NjNiMFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@egjs/react-view360/css/view360.min.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./public/360.jpeg":
/*!*************************!*\
  !*** ./public/360.jpeg ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/360.7b7d63c9.jpeg\",\"height\":3072,\"width\":6144,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F360.7b7d63c9.jpeg&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":4});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3B1YmxpYy8zNjAuanBlZyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsQ0FBQyw4TEFBOEwiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcHVibGljLzM2MC5qcGVnP2NiODgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wic3JjXCI6XCIvX25leHQvc3RhdGljL21lZGlhLzM2MC43YjdkNjNjOS5qcGVnXCIsXCJoZWlnaHRcIjozMDcyLFwid2lkdGhcIjo2MTQ0LFwiYmx1ckRhdGFVUkxcIjpcIi9fbmV4dC9pbWFnZT91cmw9JTJGX25leHQlMkZzdGF0aWMlMkZtZWRpYSUyRjM2MC43YjdkNjNjOS5qcGVnJnc9OCZxPTcwXCIsXCJibHVyV2lkdGhcIjo4LFwiYmx1ckhlaWdodFwiOjR9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./public/360.jpeg\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/interiores/360/page.jsx":
/*!*****************************************!*\
  !*** ./src/app/interiores/360/page.jsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_imageViewer_ImageViewer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../components/imageViewer/ImageViewer */ \"(app-pages-browser)/./src/components/imageViewer/ImageViewer.jsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst Page = ()=>{\n    _s();\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true); // Estado para controlar la carga del componente\n    // Simula un tiempo de carga (puedes omitir esto si no necesitas simular una carga)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const timer = setTimeout(()=>{\n            setIsLoading(false);\n        }, 1000); // Simula una carga de 2 segundos\n        return ()=>clearTimeout(timer);\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col items-center justify-center h-full py-24\",\n        children: isLoading ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex justify-center items-center h-[57vh]\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                class: \"loader \"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\app\\\\interiores\\\\360\\\\page.jsx\",\n                lineNumber: 22,\n                columnNumber: 11\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\app\\\\interiores\\\\360\\\\page.jsx\",\n            lineNumber: 21,\n            columnNumber: 9\n        }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"md:w-[600px] lg:w-[800px] px-2\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"py-6 w-auto px-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                className: \"text-2xl font-bold text-center\",\n                                children: [\n                                    \"Interior \",\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-[#4C7CD3]\",\n                                        children: \"360\\xb0\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\app\\\\interiores\\\\360\\\\page.jsx\",\n                                        lineNumber: 28,\n                                        columnNumber: 71\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\app\\\\interiores\\\\360\\\\page.jsx\",\n                                lineNumber: 28,\n                                columnNumber: 15\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-wrap text-center\",\n                                children: \"Manten apretada la imagen y mueve el mouse para ver al rededor\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\app\\\\interiores\\\\360\\\\page.jsx\",\n                                lineNumber: 29,\n                                columnNumber: 15\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\app\\\\interiores\\\\360\\\\page.jsx\",\n                        lineNumber: 27,\n                        columnNumber: 13\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_imageViewer_ImageViewer__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\app\\\\interiores\\\\360\\\\page.jsx\",\n                        lineNumber: 31,\n                        columnNumber: 13\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\app\\\\interiores\\\\360\\\\page.jsx\",\n                lineNumber: 26,\n                columnNumber: 11\n            }, undefined)\n        }, void 0, false)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\app\\\\interiores\\\\360\\\\page.jsx\",\n        lineNumber: 18,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Page, \"Yt82d/dvZsn5nYh5sqDQjv+rJ38=\");\n_c = Page;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Page);\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvaW50ZXJpb3Jlcy8zNjAvcGFnZS5qc3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNtRDtBQUNtQjtBQUV0RSxNQUFNSSxPQUFPOztJQUNYLE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHSiwrQ0FBUUEsQ0FBQyxPQUFPLGdEQUFnRDtJQUVsRyxtRkFBbUY7SUFDbkZELGdEQUFTQSxDQUFDO1FBQ1IsTUFBTU0sUUFBUUMsV0FBVztZQUN2QkYsYUFBYTtRQUNmLEdBQUcsT0FBTyxpQ0FBaUM7UUFDM0MsT0FBTyxJQUFNRyxhQUFhRjtJQUM1QixHQUFHLEVBQUU7SUFFTCxxQkFFRSw4REFBQ0c7UUFBSUMsV0FBVTtrQkFFWk4sMEJBQ0MsOERBQUNLO1lBQUlDLFdBQVU7c0JBQ2IsNEVBQUNDO2dCQUFLQyxPQUFNOzs7Ozs7Ozs7O3NDQUdkO3NCQUNFLDRFQUFDSDtnQkFBSUMsV0FBVTs7a0NBQ2IsOERBQUNEO3dCQUFJQyxXQUFVOzswQ0FDYiw4REFBQ0c7Z0NBQUdILFdBQVU7O29DQUFpQztrREFBUyw4REFBQ0M7d0NBQUtELFdBQVU7a0RBQWlCOzs7Ozs7Ozs7Ozs7MENBQ3pGLDhEQUFDSTtnQ0FBRUosV0FBVTswQ0FBd0I7Ozs7Ozs7Ozs7OztrQ0FFdkMsOERBQUNSLDJFQUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNeEI7R0FoQ01DO0tBQUFBO0FBa0NOLCtEQUFlQSxJQUFJQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvaW50ZXJpb3Jlcy8zNjAvcGFnZS5qc3g/ZjE2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxyXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEltYWdlVmlld2VyIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvaW1hZ2VWaWV3ZXIvSW1hZ2VWaWV3ZXInO1xyXG5cclxuY29uc3QgUGFnZSA9ICgpID0+IHtcclxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7IC8vIEVzdGFkbyBwYXJhIGNvbnRyb2xhciBsYSBjYXJnYSBkZWwgY29tcG9uZW50ZVxyXG5cclxuICAvLyBTaW11bGEgdW4gdGllbXBvIGRlIGNhcmdhIChwdWVkZXMgb21pdGlyIGVzdG8gc2kgbm8gbmVjZXNpdGFzIHNpbXVsYXIgdW5hIGNhcmdhKVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSwgMTAwMCk7IC8vIFNpbXVsYSB1bmEgY2FyZ2EgZGUgMiBzZWd1bmRvc1xyXG4gICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0aW1lcik7XHJcbiAgfSwgW10pO1xyXG5cclxuICByZXR1cm4gKFxyXG5cclxuICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBoLWZ1bGwgcHktMjQnPlxyXG4gICAgICB7LyogUmVuZGVyaXphIGVsIEltYWdlVmlld2VyIGNvbiBpbmRpY2Fkb3IgZGUgY2FyZ2EgY29uZGljaW9uYWwgKi99XHJcbiAgICAgIHtpc0xvYWRpbmcgPyAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciBoLVs1N3ZoXVwiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJsb2FkZXIgXCIgPjwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKSA6IChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J21kOnctWzYwMHB4XSBsZzp3LVs4MDBweF0gcHgtMic+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdweS02IHctYXV0byBweC0yJz5cclxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPSd0ZXh0LTJ4bCBmb250LWJvbGQgdGV4dC1jZW50ZXInPkludGVyaW9yIDxzcGFuIGNsYXNzTmFtZT0ndGV4dC1bIzRDN0NEM10nPjM2MMKwPC9zcGFuPjwvaDM+XHJcbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSd0ZXh0LXdyYXAgdGV4dC1jZW50ZXInPk1hbnRlbiBhcHJldGFkYSBsYSBpbWFnZW4geSBtdWV2ZSBlbCBtb3VzZSBwYXJhIHZlciBhbCByZWRlZG9yPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPEltYWdlVmlld2VyIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Lz5cclxuICAgICAgKX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWdlO1xyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsIkltYWdlVmlld2VyIiwiUGFnZSIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsInRpbWVyIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImRpdiIsImNsYXNzTmFtZSIsInNwYW4iLCJjbGFzcyIsImgzIiwicCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/interiores/360/page.jsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/imageViewer/ImageViewer.jsx":
/*!****************************************************!*\
  !*** ./src/components/imageViewer/ImageViewer.jsx ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _egjs_react_view360__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @egjs/react-view360 */ \"(app-pages-browser)/./node_modules/@egjs/view360/dist/view360.esm.js\");\n/* harmony import */ var _egjs_react_view360__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @egjs/react-view360 */ \"(app-pages-browser)/./node_modules/@egjs/react-view360/dist/view360.esm.js\");\n/* harmony import */ var _egjs_react_view360_css_view360_min_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @egjs/react-view360/css/view360.min.css */ \"(app-pages-browser)/./node_modules/@egjs/react-view360/css/view360.min.css\");\n/* harmony import */ var _public_360_jpeg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../public/360.jpeg */ \"(app-pages-browser)/./public/360.jpeg\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nconst ImageViewer = ()=>{\n    _s();\n    const projection = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return new _egjs_react_view360__WEBPACK_IMPORTED_MODULE_4__.EquirectProjection({\n            src: \"/interior360.jpg\",\n            video: false\n        });\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_egjs_react_view360__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        id: \"viewer\" // Cambié \"#viewer\" a \"id\"\n        ,\n        className: \"is-16by9  h-[400px] md:h-[500px] rounded-lg shadow-xl\",\n        projection: projection,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n            className: \"w-[500px] h-[400px] md:h-[500px] rounded-xl shadow-xl\",\n            src: \"/360.jpeg\",\n            alt: \"\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\components\\\\imageViewer\\\\ImageViewer.jsx\",\n            lineNumber: 22,\n            columnNumber: 13\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\roblesRender\\\\roblesRender\\\\src\\\\components\\\\imageViewer\\\\ImageViewer.jsx\",\n        lineNumber: 16,\n        columnNumber: 9\n    }, undefined);\n};\n_s(ImageViewer, \"bbnHS/MGZmowTol/oTNGnvuf2Pw=\");\n_c = ImageViewer;\n/* harmony default export */ __webpack_exports__[\"default\"] = (ImageViewer);\nvar _c;\n$RefreshReg$(_c, \"ImageViewer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2ltYWdlVmlld2VyL0ltYWdlVmlld2VyLmpzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ3VDO0FBQzJCO0FBQ2pCO0FBQ1A7QUFFMUMsTUFBTUssY0FBYzs7SUFDaEIsTUFBTUMsYUFBYUwsOENBQU9BLENBQUM7UUFDdkIsT0FBTyxJQUFJRSxtRUFBa0JBLENBQUM7WUFDMUJJLEtBQUs7WUFDTEMsT0FBTztRQUNYO0lBQ0osR0FBRyxFQUFFO0lBRUwscUJBQ0ksOERBQUNOLDJEQUFPQTtRQUVKTyxJQUFHLFNBQVMsMEJBQTBCOztRQUN0Q0MsV0FBVTtRQUNWSixZQUFZQTtrQkFFWiw0RUFBQ0Y7WUFBSU0sV0FBVTtZQUF3REgsS0FBSTtZQUFZSSxLQUFJOzs7Ozs7Ozs7OztBQUd2RztHQWxCTU47S0FBQUE7QUFvQk4sK0RBQWVBLFdBQVdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvaW1hZ2VWaWV3ZXIvSW1hZ2VWaWV3ZXIuanN4PzdkOTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcclxuaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBWaWV3MzYwLCB7IEVxdWlyZWN0UHJvamVjdGlvbiB9IGZyb20gXCJAZWdqcy9yZWFjdC12aWV3MzYwXCI7XHJcbmltcG9ydCBcIkBlZ2pzL3JlYWN0LXZpZXczNjAvY3NzL3ZpZXczNjAubWluLmNzc1wiO1xyXG5pbXBvcnQgaW1nIGZyb20gXCIuLi8uLi8uLi9wdWJsaWMvMzYwLmpwZWdcIlxyXG5cclxuY29uc3QgSW1hZ2VWaWV3ZXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBwcm9qZWN0aW9uID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFcXVpcmVjdFByb2plY3Rpb24oe1xyXG4gICAgICAgICAgICBzcmM6IFwiL2ludGVyaW9yMzYwLmpwZ1wiLFxyXG4gICAgICAgICAgICB2aWRlbzogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxWaWV3MzYwXHJcblxyXG4gICAgICAgICAgICBpZD1cInZpZXdlclwiIC8vIENhbWJpw6kgXCIjdmlld2VyXCIgYSBcImlkXCJcclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaXMtMTZieTkgIGgtWzQwMHB4XSBtZDpoLVs1MDBweF0gcm91bmRlZC1sZyBzaGFkb3cteGxcIlxyXG4gICAgICAgICAgICBwcm9qZWN0aW9uPXtwcm9qZWN0aW9ufVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9J3ctWzUwMHB4XSBoLVs0MDBweF0gbWQ6aC1bNTAwcHhdIHJvdW5kZWQteGwgc2hhZG93LXhsJyBzcmM9XCIvMzYwLmpwZWdcIiBhbHQ9XCJcIiAvPlxyXG4gICAgICAgIDwvVmlldzM2MD5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbWFnZVZpZXdlcjtcclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlTWVtbyIsIlZpZXczNjAiLCJFcXVpcmVjdFByb2plY3Rpb24iLCJpbWciLCJJbWFnZVZpZXdlciIsInByb2plY3Rpb24iLCJzcmMiLCJ2aWRlbyIsImlkIiwiY2xhc3NOYW1lIiwiYWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/imageViewer/ImageViewer.jsx\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CAdministrador%5CDesktop%5CroblesRender%5CroblesRender%5Csrc%5Capp%5Cinteriores%5C360%5Cpage.jsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);